

----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:20:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (13 October 2021 15:21:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:21:02) CuisUniversity-4913.image priorSource: 18661997!

----QUIT----(13 October 2021 15:26:07) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:26:08) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:26:08) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (7 November 2021 11:20:04) as C:\Users\ferra\Desktop\CUIS SmallTalk\windows64\CuisUniversity-4913.image!


----End fileIn of D:\Apuntes\Inge 1\Repos\Repo de entregas\20-TusLibros\Iteracion-3\TusLibros-33.st----!

TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'AF 11/7/2021 11:25:04'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 11:40:56'!
Object subclass: #Interface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'nil' stamp: 'AF 11/7/2021 11:40:44'!
test01

	| interface invalidUser password |
	interface := Interface authenticatingWith: self.
	
	testObjectsFactory
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'xxxx'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:41:43' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:42:11' prior: 50915418!
test01

	| interface invalidUser password |
	
	self setUp.
	
	interface := Interface authenticatingWith: self.
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'xxxx'
! !

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'AF 11/7/2021 11:44:27'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectsFactory shouldAuthenticate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:44:24' prior: 50915434!
test01

	| interface invalidUser password |
	
	self setUp.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self.
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:53:30' prior: 50915453!
test01

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self.
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 11:53:30'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:53:39'!
authenticatingWith: anInterfaceTest 
	self shouldBeImplemented.! !

!classDefinition: 'Interface class' category: 'TusLibros' stamp: 'AF 11/7/2021 11:54:13'!
Interface class
	instanceVariableNames: 'authenticator'!
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:54:11' prior: 50915481!
authenticatingWith: anAuthenticator
	
	authenticator := anAuthenticator ! !

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 11:54:15'!
FAILURE!

Interface class
	instanceVariableNames: ''!

!classDefinition: 'Interface class' category: 'TusLibros' stamp: 'AF 11/7/2021 11:58:34'!
Interface class
	instanceVariableNames: ''!
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:59:04' prior: 50915491!
authenticatingWith: anAuthenticator
	
	^self basicNew authenticatingWith: anAuthenticator .! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 11:59:37'!
Object subclass: #Interface
	instanceVariableNames: 'autheticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'no messages' stamp: 'AF 11/7/2021 11:59:36'!
authenticatingWith: anAuthenticator

	autheticator := anAuthenticator .! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:02:44'!
createCartFor: aUser with: aPassword

	autheticator authenticateUser: aUser with: aPassword .! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 12:02:51'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:02:51' prior: 50915523!
createCartFor: aUser with: aPassword

	authenticator authenticateUser: aUser with: aPassword .! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:02:51' prior: 50915518!
authenticatingWith: anAuthenticator

	authenticator := anAuthenticator .! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:04:08' prior: 50915536!
createCartFor: aUser with: aPassword

	authenticator authenticateUser: aUser with: aPassword .! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:05:49' prior: 50915548!
createCartFor: aUser with: aPassword

	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid Credentials']
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:05:54' prior: 50915554!
createCartFor: aUser with: aPassword

	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid Credentials'].
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:06:05' prior: 50915562!
createCartFor: aUser with: aPassword

	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	! !

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 12:07:21'!
FAILURE!

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 12:07:21'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:08:11'!
authenticateUser: aUser with: aPassword

	^shouldAuthenticate! !

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 12:08:13'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:27:54'!
test02

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self.
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!testRun: #InterfaceTest #test02 stamp: 'AF 11/7/2021 12:28:03'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:28:07'!
listCart: anInterface 
	self shouldBeImplemented.! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 12:29:49'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:29:40' prior: 50915605!
listCart: aCartId 
	
	^(activeCarts at: aCartId) contents.! !

!testRun: #InterfaceTest #test02 stamp: 'AF 11/7/2021 12:30:09'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:30:38' prior: 50915570!
createCartFor: aUser with: aPassword

	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	^1.! !

----End fileIn of C:\Users\ferra\Desktop\CUIS SmallTalk\windows64\Packages\TerseGuide.pck.st----!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 12:36:11'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:36:06' prior: 50915625!
createCartFor: aUser with: aPassword

	| cart cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	cart := Cart acceptingItemsOf: catalog.
	
	cartId := 1.
	
	activeCarts add: cartId -> cart.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:38:06' prior: 50915542!
authenticatingWith: anAuthenticator

	authenticator := anAuthenticator .
		
	activeCarts := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:38:21' prior: 50918578!
authenticatingWith: anAuthenticator

	authenticator := anAuthenticator .
	
	activeCarts := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:51'!
authenticatingWith: anAuthenticator andCatalog: aCatalog 

	authenticator := anAuthenticator .
	
	activeCarts := Dictionary new.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:51'!
authenticatingWith: anAuthenticator andCatalog: aCatalog 
	
	^self basicNew authenticatingWith: anAuthenticator .! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:52' prior: 50915505!
authenticatingWith: anAuthenticator
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: catalog .! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:52' prior: 50915589!
test02

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: catalog.
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:52' prior: 50915465!
test01

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: catalog.
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:52' prior: 50918598!
authenticatingWith: anAuthenticator andCatalog: aCatalog 
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: catalog .! !

!methodRemoval: Interface #authenticatingWith: stamp: 'AF 11/7/2021 12:39:52'!
authenticatingWith: anAuthenticator

	authenticator := anAuthenticator .
	
	activeCarts := Dictionary new.!

!methodRemoval: Interface class #authenticatingWith: stamp: 'AF 11/7/2021 12:39:52'!
authenticatingWith: anAuthenticator
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: catalog .!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:40:11' prior: 50918591!
authenticatingWith: anAuthenticator andCatalog: aCatalog 

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:40:22' prior: 50918641!
authenticatingWith: anAuthenticator andCatalog: aCatalog 
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog .! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:40:53' prior: 50918627!
test01

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: testObjectsFactory defaultCatalog .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:41:09' prior: 50918612!
test02

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: testObjectsFactory defaultCatalog .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!testRun: #InterfaceTest #test02 stamp: 'AF 11/7/2021 12:41:11'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:42:59' prior: 50915617!
listCart: aCartId 
	
	^OrderedCollection new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:43:22' prior: 50918566!
createCartFor: aUser with: aPassword

	| cart cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	cart := Cart acceptingItemsOf: catalog.
	
	cartId := 1.
	
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:43:47' prior: 50918715!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	cartId := 1.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:44:13' prior: 50918661!
authenticatingWith: anAuthenticator andCatalog: aCatalog 

	authenticator := anAuthenticator .
	
	activeCarts := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:44:16' prior: 50918735!
authenticatingWith: anAuthenticator andCatalog: aCatalog 

	authenticator := anAuthenticator .
	! !

Object subclass: #Interface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 12:44:37'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:45:18' prior: 50918669!
authenticatingWith: anAuthenticator andCatalog: aCatalog 
	
	^self basicNew authenticatingWith: anAuthenticator.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:45:26'!
authenticatingWith: anAuthenticator  
	
	^self basicNew authenticatingWith: anAuthenticator.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:45:26'!
authenticatingWith: anAuthenticator  

	authenticator := anAuthenticator .
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:45:26' prior: 50918692!
test02

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:45:26' prior: 50918677!
test01

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !

!methodRemoval: Interface class #authenticatingWith:andCatalog: stamp: 'AF 11/7/2021 12:45:26'!
authenticatingWith: anAuthenticator andCatalog: aCatalog 
	
	^self basicNew authenticatingWith: anAuthenticator.!

!methodRemoval: Interface #authenticatingWith:andCatalog: stamp: 'AF 11/7/2021 12:45:26'!
authenticatingWith: anAuthenticator andCatalog: aCatalog 

	authenticator := anAuthenticator .
	!

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 12:45:29'!
PASSED!

!testRun: #InterfaceTest #test02 stamp: 'AF 11/7/2021 12:45:29'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:50:48'!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !

!methodRemoval: InterfaceTest #test01 stamp: 'AF 11/7/2021 12:50:48'!
test01

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:51:47'!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!methodRemoval: InterfaceTest #test02 stamp: 'AF 11/7/2021 12:51:47'!
test02

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:04:08'!
test03

	| interface cartId book quantity |
	
	self setUp.
	
	interface := Interface authenticatingWith: self .
	
	cartId := 1.
	
	self should: [interface add: quantity of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:05:27' prior: 50918881!
test03

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 13:05:30'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:06:34'!
add: anAmount of: aBook to: aCartId

	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 13:09:30'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 13:09:30'!
PASSED!

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 13:09:30'!
FAILURE!

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 13:09:30'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:10:41' prior: 50918906!
add: anAmount of: aBook to: aCartId

	self error: 'Invalid cart id'! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 13:10:42'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 13:10:42'!
PASSED!

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 13:10:42'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:15:03'!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	interface := Interface authenticatingWith: self .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := self listCart: cartId.
	
	self assert: (cartContents contains: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:15:59' prior: 50918938!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	interface := Interface authenticatingWith: self .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := self listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 13:16:00'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:17:58' prior: 50918951!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 13:17:59'!
ERROR!

----SNAPSHOT----(7 November 2021 14:36:43) CuisUniversity-4913.image priorSource: 18661997!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:36:48'!
ERROR!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 14:43:28'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 14:43:29'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:43:25' prior: 50918726!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	cartId := 1.
	
	^cartId.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08'!
authenticatingWith: anAuthenticator andCatalog: aCatalog   
	
	^self basicNew authenticatingWith: anAuthenticator.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08'!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50918892!
test03

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: aCatalog .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50918967!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: aCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50918852!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: aCatalog .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50918768!
authenticatingWith: anAuthenticator  
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50918825!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: aCatalog .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50919015!
authenticatingWith: anAuthenticator andCatalog: aCatalog   
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog.! !

!methodRemoval: Interface class #authenticatingWith: stamp: 'AF 11/7/2021 14:45:08'!
authenticatingWith: anAuthenticator  
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog.!

!methodRemoval: Interface #authenticatingWith: stamp: 'AF 11/7/2021 14:45:08'!
authenticatingWith: anAuthenticator  

	authenticator := anAuthenticator .
	!
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:54' prior: 50919098!
authenticatingWith: anAuthenticator andCatalog: aCatalog   
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:46:21' prior: 50919022!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	
	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 14:46:27'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 14:46:27'!
PASSED!

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 14:46:27'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:46:27'!
ERROR!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:46:27'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:47:42' prior: 50918923!
add: anAmount of: aBook to: aCartId

	activeCart isNil ifTrue: [self error: 'Invalid cart id'].
	
	^activeCart add: aBook .! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 14:47:43'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 14:47:43'!
PASSED!

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 14:47:43'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:47:43'!
ERROR!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:47:43'!
ERROR!

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'AF 11/7/2021 14:48:53'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectsFactory shouldAuthenticate defaultCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:48:51' prior: 50915429 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	defaultCatalog := testObjectsFactory defaultCatalog.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:49:01' prior: 50919082!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:49:09' prior: 50919058!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:49:23' prior: 50919029!
test03

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:49:30' prior: 50919042!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:49:30'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:50:24' prior: 50918710!
listCart: aCartId 
	
	^activeCart contents.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:50:41' prior: 50919250!
listCart: aCartId 
	
	^activeCart contents.! !

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:51:52'!
ERROR!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:51:52'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:52:02'!
contents
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:52:18' prior: 50919264!
contents
	
	^items copy.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AF 11/7/2021 14:52:19'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:56:44'!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !

!methodRemoval: InterfaceTest #test03 stamp: 'AF 11/7/2021 14:56:44'!
test03

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:06:01'!
test05

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents occurrencesOf: book)
	! !

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:06:07'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:06:30' prior: 50919322!
test05

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:06:31'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:06:59' prior: 50919147!
add: anAmount of: aBook to: aCartId

	activeCart isNil ifTrue: [self error: 'Invalid cart id'].
	
	^activeCart add: anAmount of: aBook.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:07:01'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:07:01'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:07:01'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 15:07:01'!
PASSED!

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:07:01'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:08:34'!
test06

	| interface cartId book |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface add: 0 of: book to: cartId.]
		raise: Error
		withMessageText: 'Quantity of books must be greater than 0' 
	
	! !

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:08:48'!
FAILURE!

!methodRemoval: InterfaceTest #test06 stamp: 'AF 11/7/2021 15:11:00'!
test06

	| interface cartId book |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface add: 0 of: book to: cartId.]
		raise: Error
		withMessageText: 'Quantity of books must be greater than 0' 
	
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:14:08'!
test06

	| interface validUser password cartId1 cartId2 |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: validUser with: password.
	
	self assert: cartId1 ~= cartId2! !

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:14:22'!
FAILURE!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 15:17:10'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCart catalog lastIdUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:17:08' prior: 50919005!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	
	cartId := lastIdUsed + 1.
	lastIdUsed := cartId.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:17:50' prior: 50919125!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	lastIdUsed = 1.
	
	
	! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 15:17:57'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCart catalog nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:17:57' prior: 50919442!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	
	cartId := nextId + 1.
	nextId := cartId.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:17:57' prior: 50919454!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	nextId = 1.
	
	
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:18:08' prior: 50919470!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	
	cartId := nextId.
	nextId := cartId + 1.
	
	^cartId.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:18:22'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:18:22'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:18:22'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 15:18:22'!
ERROR!

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:18:22'!
ERROR!

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:18:22'!
ERROR!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:18:30'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:18:30'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:18:30'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 15:18:30'!
ERROR!

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:18:30'!
ERROR!

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:18:30'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:18:34'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:19:03' prior: 50919482!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	nextId := 1.
	
	
	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:19:05'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:19:05'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:19:05'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 15:19:05'!
PASSED!

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:19:05'!
PASSED!

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:19:05'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:19:19' prior: 50919490!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	
	cartId := nextId copy.
	nextId := cartId + 1.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:19:59' prior: 50919567!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	
	cartId := nextId .
	nextId := cartId + 1.
	
	^cartId.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:19:59'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:19:59'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:19:59'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 15:19:59'!
PASSED!

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:19:59'!
PASSED!

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:19:59'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:23:11'!
test04AddingBookToValidIdCartWorksAsIntended

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!methodRemoval: InterfaceTest #test04 stamp: 'AF 11/7/2021 15:23:11'!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:23:44'!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!methodRemoval: InterfaceTest #test04AddingBookToValidIdCartWorksAsIntended stamp: 'AF 11/7/2021 15:23:44'!
test04AddingBookToValidIdCartWorksAsIntended

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:24:36'!
test05AddingMultipleOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !

!methodRemoval: InterfaceTest #test05 stamp: 'AF 11/7/2021 15:24:36'!
test05

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:24:52'!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !

!methodRemoval: InterfaceTest #test05AddingMultipleOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:24:52'!
test05AddingMultipleOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:25:55'!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: validUser with: password.
	
	self assert: cartId1 ~= cartId2! !

!methodRemoval: InterfaceTest #test06 stamp: 'AF 11/7/2021 15:25:55'!
test06

	| interface validUser password cartId1 cartId2 |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: validUser with: password.
	
	self assert: cartId1 ~= cartId2!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:26:10' prior: 50919747!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:26:34' prior: 50919779!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:26:35'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:29:34'!
test07

	| interface validUser password cartId1 cartId2 anotherValidUser book|
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	book := testObjectsFactory itemSellByTheStore .
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:33:05' prior: 50919842!
test07

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	book := testObjectsFactory itemSellByTheStore .
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:34:15' prior: 50919863!
test07

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !

!testRun: #InterfaceTest #test07 stamp: 'AF 11/7/2021 15:34:15'!
FAILURE!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 15:34:58'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:34:58' prior: 50919360!
add: anAmount of: aBook to: aCartId

	activeCarts isNil ifTrue: [self error: 'Invalid cart id'].
	
	^activeCarts add: anAmount of: aBook.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:34:58' prior: 50919255!
listCart: aCartId 
	
	^activeCarts contents.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:34:58' prior: 50919579!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCarts := Cart acceptingItemsOf: catalog.
	
	cartId := nextId .
	nextId := cartId + 1.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:35:45' prior: 50919936!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	cartId := nextId .
	nextId := cartId + 1.
	
	activeCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.! !

----SNAPSHOT----(7 November 2021 15:36:03) CuisUniversity-4913.image priorSource: 18794674!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:42:02' prior: 50919948!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	cartId := nextId .
	nextId := cartId + 1.
	
	activeCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:42:25' prior: 50919541!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	
	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:42:27'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:42:27'!
FAILURE!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:42:27'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:42:27'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:42:27'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:42:27'!
PASSED!

!testRun: #InterfaceTest #test07 stamp: 'AF 11/7/2021 15:42:27'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:42:30'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:43:13' prior: 50919931!
listCart: aCartId 
	
	^(activeCarts at: aCartId) contents.! !

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:43:15'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:43:17'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:43:17'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:43:17'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:43:17'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:43:17'!
ERROR!

!testRun: #InterfaceTest #test07 stamp: 'AF 11/7/2021 15:43:17'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:43:17'!
FAILURE!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:43:20'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:44:13' prior: 50919923!
add: anAmount of: aBook to: aCartId

	activeCarts isNil ifTrue: [self error: 'Invalid cart id'].
	
	^(activeCarts at: aCartId) add: anAmount of: aBook.! !

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:44:14'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:45:19' prior: 50920050!
add: anAmount of: aBook to: aCartId

	
	^(activeCarts at: aCartId ifAbsent:[self error: 'Invalid cart id']) add: anAmount of: aBook.! !

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:45:20'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test07 stamp: 'AF 11/7/2021 15:45:22'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:46:34'!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !

!methodRemoval: InterfaceTest #test07 stamp: 'AF 11/7/2021 15:46:34'!
test07

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:50:18'!
test08

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: 'Invalid cart id' ! !

!testRun: #InterfaceTest #test08 stamp: 'AF 11/7/2021 15:50:40'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:51:15' prior: 50920013!
listCart: aCartId 
	
	^(activeCarts at: aCartId ifAbsent: [self error: 'Invalid cart id']) contents.! !

!testRun: #InterfaceTest #test08 stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test08 stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test08 stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test08 stamp: 'AF 11/7/2021 15:51:18'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:51:59'!
test08ListingInvalidCartIdThrowsError

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: 'Invalid cart id' ! !

!methodRemoval: InterfaceTest #test08 stamp: 'AF 11/7/2021 15:51:59'!
test08

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: 'Invalid cart id' !

----SNAPSHOT----(7 November 2021 15:52:05) CuisUniversity-4913.image priorSource: 18825876!

----SNAPSHOT----(7 November 2021 15:52:15) CuisUniversity-4913.image priorSource: 18835053!