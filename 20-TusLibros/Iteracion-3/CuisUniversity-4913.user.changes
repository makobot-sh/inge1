

----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:20:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (13 October 2021 15:21:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:21:02) CuisUniversity-4913.image priorSource: 18661997!

----QUIT----(13 October 2021 15:26:07) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:26:08) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:26:08) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (7 November 2021 11:20:04) as C:\Users\ferra\Desktop\CUIS SmallTalk\windows64\CuisUniversity-4913.image!


----End fileIn of D:\Apuntes\Inge 1\Repos\Repo de entregas\20-TusLibros\Iteracion-3\TusLibros-33.st----!

TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'AF 11/7/2021 11:25:04'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 11:40:56'!
Object subclass: #Interface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'nil' stamp: 'AF 11/7/2021 11:40:44'!
test01

	| interface invalidUser password |
	interface := Interface authenticatingWith: self.
	
	testObjectsFactory
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'xxxx'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:41:43' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:42:11' prior: 50915418!
test01

	| interface invalidUser password |
	
	self setUp.
	
	interface := Interface authenticatingWith: self.
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'xxxx'
! !

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'AF 11/7/2021 11:44:27'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectsFactory shouldAuthenticate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:44:24' prior: 50915434!
test01

	| interface invalidUser password |
	
	self setUp.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self.
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:53:30' prior: 50915453!
test01

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self.
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 11:53:30'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:53:39'!
authenticatingWith: anInterfaceTest 
	self shouldBeImplemented.! !

!classDefinition: 'Interface class' category: 'TusLibros' stamp: 'AF 11/7/2021 11:54:13'!
Interface class
	instanceVariableNames: 'authenticator'!
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:54:11' prior: 50915481!
authenticatingWith: anAuthenticator
	
	authenticator := anAuthenticator ! !

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 11:54:15'!
FAILURE!

Interface class
	instanceVariableNames: ''!

!classDefinition: 'Interface class' category: 'TusLibros' stamp: 'AF 11/7/2021 11:58:34'!
Interface class
	instanceVariableNames: ''!
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 11:59:04' prior: 50915491!
authenticatingWith: anAuthenticator
	
	^self basicNew authenticatingWith: anAuthenticator .! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 11:59:37'!
Object subclass: #Interface
	instanceVariableNames: 'autheticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'no messages' stamp: 'AF 11/7/2021 11:59:36'!
authenticatingWith: anAuthenticator

	autheticator := anAuthenticator .! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:02:44'!
createCartFor: aUser with: aPassword

	autheticator authenticateUser: aUser with: aPassword .! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 12:02:51'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:02:51' prior: 50915523!
createCartFor: aUser with: aPassword

	authenticator authenticateUser: aUser with: aPassword .! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:02:51' prior: 50915518!
authenticatingWith: anAuthenticator

	authenticator := anAuthenticator .! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:04:08' prior: 50915536!
createCartFor: aUser with: aPassword

	authenticator authenticateUser: aUser with: aPassword .! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:05:49' prior: 50915548!
createCartFor: aUser with: aPassword

	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid Credentials']
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:05:54' prior: 50915554!
createCartFor: aUser with: aPassword

	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid Credentials'].
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:06:05' prior: 50915562!
createCartFor: aUser with: aPassword

	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	! !

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 12:07:21'!
FAILURE!

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 12:07:21'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:08:11'!
authenticateUser: aUser with: aPassword

	^shouldAuthenticate! !

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 12:08:13'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:27:54'!
test02

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self.
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!testRun: #InterfaceTest #test02 stamp: 'AF 11/7/2021 12:28:03'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:28:07'!
listCart: anInterface 
	self shouldBeImplemented.! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 12:29:49'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:29:40' prior: 50915605!
listCart: aCartId 
	
	^(activeCarts at: aCartId) contents.! !

!testRun: #InterfaceTest #test02 stamp: 'AF 11/7/2021 12:30:09'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:30:38' prior: 50915570!
createCartFor: aUser with: aPassword

	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	^1.! !

----End fileIn of C:\Users\ferra\Desktop\CUIS SmallTalk\windows64\Packages\TerseGuide.pck.st----!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 12:36:11'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:36:06' prior: 50915625!
createCartFor: aUser with: aPassword

	| cart cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	cart := Cart acceptingItemsOf: catalog.
	
	cartId := 1.
	
	activeCarts add: cartId -> cart.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:38:06' prior: 50915542!
authenticatingWith: anAuthenticator

	authenticator := anAuthenticator .
		
	activeCarts := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:38:21' prior: 50918578!
authenticatingWith: anAuthenticator

	authenticator := anAuthenticator .
	
	activeCarts := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:51'!
authenticatingWith: anAuthenticator andCatalog: aCatalog 

	authenticator := anAuthenticator .
	
	activeCarts := Dictionary new.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:51'!
authenticatingWith: anAuthenticator andCatalog: aCatalog 
	
	^self basicNew authenticatingWith: anAuthenticator .! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:52' prior: 50915505!
authenticatingWith: anAuthenticator
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: catalog .! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:52' prior: 50915589!
test02

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: catalog.
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:52' prior: 50915465!
test01

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: catalog.
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:39:52' prior: 50918598!
authenticatingWith: anAuthenticator andCatalog: aCatalog 
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: catalog .! !

!methodRemoval: Interface #authenticatingWith: stamp: 'AF 11/7/2021 12:39:52'!
authenticatingWith: anAuthenticator

	authenticator := anAuthenticator .
	
	activeCarts := Dictionary new.!

!methodRemoval: Interface class #authenticatingWith: stamp: 'AF 11/7/2021 12:39:52'!
authenticatingWith: anAuthenticator
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: catalog .!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:40:11' prior: 50918591!
authenticatingWith: anAuthenticator andCatalog: aCatalog 

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:40:22' prior: 50918641!
authenticatingWith: anAuthenticator andCatalog: aCatalog 
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog .! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:40:53' prior: 50918627!
test01

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: testObjectsFactory defaultCatalog .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:41:09' prior: 50918612!
test02

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: testObjectsFactory defaultCatalog .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!testRun: #InterfaceTest #test02 stamp: 'AF 11/7/2021 12:41:11'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:42:59' prior: 50915617!
listCart: aCartId 
	
	^OrderedCollection new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:43:22' prior: 50918566!
createCartFor: aUser with: aPassword

	| cart cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	cart := Cart acceptingItemsOf: catalog.
	
	cartId := 1.
	
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:43:47' prior: 50918715!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	cartId := 1.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:44:13' prior: 50918661!
authenticatingWith: anAuthenticator andCatalog: aCatalog 

	authenticator := anAuthenticator .
	
	activeCarts := Dictionary new.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:44:16' prior: 50918735!
authenticatingWith: anAuthenticator andCatalog: aCatalog 

	authenticator := anAuthenticator .
	! !

Object subclass: #Interface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 12:44:37'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:45:18' prior: 50918669!
authenticatingWith: anAuthenticator andCatalog: aCatalog 
	
	^self basicNew authenticatingWith: anAuthenticator.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:45:26'!
authenticatingWith: anAuthenticator  
	
	^self basicNew authenticatingWith: anAuthenticator.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:45:26'!
authenticatingWith: anAuthenticator  

	authenticator := anAuthenticator .
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:45:26' prior: 50918692!
test02

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:45:26' prior: 50918677!
test01

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !

!methodRemoval: Interface class #authenticatingWith:andCatalog: stamp: 'AF 11/7/2021 12:45:26'!
authenticatingWith: anAuthenticator andCatalog: aCatalog 
	
	^self basicNew authenticatingWith: anAuthenticator.!

!methodRemoval: Interface #authenticatingWith:andCatalog: stamp: 'AF 11/7/2021 12:45:26'!
authenticatingWith: anAuthenticator andCatalog: aCatalog 

	authenticator := anAuthenticator .
	!

!testRun: #InterfaceTest #test01 stamp: 'AF 11/7/2021 12:45:29'!
PASSED!

!testRun: #InterfaceTest #test02 stamp: 'AF 11/7/2021 12:45:29'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:50:48'!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !

!methodRemoval: InterfaceTest #test01 stamp: 'AF 11/7/2021 12:50:48'!
test01

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 12:51:47'!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!methodRemoval: InterfaceTest #test02 stamp: 'AF 11/7/2021 12:51:47'!
test02

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:04:08'!
test03

	| interface cartId book quantity |
	
	self setUp.
	
	interface := Interface authenticatingWith: self .
	
	cartId := 1.
	
	self should: [interface add: quantity of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:05:27' prior: 50918881!
test03

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 13:05:30'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:06:34'!
add: anAmount of: aBook to: aCartId

	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 13:09:30'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 13:09:30'!
PASSED!

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 13:09:30'!
FAILURE!

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 13:09:30'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:10:41' prior: 50918906!
add: anAmount of: aBook to: aCartId

	self error: 'Invalid cart id'! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 13:10:42'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 13:10:42'!
PASSED!

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 13:10:42'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:15:03'!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	interface := Interface authenticatingWith: self .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := self listCart: cartId.
	
	self assert: (cartContents contains: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:15:59' prior: 50918938!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	interface := Interface authenticatingWith: self .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := self listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 13:16:00'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 13:17:58' prior: 50918951!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 13:17:59'!
ERROR!

----SNAPSHOT----(7 November 2021 14:36:43) CuisUniversity-4913.image priorSource: 18661997!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:36:48'!
ERROR!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 14:43:28'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 14:43:29'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:43:25' prior: 50918726!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	cartId := 1.
	
	^cartId.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08'!
authenticatingWith: anAuthenticator andCatalog: aCatalog   
	
	^self basicNew authenticatingWith: anAuthenticator.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08'!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50918892!
test03

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: aCatalog .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50918967!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: aCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50918852!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: aCatalog .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50918768!
authenticatingWith: anAuthenticator  
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50918825!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: aCatalog .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:08' prior: 50919015!
authenticatingWith: anAuthenticator andCatalog: aCatalog   
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog.! !

!methodRemoval: Interface class #authenticatingWith: stamp: 'AF 11/7/2021 14:45:08'!
authenticatingWith: anAuthenticator  
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog.!

!methodRemoval: Interface #authenticatingWith: stamp: 'AF 11/7/2021 14:45:08'!
authenticatingWith: anAuthenticator  

	authenticator := anAuthenticator .
	!
!Interface class methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:45:54' prior: 50919098!
authenticatingWith: anAuthenticator andCatalog: aCatalog   
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:46:21' prior: 50919022!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	
	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 14:46:27'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 14:46:27'!
PASSED!

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 14:46:27'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:46:27'!
ERROR!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:46:27'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:47:42' prior: 50918923!
add: anAmount of: aBook to: aCartId

	activeCart isNil ifTrue: [self error: 'Invalid cart id'].
	
	^activeCart add: aBook .! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 14:47:43'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 14:47:43'!
PASSED!

!testRun: #InterfaceTest #test03 stamp: 'AF 11/7/2021 14:47:43'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:47:43'!
ERROR!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:47:43'!
ERROR!

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'AF 11/7/2021 14:48:53'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: 'testObjectsFactory shouldAuthenticate defaultCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:48:51' prior: 50915429 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	
	defaultCatalog := testObjectsFactory defaultCatalog.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:49:01' prior: 50919082!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:49:09' prior: 50919058!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:49:23' prior: 50919029!
test03

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:49:30' prior: 50919042!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:49:30'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:50:24' prior: 50918710!
listCart: aCartId 
	
	^activeCart contents.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:50:41' prior: 50919250!
listCart: aCartId 
	
	^activeCart contents.! !

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:51:52'!
ERROR!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 14:51:52'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:52:02'!
contents
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:52:18' prior: 50919264!
contents
	
	^items copy.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AF 11/7/2021 14:52:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AF 11/7/2021 14:52:19'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:56:44'!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !

!methodRemoval: InterfaceTest #test03 stamp: 'AF 11/7/2021 14:56:44'!
test03

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:06:01'!
test05

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents occurrencesOf: book)
	! !

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:06:07'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:06:30' prior: 50919322!
test05

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:06:31'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:06:59' prior: 50919147!
add: anAmount of: aBook to: aCartId

	activeCart isNil ifTrue: [self error: 'Invalid cart id'].
	
	^activeCart add: anAmount of: aBook.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:07:01'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:07:01'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:07:01'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 15:07:01'!
PASSED!

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:07:01'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:08:34'!
test06

	| interface cartId book |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface add: 0 of: book to: cartId.]
		raise: Error
		withMessageText: 'Quantity of books must be greater than 0' 
	
	! !

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:08:48'!
FAILURE!

!methodRemoval: InterfaceTest #test06 stamp: 'AF 11/7/2021 15:11:00'!
test06

	| interface cartId book |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	
	self should: [interface add: 0 of: book to: cartId.]
		raise: Error
		withMessageText: 'Quantity of books must be greater than 0' 
	
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:14:08'!
test06

	| interface validUser password cartId1 cartId2 |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: validUser with: password.
	
	self assert: cartId1 ~= cartId2! !

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:14:22'!
FAILURE!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 15:17:10'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCart catalog lastIdUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:17:08' prior: 50919005!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	
	cartId := lastIdUsed + 1.
	lastIdUsed := cartId.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:17:50' prior: 50919125!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	lastIdUsed = 1.
	
	
	! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 15:17:57'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCart catalog nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:17:57' prior: 50919442!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	
	cartId := nextId + 1.
	nextId := cartId.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:17:57' prior: 50919454!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	nextId = 1.
	
	
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:18:08' prior: 50919470!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	
	cartId := nextId.
	nextId := cartId + 1.
	
	^cartId.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:18:22'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:18:22'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:18:22'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 15:18:22'!
ERROR!

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:18:22'!
ERROR!

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:18:22'!
ERROR!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:18:30'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:18:30'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:18:30'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 15:18:30'!
ERROR!

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:18:30'!
ERROR!

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:18:30'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:18:34'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:19:03' prior: 50919482!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	nextId := 1.
	
	
	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:19:05'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:19:05'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:19:05'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 15:19:05'!
PASSED!

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:19:05'!
PASSED!

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:19:05'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:19:19' prior: 50919490!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	
	cartId := nextId copy.
	nextId := cartId + 1.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:19:59' prior: 50919567!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCart := Cart acceptingItemsOf: catalog.
	
	cartId := nextId .
	nextId := cartId + 1.
	
	^cartId.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:19:59'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:19:59'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:19:59'!
PASSED!

!testRun: #InterfaceTest #test04 stamp: 'AF 11/7/2021 15:19:59'!
PASSED!

!testRun: #InterfaceTest #test05 stamp: 'AF 11/7/2021 15:19:59'!
PASSED!

!testRun: #InterfaceTest #test06 stamp: 'AF 11/7/2021 15:19:59'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:23:11'!
test04AddingBookToValidIdCartWorksAsIntended

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!methodRemoval: InterfaceTest #test04 stamp: 'AF 11/7/2021 15:23:11'!
test04

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:23:44'!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!methodRemoval: InterfaceTest #test04AddingBookToValidIdCartWorksAsIntended stamp: 'AF 11/7/2021 15:23:44'!
test04AddingBookToValidIdCartWorksAsIntended

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:24:36'!
test05AddingMultipleOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !

!methodRemoval: InterfaceTest #test05 stamp: 'AF 11/7/2021 15:24:36'!
test05

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:24:52'!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !

!methodRemoval: InterfaceTest #test05AddingMultipleOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:24:52'!
test05AddingMultipleOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:25:55'!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: validUser with: password.
	
	self assert: cartId1 ~= cartId2! !

!methodRemoval: InterfaceTest #test06 stamp: 'AF 11/7/2021 15:25:55'!
test06

	| interface validUser password cartId1 cartId2 |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: validUser with: password.
	
	self assert: cartId1 ~= cartId2!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:26:10' prior: 50919747!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:26:34' prior: 50919779!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:26:35'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:26:35'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:29:34'!
test07

	| interface validUser password cartId1 cartId2 anotherValidUser book|
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	book := testObjectsFactory itemSellByTheStore .
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:33:05' prior: 50919842!
test07

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	book := testObjectsFactory itemSellByTheStore .
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:34:15' prior: 50919863!
test07

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !

!testRun: #InterfaceTest #test07 stamp: 'AF 11/7/2021 15:34:15'!
FAILURE!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/7/2021 15:34:58'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:34:58' prior: 50919360!
add: anAmount of: aBook to: aCartId

	activeCarts isNil ifTrue: [self error: 'Invalid cart id'].
	
	^activeCarts add: anAmount of: aBook.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:34:58' prior: 50919255!
listCart: aCartId 
	
	^activeCarts contents.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:34:58' prior: 50919579!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	activeCarts := Cart acceptingItemsOf: catalog.
	
	cartId := nextId .
	nextId := cartId + 1.
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:35:45' prior: 50919936!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	cartId := nextId .
	nextId := cartId + 1.
	
	activeCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.! !

----SNAPSHOT----(7 November 2021 15:36:03) CuisUniversity-4913.image priorSource: 18794674!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:42:02' prior: 50919948!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: 'Invalid credentials'].
	
	cartId := nextId .
	nextId := cartId + 1.
	
	activeCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:42:25' prior: 50919541!
authenticatingWith: anAuthenticator andCatalog: aCatalog   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	
	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:42:27'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:42:27'!
FAILURE!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:42:27'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:42:27'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:42:27'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:42:27'!
PASSED!

!testRun: #InterfaceTest #test07 stamp: 'AF 11/7/2021 15:42:27'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:42:30'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:43:13' prior: 50919931!
listCart: aCartId 
	
	^(activeCarts at: aCartId) contents.! !

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:43:15'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:43:17'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:43:17'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:43:17'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:43:17'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:43:17'!
ERROR!

!testRun: #InterfaceTest #test07 stamp: 'AF 11/7/2021 15:43:17'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:43:17'!
FAILURE!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:43:20'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:44:13' prior: 50919923!
add: anAmount of: aBook to: aCartId

	activeCarts isNil ifTrue: [self error: 'Invalid cart id'].
	
	^(activeCarts at: aCartId) add: anAmount of: aBook.! !

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:44:14'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:45:19' prior: 50920050!
add: anAmount of: aBook to: aCartId

	
	^(activeCarts at: aCartId ifAbsent:[self error: 'Invalid cart id']) add: anAmount of: aBook.! !

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:45:20'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:45:22'!
PASSED!

!testRun: #InterfaceTest #test07 stamp: 'AF 11/7/2021 15:45:22'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:46:34'!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !

!methodRemoval: InterfaceTest #test07 stamp: 'AF 11/7/2021 15:46:34'!
test07

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:50:18'!
test08

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: 'Invalid cart id' ! !

!testRun: #InterfaceTest #test08 stamp: 'AF 11/7/2021 15:50:40'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:51:15' prior: 50920013!
listCart: aCartId 
	
	^(activeCarts at: aCartId ifAbsent: [self error: 'Invalid cart id']) contents.! !

!testRun: #InterfaceTest #test08 stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test08 stamp: 'AF 11/7/2021 15:51:16'!
PASSED!

!testRun: #InterfaceTest #test08 stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/7/2021 15:51:18'!
PASSED!

!testRun: #InterfaceTest #test08 stamp: 'AF 11/7/2021 15:51:18'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 15:51:59'!
test08ListingInvalidCartIdThrowsError

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: 'Invalid cart id' ! !

!methodRemoval: InterfaceTest #test08 stamp: 'AF 11/7/2021 15:51:59'!
test08

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: 'Invalid cart id' !

----SNAPSHOT----(7 November 2021 15:52:05) CuisUniversity-4913.image priorSource: 18825876!

----SNAPSHOT----(7 November 2021 15:52:15) CuisUniversity-4913.image priorSource: 18835053!

----STARTUP---- (7 November 2021 16:00:36) as /home/usuario/Downloads/UBA/INGE I/Cuis/linux64/CuisUniversity-4913.image!


----End fileIn of /home/usuario/Downloads/UBA/INGE I/Cuis/linux64/TusLibros.st----!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/7/2021 16:01:09'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/7/2021 16:01:12'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/7/2021 16:01:12'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/7/2021 16:01:12'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/7/2021 16:01:12'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/7/2021 16:01:12'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/7/2021 16:01:12'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/7/2021 16:01:12'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/7/2021 16:01:12'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:13:18' prior: 50915153!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard ]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:15:10'!
test09

	| interface cartId book creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard ]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/7/2021 14:56:44' prior: 50915665!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/7/2021 16:15:30'!
PASSED!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:15:30'!
FAILURE!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:15:30'!
FAILURE!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:16:07'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:16:40'!
checkOutCartWith: aSmallInteger creditCard: aCreditCard 
	self shouldBeImplemented.! !

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:18:26'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:19:23' prior: 50915799!
checkOutCartWith: aCartId creditCard: aCreditCard 
	activeCarts at: aCartId ifAbsent:[^'Invalid cart id'].! !

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:19:26'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:20:20' prior: 50915808!
checkOutCartWith: aCartId creditCard: aCreditCard 
	activeCarts at: aCartId ifAbsent:[^self error: 'Invalid cart id'].! !

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:20:22'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:29:49'!
test10

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard .
	
	self assert: (aSalesBook first total = testObjectsFactory itemSellByTheStorePrice)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:30:50' prior: 50915905!
test10

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard .
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:30:51'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:34:10' prior: 50915817!
checkOutCartWith: aCartId creditCard: aCreditCard 
	
	|cart|
	cart := activeCarts at: aCartId ifAbsent:[^self error: 'Invalid cart id'].
	
	Cashier toCheckout: cart charging: aCreditCard throught: 'nomejodas' on: 'hoy'  registeringOn: 'nose'  
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:35:36' prior: 50915494!
authenticatingWith: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	
	
	
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor 

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	
	
	
	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor    
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915203!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915167!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915926!
test10

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard .
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915248!
test08ListingInvalidCartIdThrowsError

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: 'Invalid cart id' ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915698!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915529!
authenticatingWith: anAuthenticator andCatalog: aCatalog   
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915682!
test09

	| interface cartId book creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard ]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915136!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915121!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915185!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915222!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:36:39' prior: 50915979!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor    
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor.! !

!methodRemoval: Interface #authenticatingWith:andCatalog: stamp: 'Chiro 11/7/2021 16:36:39'!
authenticatingWith: anAuthenticator andCatalog: aCatalog

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	
	
	
	!

!methodRemoval: Interface class #authenticatingWith:andCatalog: stamp: 'Chiro 11/7/2021 16:36:39'!
authenticatingWith: anAuthenticator andCatalog: aCatalog   
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor.!

Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog nextId merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'Chiro 11/7/2021 16:37:30'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog nextId merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:37:43' prior: 50915969!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor 

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor 
	
	
	
	
	
	
	! !

Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog nextId merchantProcessor saleBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'Chiro 11/7/2021 16:37:57'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog nextId merchantProcessor saleBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:38:43' prior: 50916231!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor 

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	
	
	
	
	
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:39:58' prior: 50915949!
checkOutCartWith: aCartId creditCard: aCreditCard 
	
	|cart|
	cart := activeCarts at: aCartId ifAbsent:[^self error: 'Invalid cart id'].
	
	Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: 'hoy'  registeringOn: saleBook  
	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor onDate: aDate     
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor onDate: aDate  

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	
	
	
	
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916141!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor onDate: string .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916088!
test09

	| interface cartId book creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor onDate: string .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard ]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916105!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor onDate: string .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916124!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor onDate: string .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916009!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor onDate: string .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50915988!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor onDate: string .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916051!
test08ListingInvalidCartIdThrowsError

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor onDate: string .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: 'Invalid cart id' ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916063!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor onDate: string .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916029!
test10

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor onDate: string .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard .
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916189!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor    
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor onDate: string.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916161!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor onDate: string .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:40:45' prior: 50916282!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor onDate: aDate     
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor onDate: string.! !

!methodRemoval: Interface class #authenticatingWith:andCatalog:andMerchantProcessor: stamp: 'Chiro 11/7/2021 16:40:45'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor    
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor onDate: string.!

!methodRemoval: Interface #authenticatingWith:andCatalog:andMerchantProcessor: stamp: 'Chiro 11/7/2021 16:40:45'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor 

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	
	
	
	
	
	!
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor      
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor onDate: string.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	
	
	
	
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916327!
test09

	| interface cartId book creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard ]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916452!
test10

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard .
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916486!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916382!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916436!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916514!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor onDate: aDate     
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor .! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916402!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916345!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916423!
test08ListingInvalidCartIdThrowsError

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: 'Invalid cart id' ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916364!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916306!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:42:31' prior: 50916549!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor      
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor .! !

!methodRemoval: Interface class #authenticatingWith:andCatalog:andMerchantProcessor:onDate: stamp: 'Chiro 11/7/2021 16:42:31'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor onDate: aDate     
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: MerchantProcessor .!

!methodRemoval: Interface #authenticatingWith:andCatalog:andMerchantProcessor:onDate: stamp: 'Chiro 11/7/2021 16:42:31'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor onDate: aDate  

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	
	
	
	
	
	!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:43:20'!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart|
	cart := activeCarts at: aCartId ifAbsent:[^self error: 'Invalid cart id'].
	
	Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: 'hoy'  registeringOn: saleBook  
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:43:20' prior: 50916589!
test10

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: string .
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:43:20' prior: 50916572!
test09

	| interface cartId book creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: MerchantProcessor .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: string ]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !

!methodRemoval: Interface #checkOutCartWith:creditCard: stamp: 'Chiro 11/7/2021 16:43:20'!
checkOutCartWith: aCartId creditCard: aCreditCard 
	
	|cart|
	cart := activeCarts at: aCartId ifAbsent:[^self error: 'Invalid cart id'].
	
	Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: 'hoy'  registeringOn: saleBook  
	!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:43:51' prior: 50916810!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart|
	cart := activeCarts at: aCartId ifAbsent:[^self error: 'Invalid cart id'].
	
	Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook  
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:44:09' prior: 50916873!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart|
	cart := activeCarts at: aCartId ifAbsent:[^self error: 'Invalid cart id'].
	
	^Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook  
	! !

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:44:15'!
ERROR!

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:44:15'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:44:51' prior: 50916822!
test10

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: '' .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:44:55' prior: 50916902!
test10

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'nil' stamp: 'Chiro 11/7/2021 16:47:17'!
debit: anAmount from: aCreditCard 

	^[] value: anAmount value: aCreditCard ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:48:42' prior: 50916947!
debit: anAmount from: aCreditCard 

	^[ :anAmount2 :aCreditCard2| ] value: anAmount value: aCreditCard ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:48:52' prior: 50916925!
test10

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:48:53'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:50:40' prior: 50916885!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart|
	cart := activeCarts at: aCartId ifAbsent:[^self error: 'Invalid cart id'].
	
	Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	^saleBook copy
	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/7/2021 16:50:47'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/7/2021 16:50:47'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/7/2021 16:50:47'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/7/2021 16:50:47'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/7/2021 16:50:47'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/7/2021 16:50:47'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/7/2021 16:50:47'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/7/2021 16:50:47'!
PASSED!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:50:47'!
PASSED!

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:50:47'!
ERROR!

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:50:47'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:51:51' prior: 50916985!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart cashier|
	cart := activeCarts at: aCartId ifAbsent:[^self error: 'Invalid cart id'].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/7/2021 16:51:54'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/7/2021 16:51:54'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/7/2021 16:51:54'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/7/2021 16:51:54'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/7/2021 16:51:54'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/7/2021 16:51:54'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/7/2021 16:51:54'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/7/2021 16:51:54'!
PASSED!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:51:54'!
PASSED!

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:51:54'!
ERROR!

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:51:54'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:52:46' prior: 50916775!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor      
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor .! !

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:52:47'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/7/2021 16:52:50'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/7/2021 16:52:50'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/7/2021 16:52:50'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/7/2021 16:52:50'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/7/2021 16:52:50'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/7/2021 16:52:50'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/7/2021 16:52:50'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/7/2021 16:52:50'!
PASSED!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:52:50'!
PASSED!

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:52:50'!
PASSED!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:53:26'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:53:47' prior: 50916845!
test09

	| interface cartId book creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/7/2021 16:53:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:53:51'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:54:12' prior: 50917172!
test09

	| interface cartId creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!

!testRun: #InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:54:13'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:54:35' prior: 50916726!
test08ListingInvalidCartIdThrowsError

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: 'Invalid cart id' ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:54:39' prior: 50916611!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:54:42' prior: 50916686!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:54:47' prior: 50916755!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:54:51' prior: 50916639!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:54:55' prior: 50916659!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:54:59' prior: 50916707!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:55:03' prior: 50916738!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: 'Invalid credentials'
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:55:31'!
test09CheckOutOfAInvalidIdCartThrowError

	| interface cartId creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	! !

!methodRemoval: InterfaceTest #test09 stamp: 'Chiro 11/7/2021 16:55:31'!
test09

	| interface cartId creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: 'Invalid cart id'
	
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/7/2021 16:55:53'!
test10CheckOutOfValidIdCartRegisterSale

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !

!methodRemoval: InterfaceTest #test10 stamp: 'Chiro 11/7/2021 16:55:53'!
test10

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	!

----SNAPSHOT----(7 November 2021 16:56:19) CuisUniversity-4913.image priorSource: 18661997!

----STARTUP---- (8 November 2021 14:35:38) as D:\001.Maca\2c2021\inge1\newqa1\CuisUniversity-4913.image!


!classRemoval: #MPTestInterface stamp: 'MK 11/8/2021 14:42:26'!
MerchantProcessorInterface subclass: #MPTestInterface
	instanceVariableNames: 'invalidCreditCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorInterface stamp: 'MK 11/8/2021 14:42:28'!
Object subclass: #MerchantProcessorInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'MK 11/8/2021 14:42:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'MK 11/8/2021 14:42:29'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog date cart creditCard merchantProcessor errorMessageMap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'MK 11/8/2021 14:42:30'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'MK 11/8/2021 14:42:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'MK 11/8/2021 14:42:31'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of D:\001.Maca\2c2021\inge1\newqa1\TusLibros.st----!
!Interface class methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:42:18'!
InvalidCredentialsErrorMessage
	^ 'Invalid credentials'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:42:28' prior: 50935098!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: Interface InvalidCredentialsErrorMessage.
! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MK 11/8/2021 15:42:29'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MK 11/8/2021 15:42:30'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'MK 11/8/2021 15:42:30'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'MK 11/8/2021 15:42:30'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'MK 11/8/2021 15:42:30'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'MK 11/8/2021 15:42:30'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'MK 11/8/2021 15:42:30'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'MK 11/8/2021 15:42:30'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'MK 11/8/2021 15:42:30'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'MK 11/8/2021 15:42:30'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'MK 11/8/2021 15:42:31'!
PASSED!
!Interface class methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:42:58'!
InvalidCartIdErrorMessage
	^ 'Invalid cart id'! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MK 11/8/2021 15:43:00'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'MK 11/8/2021 15:43:01'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'MK 11/8/2021 15:43:01'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'MK 11/8/2021 15:43:01'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'MK 11/8/2021 15:43:01'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'MK 11/8/2021 15:43:01'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'MK 11/8/2021 15:43:01'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'MK 11/8/2021 15:43:01'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'MK 11/8/2021 15:43:01'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'MK 11/8/2021 15:43:01'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:43:18' prior: 50935132!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface InvalidCartIdErrorMessage 
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:43:20' prior: 50935781!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface InvalidCartIdErrorMessage.
	
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:43:35' prior: 50935515!
add: anAmount of: aBook to: aCartId

	
	^(activeCarts at: aCartId ifAbsent:[self error: Interface InvalidCartIdErrorMessage ]) add: anAmount of: aBook.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:44:03' prior: 50935535!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart cashier|
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface InvalidCartIdErrorMessage ].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:44:50' prior: 50935548!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: Interface InvalidCredentialsErrorMessage].
	
	cartId := nextId .
	nextId := cartId + 1.
	
	activeCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MK 11/8/2021 15:44:52'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'MK 11/8/2021 15:44:53'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'MK 11/8/2021 15:44:53'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'MK 11/8/2021 15:44:53'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'MK 11/8/2021 15:44:53'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'MK 11/8/2021 15:44:53'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'MK 11/8/2021 15:44:53'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'MK 11/8/2021 15:44:53'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'MK 11/8/2021 15:44:53'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'MK 11/8/2021 15:44:53'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:45:03' prior: 50935560!
listCart: aCartId 
	
	^(activeCarts at: aCartId ifAbsent: [self error: Interface InvalidCartIdErrorMessage ]) contents.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MK 11/8/2021 15:45:05'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'MK 11/8/2021 15:45:05'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'MK 11/8/2021 15:45:05'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'MK 11/8/2021 15:45:05'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'MK 11/8/2021 15:45:06'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'MK 11/8/2021 15:45:06'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'MK 11/8/2021 15:45:06'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'MK 11/8/2021 15:45:06'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'MK 11/8/2021 15:45:06'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'MK 11/8/2021 15:45:06'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:45:28' prior: 50935232!
test08ListingInvalidCartIdThrowsError

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: Interface InvalidCartIdErrorMessage ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:45:44' prior: 50935244!
test09CheckOutOfAInvalidIdCartThrowError

	| interface cartId creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface InvalidCartIdErrorMessage
	
	! !

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'MK 11/8/2021 15:45:49'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MK 11/8/2021 15:45:52'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'MK 11/8/2021 15:45:52'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'MK 11/8/2021 15:45:52'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'MK 11/8/2021 15:45:52'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'MK 11/8/2021 15:45:52'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'MK 11/8/2021 15:45:52'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'MK 11/8/2021 15:45:52'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'MK 11/8/2021 15:45:53'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'MK 11/8/2021 15:45:53'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'MK 11/8/2021 15:45:53'!
PASSED!
!Interface class methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:46:03'!
invalidCartIdErrorMessage
	^ 'Invalid cart id'! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:46:04' prior: 50935941!
test09CheckOutOfAInvalidIdCartThrowError

	| interface cartId creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:46:04' prior: 50935797!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage.
	
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:46:04' prior: 50935821!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart cashier|
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:46:04' prior: 50935813!
add: anAmount of: aBook to: aCartId

	
	^(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:46:04' prior: 50935928!
test08ListingInvalidCartIdThrowsError

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage ! !
!Interface methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:46:04' prior: 50935884!
listCart: aCartId 
	
	^(activeCarts at: aCartId ifAbsent: [self error: Interface invalidCartIdErrorMessage ]) contents.! !

!methodRemoval: Interface class #InvalidCartIdErrorMessage stamp: 'MK 11/8/2021 15:46:04'!
InvalidCartIdErrorMessage
	^ 'Invalid cart id'!
!Interface class methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:46:12'!
invalidCredentialsErrorMessage
	^ 'Invalid credentials'! !
!Interface methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:46:12' prior: 50935835!
createCartFor: aUser with: aPassword

	| cartId |
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: Interface invalidCredentialsErrorMessage].
	
	cartId := nextId .
	nextId := cartId + 1.
	
	activeCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'MK 11/8/2021 15:46:12' prior: 50935683!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: Interface invalidCredentialsErrorMessage.
! !

!methodRemoval: Interface class #InvalidCredentialsErrorMessage stamp: 'MK 11/8/2021 15:46:12'!
InvalidCredentialsErrorMessage
	^ 'Invalid credentials'!

----SNAPSHOT----(8 November 2021 15:46:20) CuisUniversity-4913.image priorSource: 19299652!

----STARTUP---- (9 November 2021 23:24:07) as /home/usuario/Downloads/UBA/INGE I/Cuis/linux64/CuisUniversity-4913.image!


----End fileIn of /home/usuario/Downloads/UBA/INGE I/Cuis/linux64/TusLibros.st----!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:26:54'!
test11

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	
	interface increaseMinuteBy: 31.
	
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:27:58' prior: 50915721!
test11

	|creditCard interface cartId book |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	
	interface increaseMinuteBy: 31.

	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface ExpiredCartErrorMessage
	! !

Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'Chiro 11/10/2021 00:28:35'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock class methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:33:06'!
initialTime: aTime! !
!Clock class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:33:41' prior: 50915777!
initialTime: aTime
	^self basicNew initialTime: aTime.! !

!classDefinition: #Clock category: 'TusLibros' stamp: 'Chiro 11/10/2021 00:34:01'!
Object subclass: #Clock
	instanceVariableNames: 'initialTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:33:57'!
initialTime: aTime
	initialTime := aTime! !
!Clock methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:36:15'!
currentTime
	^DateAndTime now! !

!classDefinition: #Clock category: 'TusLibros' stamp: 'Chiro 11/10/2021 00:37:11'!
Object subclass: #Clock
	instanceVariableNames: 'initialTime timeAdded'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:37:09'!
addTime: aTime
	timeAdded := aTime! !
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:37:31' prior: 50915796!
currentTime
	^DateAndTime now + timeAdded! !

Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog clock nextId merchantProcessor saleBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Interface category: 'TusLibros' stamp: 'Chiro 11/10/2021 00:38:07'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog clock nextId merchantProcessor saleBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'Chiro 11/10/2021 00:38:58'!
Object subclass: #Clock
	instanceVariableNames: 'initialTime timeAdded lastTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:38:57'!
setTime: aTime
	lastTime := aTime! !
!Clock class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:39:09' prior: 50915781!
initialTime: aTime
	^self basicNew setTime: aTime.! !

Object subclass: #Clock
	instanceVariableNames: 'timeAdded lastTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'Chiro 11/10/2021 00:39:21'!
Object subclass: #Clock
	instanceVariableNames: 'timeAdded lastTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: Clock #initialTime: stamp: 'Chiro 11/10/2021 00:39:26'!
initialTime: aTime
	initialTime := aTime!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:40:34' prior: 50915553!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	clock := Clock initialTime: DateAndTime new.
	
	
	
	
	
	
	! !
!Clock methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:41:55'!
getTime
	^lastTime! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:44:19' prior: 50915545!
add: anAmount of: aBook to: aCartId

	((clock currentTime - clock getTime) > (Duration minutes: 30)) ifTrue: [^self error: self cannotUseAnExpiredCart].
	clock setTime: DateAndTime new.
	
	
	^(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.! !
!Interface methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:45:08'!
checkExpiredTimeAndRefresh
	((clock currentTime - clock getTime) > (Duration minutes: 30)) ifTrue: [^self error: self cannotUseAnExpiredCart].
	clock setTime: DateAndTime new.! !
!Interface class methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:45:48'!
cannotUseAnExpiredCart
	^'This cart has expired'! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:46:53' prior: 50915566!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart cashier|
	self checkExpiredTimeAndRefresh.
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:47:01' prior: 50915580!
createCartFor: aUser with: aPassword

	| cartId |
	self checkExpiredTimeAndRefresh.
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: Interface invalidCredentialsErrorMessage].
	
	cartId := nextId .
	nextId := cartId + 1.
	
	activeCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:47:06' prior: 50915592!
listCart: aCartId 
	
	self checkExpiredTimeAndRefresh.
	^(activeCarts at: aCartId ifAbsent: [self error: Interface invalidCartIdErrorMessage ]) contents.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:47:24' prior: 50915881!
add: anAmount of: aBook to: aCartId

	self checkExpiredTimeAndRefresh.
	^(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.! !
!Interface methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:48:27'!
invalidCartIdErrorMessage
	^ 'Invalid cart id'! !

!methodRemoval: Interface #invalidCartIdErrorMessage stamp: 'Chiro 11/10/2021 00:48:42'!
invalidCartIdErrorMessage
	^ 'Invalid cart id'!
!Interface methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:49:23'!
cannotUseAnExpiredCart
	^'This cart has expired'! !
!Interface methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:50:57'!
increaseMinuteBy: aTime
	clock addTime: aTime.! !
!Interface class methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:51:36'!
ExpiredCartErrorMessage
	^'Cannot use an expired cart'! !
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:54:17' prior: 50915811!
currentTime
	^DateAndTime new + timeAdded! !
!Clock class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:55:41' prior: 50915843!
initialTime: aTime
	^self basicNew initialTime: aTime.! !
!Clock methodsFor: 'nil' stamp: 'Chiro 11/10/2021 00:56:03'!
initialTime: aTime! !
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:56:41' prior: 50915981!
initialTime: aTime
	| addedTime |
	lastTime := aTime.
	addedTime := 0! !
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:57:21' prior: 50915985!
initialTime: aTime

	lastTime := aTime.
	timeAdded := 0! !
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 00:59:06' prior: 50915991!
initialTime: aTime

	lastTime := aTime.
	timeAdded := Duration minutes: 0! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 01:00:06' prior: 50915963!
increaseMinuteBy: aTime
	clock addTime: (Duration minutes: aTime).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/10/2021 01:00:07'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/10/2021 01:00:07'!
FAILURE!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/10/2021 01:00:07'!
FAILURE!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/10/2021 01:00:56'!
FAILURE!

!methodRemoval: Interface class #cannotUseAnExpiredCart stamp: 'Chiro 11/10/2021 01:01:55'!
cannotUseAnExpiredCart
	^'This cart has expired'!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 01:02:04' prior: 50915959!
cannotUseAnExpiredCart
	^'Cannot use an expired cart'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/10/2021 01:02:05'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 01:15:54'!
test12

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	aSalesBook := interface listPurchases: cartId.
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !

!testRun: #InterfaceTest #test12 stamp: 'Chiro 11/10/2021 01:15:58'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 01:16:13'!
listPurchases: aSmallInteger 
	self shouldBeImplemented.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 01:16:37' prior: 50916222!
listPurchases: aSmallInteger 
	^saleBook first! !

!testRun: #InterfaceTest #test12 stamp: 'Chiro 11/10/2021 01:16:40'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/10/2021 01:17:01' prior: 50916227!
listPurchases: aCartId
	 
	^saleBook first! !

!methodRemoval: Interface #listPurchases: stamp: 'Chiro 11/10/2021 01:17:56'!
listPurchases: aCartId
	 
	^saleBook first!

----STARTUP---- (11 November 2021 00:31:26) as /home/usuario/Downloads/UBA/INGE I/Cuis/linux64/CuisUniversity-4913.image!


----End fileIn of /home/usuario/Downloads/UBA/INGE I/Cuis/linux64/TusLibros.st----!

Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'Chiro 11/11/2021 00:32:19'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'Chiro 11/11/2021 00:32:49'!
Object subclass: #Clock
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'no messages' stamp: 'Chiro 11/11/2021 00:32:47'!
setTime: aTime
	time := aTime! !
!Clock methodsFor: 'nil' stamp: 'Chiro 11/11/2021 00:33:29'!
giveTime
	^time.! !

!classDefinition: #Clock category: 'TusLibros' stamp: 'Chiro 11/11/2021 00:33:55'!
Object subclass: #Clock
	instanceVariableNames: 'time addedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'nil' stamp: 'Chiro 11/11/2021 00:33:54'!
currentTime
	^DateAndTime new + addedTime.! !
!Clock methodsFor: 'nil' stamp: 'Chiro 11/11/2021 00:34:17'!
addTime: aTime
	addedTime := aTime! !
!Clock class methodsFor: 'nil' stamp: 'Chiro 11/11/2021 00:35:08'!
initialTime: aTime 
	
	^self new setTime: aTime! !
!Clock methodsFor: 'nil' stamp: 'Chiro 11/11/2021 00:37:08'!
expirationTime
	^(self currentTime) - time > 30! !

!classDefinition: #Interface category: 'TusLibros' stamp: 'Chiro 11/11/2021 00:37:45'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog nextId merchantProcessor saleBook clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:37:43' prior: 50915553!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	clock := Clock initialTime:  DateAndTime new.
	
	
	
	
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:37:50' prior: 50915777!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	clock := Clock initialTime: DateAndTime new.
	
	
	
	
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:39:18' prior: 50915545!
add: anAmount of: aBook to: aCartId

	(clock expirationTime) ifTrue: [self error: Interface expiredCartErrorMessage].
	clock setTime: DateAndTime new.
	
	^(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:39:39'!
checkExperationTimeAndRefresh

	(clock expirationTime) ifTrue: [self error: Interface expiredCartErrorMessage].
	clock setTime: DateAndTime new! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:39:39' prior: 50915807!
add: anAmount of: aBook to: aCartId

	self checkExperationTimeAndRefresh.
	
	^(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.! !
!Interface class methodsFor: 'nil' stamp: 'Chiro 11/11/2021 00:40:17'!
expiredCartErrorMessage
	^'Cannot use an expired cart'! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:40:49' prior: 50915566!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart cashier|
	
	self checkExperationTimeAndRefresh.
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:40:56' prior: 50915580!
createCartFor: aUser with: aPassword

	| cartId |
	self checkExperationTimeAndRefresh.
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: Interface invalidCredentialsErrorMessage].
	
	cartId := nextId .
	nextId := cartId + 1.
	
	activeCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:41:01' prior: 50915592!
listCart: aCartId 
	
	self checkExperationTimeAndRefresh.
	^(activeCarts at: aCartId ifAbsent: [self error: Interface invalidCartIdErrorMessage ]) contents.! !
!Interface methodsFor: 'nil' stamp: 'Chiro 11/11/2021 00:42:13'!
addMinuteBy: aMinute
	clock addTime: (Duration minutes: aMinute)! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:42:37'!
test11

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	interface addMinuteBy: 31.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:43:12' prior: 50915882!
test11

	|creditCard interface cartId book |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	interface addMinuteBy: 31.
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:44:37'!
initialize: aTime
	time := aTime.
	addedTime := Duration minutes: 0! !
!Clock class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:44:46' prior: 50915759!
initialTime: aTime 
	
	^self new initialize: aTime! !
!Clock class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:45:16' prior: 50915934!
initialTime: aTime 
	
	^self new initialize: aTime.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 00:45:17'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 00:45:17'!
FAILURE!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 00:45:17'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 00:45:17'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 00:45:17'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 00:45:17'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 00:45:17'!
ERROR!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 00:45:17'!
ERROR!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 00:45:17'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 00:45:17'!
FAILURE!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 00:45:17'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 00:45:17'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 00:46:44'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 00:46:44'!
ERROR!
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:47:20' prior: 50915763!
expirationTime
	^(self currentTime) - time > Duration minutes: 30! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 00:47:21'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 00:47:21'!
FAILURE!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 00:47:21'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 00:47:21'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 00:47:21'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 00:47:21'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 00:47:21'!
ERROR!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 00:47:21'!
ERROR!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 00:47:21'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 00:47:21'!
FAILURE!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 00:47:21'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 00:47:21'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 00:47:25'!
ERROR!
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:47:49' prior: 50916036!
expirationTime
	^((self currentTime) - time) > Duration minutes: 30! !

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 00:47:50'!
ERROR!
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 00:48:03' prior: 50916131!
expirationTime
	^((self currentTime) - time) > (Duration minutes: 30)! !

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 00:48:05'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 00:48:09'!
PASSED!

----SNAPSHOT----(11 November 2021 00:49:44) CuisUniversity-4913.image priorSource: 18661997!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:20:40' prior: 50915906!
test11

	|creditCard interface cartId book |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	interface addMinuteBy: 30.
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:20:41'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:21:01' prior: 50916237!
test11

	|creditCard interface cartId book |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	interface addMinuteBy: 31.
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:21:02'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:21:06' prior: 50916262!
test11

	|creditCard interface cartId book |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	interface addMinuteBy: 30.
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'Chiro 11/11/2021 08:26:58'!
falseClock
	Clock initialTime: DateAndTime new.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:27:41' prior: 50916374!
test11

	|creditCard interface cartId book |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: (testObjectsFactory falseClock).
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	interface addMinuteBy: 30.
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: aClock       
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor .! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: aClock    

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	clock := Clock initialTime: DateAndTime new.
	
	
	
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915291!
test10CheckOutOfValidIdCartRegisterSale

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andAClock: Clock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915235!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andAClock: Clock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915127!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andAClock: Clock .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: Interface invalidCredentialsErrorMessage.
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915274!
test09CheckOutOfAInvalidIdCartThrowError

	| interface cartId creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andAClock: Clock .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915144!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andAClock: Clock .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915607!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor      
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: Clock .! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915262!
test08ListingInvalidCartIdThrowsError

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andAClock: Clock .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915162!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andAClock: Clock .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage.
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915177!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andAClock: Clock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915215!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andAClock: Clock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50915196!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andAClock: Clock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:14' prior: 50916425!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: aClock       
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: Clock .! !

!methodRemoval: Interface class #authenticatingWith:andCatalog:andMerchantProcessor: stamp: 'Chiro 11/11/2021 08:28:14'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor      
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: Clock .!

!methodRemoval: Interface #authenticatingWith:andCatalog:andMerchantProcessor: stamp: 'Chiro 11/11/2021 08:28:14'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor   

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	clock := Clock initialTime: DateAndTime new.
	
	
	
	
	!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:22' prior: 50916436!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: aClock    

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	clock := aClock.
	
	
	
	
	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andClock: aClock       
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: Clock .! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andClock: aClock    

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	clock := aClock.
	
	
	
	
	! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916660!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: aClock       
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andClock: Clock .! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916599!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: Clock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916640!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: Clock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916583!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: Clock .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage.
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916540!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: Clock .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916522!
test09CheckOutOfAInvalidIdCartThrowError

	| interface cartId creditCard |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: Clock .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916451!
test10CheckOutOfValidIdCartRegisterSale

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: Clock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916476!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: Clock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916570!
test08ListingInvalidCartIdThrowsError

	| interface |
	
	self setUp.
	
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: Clock .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916504!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: Clock .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: Interface invalidCredentialsErrorMessage.
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916619!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: Clock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:28:45' prior: 50916712!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andClock: aClock       
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andClock: Clock .! !

!methodRemoval: Interface class #authenticatingWith:andCatalog:andMerchantProcessor:andAClock: stamp: 'Chiro 11/11/2021 08:28:45'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: aClock       
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andClock: Clock .!

!methodRemoval: Interface #authenticatingWith:andCatalog:andMerchantProcessor:andAClock: stamp: 'Chiro 11/11/2021 08:28:45'!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andAClock: aClock    

	authenticator := anAuthenticator .
	
	catalog := aCatalog .
	
	activeCarts := Dictionary new.
	
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	
	saleBook := OrderedCollection new.
	
	clock := aClock.
	
	
	
	
	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:29:48' prior: 50916401!
test11

	|creditCard interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	falseClock addTime: 31.
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:29:49'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:30:19' prior: 50916396!
falseClock
	^Clock initialTime: DateAndTime new.! !

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:30:24'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:30:40'!
ERROR!
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:31:03' prior: 50915755!
addTime: aTime
	addedTime := Duration minutes: aTime! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:31:24' prior: 50916987!
test11

	|creditCard interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 31).
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:31:25'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:35:01'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:35:27'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:35:27'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:37:09' prior: 50917015!
falseClock
	^Clock initialTime: DateAndTime now.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:37:22' prior: 50915818!
checkExperationTimeAndRefresh

	(clock expirationTime) ifTrue: [self error: Interface expiredCartErrorMessage].
	clock setTime: DateAndTime now! !

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:37:34'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:37:34'!
ERROR!
!Clock class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:38:10' prior: 50915939!
initialTime: aTime 
	
	^self basicNew initialize: aTime.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 08:38:13'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 08:38:13'!
FAILURE!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 08:38:13'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 08:38:13'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 08:38:13'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 08:38:13'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 08:38:13'!
ERROR!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 08:38:13'!
ERROR!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 08:38:13'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 08:38:13'!
FAILURE!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 08:38:13'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:38:13'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:38:17'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:39:48'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:39:48'!
ERROR!
!Interface class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:40:29' prior: 50916948!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andClock: aClock       
	
	^self basicNew authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andClock: aClock .! !

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:40:34'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:40:34'!
ERROR!
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:40:51' prior: 50917025!
addTime: aTime
	addedTime := aTime! !

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:40:52'!
FAILURE!
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:42:41' prior: 50915751!
currentTime
	^DateAndTime now + addedTime.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 08:42:42'!
FAILURE!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 08:42:42'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 08:42:42'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 08:42:42'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 08:42:42'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 08:42:42'!
ERROR!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 08:42:42'!
ERROR!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 08:42:42'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 08:42:42'!
FAILURE!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 08:42:42'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:42:42'!
PASSED!
!Clock class methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:43:46'!
initialTime 
	
	^self basicNew initialize.! !

!methodRemoval: Clock class #initialTime: stamp: 'Chiro 11/11/2021 08:43:50'!
initialTime: aTime 
	
	^self basicNew initialize: aTime.!
!Clock methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:44:11' overrides: 16896425!
initialize
	time := DateAndTime now.
	addedTime := Duration minutes: 0! !

!methodRemoval: Clock #initialize: stamp: 'Chiro 11/11/2021 08:44:13'!
initialize: aTime
	time := aTime.
	addedTime := Duration minutes: 0!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 08:44:15'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 08:44:15'!
FAILURE!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 08:44:15'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 08:44:15'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 08:44:15'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 08:44:15'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 08:44:15'!
ERROR!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 08:44:15'!
ERROR!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 08:44:15'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 08:44:15'!
FAILURE!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 08:44:15'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:44:15'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:44:18'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:44:39' prior: 50917066!
falseClock
	^Clock initialTime.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 08:44:40'!
FAILURE!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 08:44:40'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 08:44:40'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 08:44:40'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 08:44:40'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 08:44:40'!
ERROR!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 08:44:40'!
ERROR!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 08:44:40'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 08:44:40'!
FAILURE!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 08:44:40'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:44:40'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 08:44:49'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 08:45:07'!
FAILURE!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 08:45:07'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 08:45:07'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 08:45:07'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 08:45:07'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 08:45:07'!
ERROR!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 08:45:07'!
ERROR!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 08:45:07'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 08:45:07'!
FAILURE!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 08:45:07'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:45:07'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 08:45:11'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:46:26'!
trueClock
	^Clock initialTime.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:46:48' prior: 50916843!
test10CheckOutOfValidIdCartRegisterSale

	|creditCard interface cartId book aSalesBook |
	
	self setUp.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: testObjectsFactory falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:47:15' prior: 50917596!
test10CheckOutOfValidIdCartRegisterSale

	|creditCard interface cartId book aSalesBook trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory falseClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: testObjectsFactory trueClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:47:39' prior: 50916825!
test09CheckOutOfAInvalidIdCartThrowError

	| interface cartId creditCard trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory falseClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:47:58' prior: 50916896!
test08ListingInvalidCartIdThrowsError

	| interface trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory falseClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:48:07' prior: 50916868!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents trueClock |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	trueClock := testObjectsFactory falseClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:48:31' prior: 50916927!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser trueClock |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	trueClock := testObjectsFactory falseClock.
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:48:42' prior: 50916770!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory falseClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:48:52' prior: 50916750!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory falseClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:49:02' prior: 50916790!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory falseClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage.
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:49:11' prior: 50916806!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents trueClock |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:49:24' prior: 50917798!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents trueClock |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	trueClock := testObjectsFactory falseClock.
	shouldAuthenticate := true.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:49:32' prior: 50916909!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password trueClock |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	trueClock := testObjectsFactory falseClock.
	shouldAuthenticate := false.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: Interface invalidCredentialsErrorMessage.
! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'Chiro 11/11/2021 08:49:34'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:50:04'!
checkExpirationTimeAndRefresh

	(clock expirationTime) ifTrue: [self error: Interface expiredCartErrorMessage].
	clock setTime: DateAndTime now! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:50:04' prior: 50915840!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart cashier|
	
	self checkExpirationTimeAndRefresh.
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:50:04' prior: 50915826!
add: anAmount of: aBook to: aCartId

	self checkExpirationTimeAndRefresh.
	
	^(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:50:04' prior: 50915869!
listCart: aCartId 
	
	self checkExpirationTimeAndRefresh.
	^(activeCarts at: aCartId ifAbsent: [self error: Interface invalidCartIdErrorMessage ]) contents.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 08:50:04' prior: 50915855!
createCartFor: aUser with: aPassword

	| cartId |
	self checkExpirationTimeAndRefresh.
	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: Interface invalidCredentialsErrorMessage].
	
	cartId := nextId .
	nextId := cartId + 1.
	
	activeCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	
	^cartId.! !

!methodRemoval: Interface #checkExperationTimeAndRefresh stamp: 'Chiro 11/11/2021 08:50:04'!
checkExperationTimeAndRefresh

	(clock expirationTime) ifTrue: [self error: Interface expiredCartErrorMessage].
	clock setTime: DateAndTime now!

!methodRemoval: Interface #addMinuteBy: stamp: 'Chiro 11/11/2021 08:50:58'!
addMinuteBy: aMinute
	clock addTime: (Duration minutes: aMinute)!

----SNAPSHOT----(11 November 2021 08:52:06) CuisUniversity-4913.image priorSource: 18706638!

----STARTUP---- (11 November 2021 08:54:07) as C:\Users\ferra\Desktop\CUIS SmallTalk\windows64\CuisUniversity-4913.image!


----SNAPSHOT----(11 November 2021 08:54:13) CuisUniversity-4913.image priorSource: 18661997!

----End fileIn of D:\Apuntes\Inge 1\Repos\Repo de entregas\20-TusLibros\Iteracion-3\TusLibros.st----!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:06'!
createInterface: trueClock

	^ Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:06' prior: 50915712!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents trueClock |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	trueClock := testObjectsFactory falseClock.
	shouldAuthenticate := true.
	interface := self createInterface: trueClock .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:06' prior: 50915733!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory falseClock.
	interface := self createInterface: trueClock .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage.
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:06' prior: 50915848!
test08ListingInvalidCartIdThrowsError

	| interface trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory falseClock.
	interface := self createInterface: trueClock .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:06' prior: 50915692!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password trueClock |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	trueClock := testObjectsFactory falseClock.
	shouldAuthenticate := false.
	interface := self createInterface: trueClock .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: Interface invalidCredentialsErrorMessage.
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:06' prior: 50915751!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory falseClock.
	interface := self createInterface: trueClock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:06' prior: 50915863!
test09CheckOutOfAInvalidIdCartThrowError

	| interface cartId creditCard trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory falseClock.
	interface := self createInterface: trueClock .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:07' prior: 50915818!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents trueClock |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	trueClock := testObjectsFactory falseClock.
	interface := self createInterface: trueClock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:07' prior: 50915795!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser trueClock |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	trueClock := testObjectsFactory falseClock.
	shouldAuthenticate := true.
	interface := self createInterface: trueClock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:07' prior: 50915773!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory falseClock.
	interface := self createInterface: trueClock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:57:53' prior: 50916427!
createInterface: aClock

	^ Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: aClock! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:58:13' prior: 50916483!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password falseClock |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	falseClock := testObjectsFactory falseClock.
	shouldAuthenticate := false.
	interface := self createInterface: falseClock .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: Interface invalidCredentialsErrorMessage.
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:58:33' prior: 50916616!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password trueClock |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	trueClock := testObjectsFactory falseClock.
	shouldAuthenticate := false.
	interface := self createInterface: trueClock .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: Interface invalidCredentialsErrorMessage.
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:58:40' prior: 50916634!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password trueClock |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	trueClock := testObjectsFactory trueClock.
	shouldAuthenticate := false.
	interface := self createInterface: trueClock .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: Interface invalidCredentialsErrorMessage.
! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 08:58:41'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 08:58:41'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:58:52' prior: 50916435!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents trueClock |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	trueClock := testObjectsFactory trueClock.
	shouldAuthenticate := true.
	interface := self createInterface: trueClock .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 08:58:53'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 08:58:53'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:59:00' prior: 50916454!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory trueClock.
	interface := self createInterface: trueClock .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage.
	
	! !

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 08:59:01'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 08:59:01'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:59:08' prior: 50916501!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterface: trueClock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 08:59:08'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 08:59:08'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 08:59:08'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 08:59:08'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 08:59:08'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 08:59:08'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 08:59:08'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 08:59:09'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 08:59:09'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 08:59:09'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 08:59:09'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 08:59:09'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:59:15' prior: 50916588!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterface: trueClock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 08:59:16'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 08:59:16'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:59:22' prior: 50916567!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser trueClock |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	trueClock := testObjectsFactory trueClock.
	shouldAuthenticate := true.
	interface := self createInterface: trueClock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 08:59:23'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 08:59:23'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:59:29' prior: 50916539!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents trueClock |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterface: trueClock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 08:59:30'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 08:59:30'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:59:37' prior: 50916470!
test08ListingInvalidCartIdThrowsError

	| interface trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory trueClock.
	interface := self createInterface: trueClock .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage ! !

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 08:59:38'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 08:59:38'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:59:46' prior: 50916521!
test09CheckOutOfAInvalidIdCartThrowError

	| interface cartId creditCard trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory trueClock.
	interface := self createInterface: trueClock .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage
	
	! !

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 08:59:46'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 08:59:46'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 08:59:58' prior: 50915883!
test10CheckOutOfValidIdCartRegisterSale

	|creditCard interface cartId book aSalesBook trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: testObjectsFactory trueClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:00:07'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:00:07'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:00:14' prior: 50917204!
test10CheckOutOfValidIdCartRegisterSale

	|creditCard interface cartId book aSalesBook trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: trueClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:00:14'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:00:14'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:00:14'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:00:14'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:00:14'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:00:14'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:00:14'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:00:14'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:00:14'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:00:14'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:00:15'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:00:15'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:00:24' prior: 50915910!
test11

	|creditCard interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:00:24'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:00:29'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:00:29'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:24' prior: 50917343!
test11

	|creditCard interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterface: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:35'!
createInterfaceWithClock: aClock

	^ Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: aClock! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:36' prior: 50916652!
test01CannotCreateCartWithInvalidCredentials

	| interface invalidUser password trueClock |
	
	self setUp.
	
	invalidUser := 'notValid'.
	password := 'password'.
	
	trueClock := testObjectsFactory trueClock.
	shouldAuthenticate := false.
	interface := self createInterfaceWithClock: trueClock .
	
	self should: [interface createCartFor: invalidUser with: password]
		raise: Error
		withMessageText: Interface invalidCredentialsErrorMessage.
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:36' prior: 50917144!
test09CheckOutOfAInvalidIdCartThrowError

	| interface cartId creditCard trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock .
	creditCard := testObjectsFactory notExpiredCreditCard.
	cartId := 1.
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:36' prior: 50916773!
test03AddingBookToInvalidIdCartThrowsError

	| interface cartId book trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock .
	
	cartId := 1.
	book := testObjectsFactory itemSellByTheStore.
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage.
	
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:36' prior: 50917019!
test07AddingABookToOneCartDoesNotAffectTheOtherCart

	| interface validUser password cartId1 cartId2 anotherValidUser book cart1Contents cart2Contents trueClock |
	
	self setUp.
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	book := testObjectsFactory itemSellByTheStore .
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	interface add: 1 of: book to: cartId1.
	
	cart1Contents := interface listCart: cartId1.
	cart2Contents := interface listCart: cartId2.	
	self assert: cart1Contents ~= cart2Contents.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:36' prior: 50916712!
test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart

	| interface validUser password cartId cartContents trueClock |
	
	self setUp.
	
	validUser := 'valid'.
	password := 'password'.
	
	trueClock := testObjectsFactory trueClock.
	shouldAuthenticate := true.
	interface := self createInterfaceWithClock: trueClock .
	
	cartId := interface createCartFor: validUser with: password.
	cartContents := interface listCart: cartId.
	
	self assert: cartContents isEmpty.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:36' prior: 50916831!
test04AddingBookToValidIdCartAddsBookToCorrespondingCart

	| interface cartId book cartContents trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: (cartContents includes: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:36' prior: 50917089!
test08ListingInvalidCartIdThrowsError

	| interface trueClock |
	
	self setUp.
	
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock .

	self should: [interface listCart: 0]
		raise: Error
		withMessageText: Interface invalidCartIdErrorMessage ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:36' prior: 50916956!
test06CreatingMoreThanOneCartAssingsDifferentIdsForEach

	| interface validUser password cartId1 cartId2 anotherValidUser trueClock |
	
	self setUp.
	
	validUser := 'valid'.
	anotherValidUser := 'valid2'.
	password := 'password'.
	
	trueClock := testObjectsFactory trueClock.
	shouldAuthenticate := true.
	interface := self createInterfaceWithClock: trueClock .
	
	cartId1 := interface createCartFor: validUser with: password.
	cartId2 := interface createCartFor: anotherValidUser with: password.
	
	self assert: cartId1 ~= cartId2! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:36' prior: 50916893!
test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount

	| interface cartId book cartContents trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock .
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 2 of: book to: cartId.
	
	cartContents := interface listCart: cartId.
	
	self assert: 2 equals: (cartContents occurrencesOf: book)
	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:36' prior: 50917452!
test11

	|creditCard interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!methodRemoval: InterfaceTest #createInterface: stamp: 'AF 11/11/2021 09:01:36'!
createInterface: aClock

	^ Interface authenticatingWith: self andCatalog: defaultCatalog andMerchantProcessor: self andClock: aClock!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:01:54' prior: 50917274!
test10CheckOutOfValidIdCartRegisterSale

	|creditCard interface cartId book aSalesBook trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first total
	! !

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:01:55'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:01:55'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:03:06' prior: 50916219!
add: anAmount of: aBook to: aCartId

	^(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:03:07'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:03:07'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:03:07'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:03:07'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:03:07'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:03:07'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:03:07'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:03:07'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:03:07'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:03:07'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:03:07'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:03:16' prior: 50916279!
listCart: aCartId

	^(activeCarts at: aCartId ifAbsent: [self error: Interface invalidCartIdErrorMessage ]) contents.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:03:16'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:03:16'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:03:16'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:03:16'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:03:16'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:03:17'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:03:17'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:03:17'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:03:17'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:03:17'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:03:17'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:03:50'!
test12

	|creditCard interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface listCart: cartId]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:03:53'!
FAILURE!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:05:13' prior: 50917847!
test12

	|interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface listCart: cartId]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:05:15'!
FAILURE!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:05:23'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:05:57' prior: 50917801!
listCart: aCartId

	self checkExpirationTimeAndRefresh.

	^(activeCarts at: aCartId ifAbsent: [self error: Interface invalidCartIdErrorMessage ]) contents.! !

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:06:08'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:06:08'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:06:08'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:06:08'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:06:08'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:06:08'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:06:13'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:06:15'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:06:15'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:06:34'!
test13

	|interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface listCart: cartId]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!methodRemoval: InterfaceTest #test12 stamp: 'AF 11/11/2021 09:06:34'!
test12

	|interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface listCart: cartId]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:06:38'!
test12

	|creditCard interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!methodRemoval: InterfaceTest #test11 stamp: 'AF 11/11/2021 09:06:38'!
test11

	|creditCard interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:07:28'!
test11

	|interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:07:30'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:07:56' prior: 50917754!
add: anAmount of: aBook to: aCartId

	self checkExpirationTimeAndRefresh.

	^(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:08:05'!
PASSED!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:08:05'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:12:38'!
test14

	|interface cartId1 cartId2 book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId1 := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId1.
	falseClock addTime: (Duration minutes: 30).
	
	cartId2 := interface createCartFor: 'user2' with: 'password2'.
	
	self should: [interface listCart: cartId1]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:12:40'!
ERROR!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:13:13'!
ERROR!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:13:24'!
ERROR!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:13:45'!
ERROR!

!classDefinition: #Interface category: 'TusLibros' stamp: 'AF 11/11/2021 09:16:59'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog nextId merchantProcessor saleBook clock cartsLastUsedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:16:59' prior: 50916265!
createCartFor: aUser with: aPassword

	| cartId |

	(authenticator authenticateUser: aUser with: aPassword) ifFalse: [self error: Interface invalidCredentialsErrorMessage].
	
	cartId := nextId .
	nextId := cartId + 1.
	
	activeCarts add: cartId -> (Cart acceptingItemsOf: catalog).
	cartsLastUsedTime add: cartId -> clock currentTime.
	
	^cartId.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:17:08'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:17:08'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:17:08'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:17:08'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:17:08'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:17:08'!
ERROR!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:17:08'!
ERROR!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:17:08'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:17:08'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:17:08'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:17:08'!
ERROR!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:17:08'!
ERROR!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:17:08'!
ERROR!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:17:08'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:17:30'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:18:31' prior: 50916228!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andClock: aClock   

	authenticator := anAuthenticator .
	catalog := aCatalog .
	activeCarts := Dictionary new.
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	saleBook := OrderedCollection new.
	clock := aClock.
	cartsLastUsedTime  := Dictionary new.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:18:32'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:18:32'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:19:06' prior: 50918130!
test14

	|interface cartId1 cartId2 book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId1 := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId1.
	falseClock addTime: (Duration minutes: 30).
	
	cartId2 := interface createCartFor: 'user2' with: 'password2'.
	
	self should: [interface listCart: cartId1]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:19:27' prior: 50918296!
test14

	|interface cartId1 book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId1 := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId1.
	falseClock addTime: (Duration minutes: 30).
	
	interface createCartFor: 'user2' with: 'password2'.
	
	self should: [interface listCart: cartId1]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:20:22'!
checkExpirationTimeAndRefresh: aCartId

	(clock expirationTime) ifTrue: [self error: Interface expiredCartErrorMessage].
	clock setTime: DateAndTime now! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:20:22' prior: 50916250!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart cashier|
	
	self checkExpirationTimeAndRefresh: aCartId.
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:20:22' prior: 50918077!
add: anAmount of: aBook to: aCartId

	self checkExpirationTimeAndRefresh: aCartId.

	^(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:20:22' prior: 50917897!
listCart: aCartId

	self checkExpirationTimeAndRefresh: aCartId.

	^(activeCarts at: aCartId ifAbsent: [self error: Interface invalidCartIdErrorMessage ]) contents.! !

!methodRemoval: Interface #checkExpirationTimeAndRefresh stamp: 'AF 11/11/2021 09:20:22'!
checkExpirationTimeAndRefresh

	(clock expirationTime) ifTrue: [self error: Interface expiredCartErrorMessage].
	clock setTime: DateAndTime now!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:21:21'!
checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId

	(clock expirationTime) ifTrue: [self error: Interface expiredCartErrorMessage].
	clock setTime: DateAndTime now! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:21:21' prior: 50918347!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  
	
	|cart cashier|
	
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:21:21' prior: 50918373!
listCart: aCartId

	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.

	^(activeCarts at: aCartId ifAbsent: [self error: Interface invalidCartIdErrorMessage ]) contents.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:21:21' prior: 50918363!
add: anAmount of: aBook to: aCartId

	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.

	^(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.! !

!methodRemoval: Interface #checkExpirationTimeAndRefresh: stamp: 'AF 11/11/2021 09:21:21'!
checkExpirationTimeAndRefresh: aCartId

	(clock expirationTime) ifTrue: [self error: Interface expiredCartErrorMessage].
	clock setTime: DateAndTime now!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:21:53' prior: 50918398!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  

	|cart cashier|
	
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:24:51' prior: 50918389!
checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId
	(Duration minutes: 30) < (clock currentTime - cartsLastUsedTime at: aCartId ) ifTrue: [self error: Interface expiredCartErrorMessage].
	

	cartsLastUsedTime at: aCartId put: clock currentTime! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:24:58' prior: 50918458!
checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId
	(Duration minutes: 30) < (clock currentTime - cartsLastUsedTime at: aCartId ) ifTrue: [self error: Interface expiredCartErrorMessage].
	

	cartsLastUsedTime at: aCartId put: clock currentTime.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:24:58'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:24:58'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:24:58'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:24:58'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:24:58'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:24:58'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:24:58'!
ERROR!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:24:58'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:24:58'!
FAILURE!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:24:58'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:24:58'!
FAILURE!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:24:58'!
ERROR!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:24:58'!
ERROR!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:24:58'!
ERROR!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:25:03'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:25:33' prior: 50918469!
checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId
	(Duration minutes: 30) < clock currentTime - (cartsLastUsedTime at: aCartId) ifTrue: [self error: Interface expiredCartErrorMessage].
	

	cartsLastUsedTime at: aCartId put: clock currentTime.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:25:33'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:25:33'!
ERROR!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:25:33'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:25:33'!
ERROR!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:25:33'!
ERROR!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:25:33'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:25:33'!
ERROR!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:25:33'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:25:33'!
FAILURE!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:25:33'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:25:33'!
FAILURE!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:25:33'!
ERROR!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:25:33'!
ERROR!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:25:33'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:25:41' prior: 50918530!
checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId
	(Duration minutes: 30) < (clock currentTime - (cartsLastUsedTime at: aCartId)) ifTrue: [self error: Interface expiredCartErrorMessage].
	

	cartsLastUsedTime at: aCartId put: clock currentTime.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:25:41'!
FAILURE!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:25:41'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:25:41'!
FAILURE!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:25:41'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:25:43'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:26:29' prior: 50918442!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  

	|cart cashier|
	
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: aDate  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:28:38' prior: 50918424!
add: anAmount of: aBook to: aCartId


	(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:28:38'!
FAILURE!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:28:38'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:28:38'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:28:46' prior: 50918664!
add: anAmount of: aBook to: aCartId

	(activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ]) add: anAmount of: aBook.
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:30:08' prior: 50918415!
listCart: aCartId

	|cart|

	cart := activeCarts at: aCartId ifAbsent: [self error: Interface invalidCartIdErrorMessage ].
	
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.
	
	^cart contents.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:30:08'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:30:08'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:30:58' prior: 50918724!
add: anAmount of: aBook to: aCartId

	|cart|
	
	cart := activeCarts at: aCartId ifAbsent:[self error: Interface invalidCartIdErrorMessage ].
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.
	
	cart add: anAmount of: aBook.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:30:59'!
PASSED!

!methodRemoval: Clock #setTime: stamp: 'AF 11/11/2021 09:32:31'!
setTime: aTime
	time := aTime!

!methodRemoval: Clock #giveTime stamp: 'AF 11/11/2021 09:32:40'!
giveTime
	^time.!

!methodRemoval: Clock #expirationTime stamp: 'AF 11/11/2021 09:33:11'!
expirationTime
	^((self currentTime) - time) > (Duration minutes: 30)!
!Clock methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:33:37' prior: 50916130!
addTime: aTimeDuration
	addedTime := aTimeDuration! !
!Clock methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:35:01' prior: 50916147 overrides: 16896425!
initialize
	addedTime := Duration minutes: 0! !

Object subclass: #Clock
	instanceVariableNames: 'addedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'AF 11/11/2021 09:35:10'!
Object subclass: #Clock
	instanceVariableNames: 'addedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #Clock as: #ClockSimulated stamp: 'AF 11/11/2021 09:35:50'!
Smalltalk renameClassNamed: #Clock as: #ClockSimulated!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:35:50' prior: 50916420!
trueClock
	^ClockSimulated initialTime.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:35:50' prior: 50916415!
falseClock
	^ClockSimulated initialTime.! !

Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'AF 11/11/2021 09:36:06'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Clock subclass: #ClockSimulated
	instanceVariableNames: 'addedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClockSimulated category: 'TusLibros' stamp: 'AF 11/11/2021 09:36:42'!
Clock subclass: #ClockSimulated
	instanceVariableNames: 'addedTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'nil' stamp: 'AF 11/11/2021 09:37:23'!
currentTime

	^DateAndTime now.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:37:50' prior: 50918883!
trueClock
	^Clock new.! !

!methodRemoval: ClockSimulated class #initialTime stamp: 'AF 11/11/2021 09:38:03'!
initialTime 
	
	^self basicNew initialize.!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:38:09'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:38:09'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:38:09'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:38:09'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:38:09'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:38:09'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:38:09'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:38:09'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:38:09'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:38:09'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:38:09'!
ERROR!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:38:09'!
ERROR!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:38:09'!
ERROR!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:38:09'!
ERROR!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:38:40'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:38:40'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:38:40'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:38:40'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:38:40'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:38:40'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:38:40'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:38:40'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:38:40'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:38:40'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:38:40'!
ERROR!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:38:40'!
ERROR!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:38:40'!
ERROR!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:38:40'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:38:42'!
ERROR!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:38:57'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:39:09' prior: 50918888!
falseClock
	^ClockSimulated.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:39:12' prior: 50919023!
falseClock
	^ClockSimulated new.! !

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:39:17'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:39:17'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:39:17'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:39:17'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:39:23'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:39:23'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:40:58' prior: 50918648!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  

	|cart cashier|
	
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: clock currentTime  registeringOn: saleBook.
	cashier checkOut.
	^saleBook copy
	! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:40:58'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:41:04'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:41:04'!
PASSED!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:43:24' prior: 50918235!
authenticatingWith: anAuthenticator andCatalog: aCatalog andMerchantProcessor: aMerchantProcessor andClock: aClock   

	authenticator := anAuthenticator .
	catalog := aCatalog .
	activeCarts := Dictionary new.
	
	cartsLastUsedTime  := Dictionary new.
	nextId := 1.
	
	merchantProcessor  := aMerchantProcessor.
	saleBook := OrderedCollection new.
	clock := aClock.
! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:52:58'!
test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt

	|interface cartId1 book falseClock|
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
	cartId1 := interface createCartFor: 'user' with: 'password'.
	falseClock addTime: (Duration minutes: 30).
	
	book := testObjectsFactory itemSellByTheStore .
	
	self should: [interface add: 1 of: book to: cartId1]
		raise: Error
		withExceptionDo:[:anError | self assert: anError message = Interface expiredCartErrorMessage.
							   
							   self should: [interface add: 1 of: book to: cartId1]
								  raise: Error
								  withMessageText: Interface invalidCartIdErrorMessage.

							 ] 

	! !

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'AF 11/11/2021 09:52:59'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:53:12' prior: 50919212!
test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt

	|interface cartId1 book falseClock|
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
	cartId1 := interface createCartFor: 'user' with: 'password'.
	falseClock addTime: (Duration minutes: 30).
	
	book := testObjectsFactory itemSellByTheStore .
	
	self should: [interface add: 1 of: book to: cartId1]
		raise: Error
		withExceptionDo:[:anError | self assert: anError messageText = Interface expiredCartErrorMessage.
							   
							   self should: [interface add: 1 of: book to: cartId1]
								  raise: Error
								  withMessageText: Interface invalidCartIdErrorMessage.

							 ] 

	! !

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'AF 11/11/2021 09:53:12'!
FAILURE!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:55:36' prior: 50918587!
checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId
	(Duration minutes: 30) < (clock currentTime - (cartsLastUsedTime at: aCartId)) ifTrue: [activeCarts remove: aCartId.
																		cartsLastUsedTime remove: aCartId.
																		self error: Interface expiredCartErrorMessage].
	

	cartsLastUsedTime at: aCartId put: clock currentTime.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:55:37'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:55:37'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:55:37'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:55:37'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:55:37'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:55:37'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:55:37'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:55:37'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:55:37'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:55:37'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:55:37'!
FAILURE!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:55:37'!
FAILURE!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:55:37'!
FAILURE!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:55:37'!
FAILURE!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'AF 11/11/2021 09:55:37'!
FAILURE!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:55:51'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:55:51'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:55:51'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:55:51'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:55:51'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:55:51'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:55:51'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:55:51'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:55:51'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:55:51'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:55:51'!
FAILURE!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:55:51'!
FAILURE!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:55:51'!
FAILURE!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:55:51'!
FAILURE!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'AF 11/11/2021 09:55:51'!
FAILURE!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:55:53'!
FAILURE!

----End fileIn of C:\Users\ferra\Desktop\CUIS SmallTalk\windows64\Packages\TerseGuide.pck.st----!
!Interface methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:56:39' prior: 50919274!
checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId
	(Duration minutes: 30) < (clock currentTime - (cartsLastUsedTime at: aCartId)) ifTrue: [activeCarts removeKey: aCartId.
																		cartsLastUsedTime removeKey: aCartId.
																		self error: Interface expiredCartErrorMessage].
	

	cartsLastUsedTime at: aCartId put: clock currentTime.! !

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test11 stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test12 stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test13 stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 09:56:39'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'AF 11/11/2021 09:56:39'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:57:10' prior: 50919243!
test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt

	|interface cartId1 book falseClock|
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
	cartId1 := interface createCartFor: 'user' with: 'password'.
	falseClock addTime: (Duration minutes: 30).
	
	book := testObjectsFactory itemSellByTheStore .
	
	self should: [interface add: 1 of: book to: cartId1]
		raise: Error
		withExceptionDo:[:anError | self assert: anError messageText = Interface expiredCartErrorMessage.
							   
							   self should: [interface add: 1 of: book to: cartId1]
								  raise: Error
								  withMessageText: Interface invalidCartIdErrorMessage.

							 ] 
	! !

----SNAPSHOT----(11 November 2021 09:57:38) CuisUniversity-4913.image priorSource: 18680046!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 09:59:30'!
test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes

	|interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!methodRemoval: InterfaceTest #test11 stamp: 'AF 11/11/2021 09:59:30'!
test11

	|interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface add: 1 of: book to: cartId.]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 10:00:04'!
test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes

	|creditCard interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!methodRemoval: InterfaceTest #test12 stamp: 'AF 11/11/2021 10:00:04'!
test12

	|creditCard interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 10:00:39'!
test13WhenListingCartItExpiresIfWasntUsedFor30Minutes

	|interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface listCart: cartId]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!methodRemoval: InterfaceTest #test13 stamp: 'AF 11/11/2021 10:00:39'!
test13

	|interface cartId book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	interface := self createInterfaceWithClock: falseClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId.
	falseClock addTime: (Duration minutes: 30).
	
	self should: [interface listCart: cartId]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 10:01:58' prior: 50918318!
test14

	|interface cartId1 book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	
	interface := self createInterfaceWithClock: falseClock.
	cartId1 := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId1.
	falseClock addTime: (Duration minutes: 30).
	
	interface createCartFor: 'user2' with: 'password2'.
	
	self should: [interface listCart: cartId1]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 10:01:59'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 10:01:59'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 10:01:59'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 10:01:59'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 10:01:59'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test13WhenListingCartItExpiresIfWasntUsedFor30Minutes stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'AF 11/11/2021 10:02:00'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test13WhenListingCartItExpiresIfWasntUsedFor30Minutes stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'AF 11/11/2021 10:02:01'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test13WhenListingCartItExpiresIfWasntUsedFor30Minutes stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test14 stamp: 'AF 11/11/2021 10:02:02'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'AF 11/11/2021 10:02:02'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'AF 11/11/2021 10:02:46'!
test14CreatingASecondCartDoesNotResetPreviousCartTimer

	|interface cartId1 book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	
	interface := self createInterfaceWithClock: falseClock.
	cartId1 := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId1.
	falseClock addTime: (Duration minutes: 30).
	
	interface createCartFor: 'user2' with: 'password2'.
	
	self should: [interface listCart: cartId1]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	! !

!methodRemoval: InterfaceTest #test14 stamp: 'AF 11/11/2021 10:02:46'!
test14

	|interface cartId1 book falseClock|
	
	self setUp.
	
	shouldAuthenticate := true.
	falseClock := testObjectsFactory falseClock.
	
	interface := self createInterfaceWithClock: falseClock.
	cartId1 := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	interface add: 1 of: book to: cartId1.
	falseClock addTime: (Duration minutes: 30).
	
	interface createCartFor: 'user2' with: 'password2'.
	
	self should: [interface listCart: cartId1]
		raise: Error
		withMessageText: Interface expiredCartErrorMessage

	!

----SNAPSHOT----(11 November 2021 10:02:52) CuisUniversity-4913.image priorSource: 18904245!

----STARTUP---- (11 November 2021 12:58:23) as /home/usuario/Downloads/UBA/INGE I/Cuis/linux64/CuisUniversity-4913.image!


----End fileIn of /home/usuario/Downloads/UBA/INGE I/Cuis/linux64/TusLibros.st----!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:00:16' prior: 50915752!
checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId

	(Duration minutes: 30) < (clock currentTime - (cartsLastUsedTime at: aCartId)) ifTrue: [activeCarts removeKey: aCartId.
																		cartsLastUsedTime removeKey: aCartId.
																		self error: Interface expiredCartErrorMessage].
	

	cartsLastUsedTime at: aCartId put: clock currentTime.! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:06:15'!
test16

	|creditCard interface cartId book aSalesBook trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	aSalesBook := interface listPurchases.
	
	self assert: '' equals: aSalesBook.
	! !

!testRun: #InterfaceTest #test16 stamp: 'Chiro 11/11/2021 13:06:25'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:06:34'!
listPurchases
	self shouldBeImplemented.! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:06:41' prior: 50915980!
listPurchases
	^''.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 13:06:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 13:06:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 13:06:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 13:06:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test13WhenListingCartItExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test14CreatingASecondCartDoesNotResetPreviousCartTimer stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test16 stamp: 'Chiro 11/11/2021 13:06:43'!
PASSED!

!testRun: #InterfaceTest #test16 stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test13WhenListingCartItExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test14CreatingASecondCartDoesNotResetPreviousCartTimer stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!

!testRun: #InterfaceTest #test16 stamp: 'Chiro 11/11/2021 13:06:44'!
PASSED!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:13:37'!
test17

	|creditCard interface cartId book aSalesBook trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	aSalesBook := interface listPurchases.
	 
	
	! !

!classDefinition: #ClientPurchases category: 'TusLibros' stamp: 'Chiro 11/11/2021 13:35:43'!
Object subclass: #ClientPurchases
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:35:38' prior: 50916205!
test17

	|creditCard interface cartId book aSalesBook trueClock bag|
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	aSalesBook := interface listPurchases.
	 
	bag := Bag new.
	bag add: testObjectsFactory itemSellByTheStore.
	
	ClientPurchases history: bag total: (testObjectsFactory itemSellByTheStorePrice).
	
	! !
!ClientPurchases class methodsFor: 'nil' stamp: 'Chiro 11/11/2021 13:37:09'!
history: aBagOfBooks total: aPrice
	^self basicNew initializeWith: aBagOfBooks and: aPrice.! !

!classDefinition: #ClientPurchases category: 'TusLibros' stamp: 'Chiro 11/11/2021 13:38:06'!
Object subclass: #ClientPurchases
	instanceVariableNames: 'bagBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientPurchases category: 'TusLibros' stamp: 'Chiro 11/11/2021 13:38:07'!
Object subclass: #ClientPurchases
	instanceVariableNames: 'bagBooks totalSpent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientPurchases methodsFor: 'nil' stamp: 'Chiro 11/11/2021 13:38:04'!
initializeWith: aBagOfBooks and: aPrice
	bagBooks := aBagOfBooks. 
	totalSpent := aPrice.! !
!ClientPurchases methodsFor: 'nil' stamp: 'Chiro 11/11/2021 13:40:35'!
history
	^bagBooks! !
!ClientPurchases methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:40:52'!
totalSpent
	^totalSpent ! !
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:42:24' prior: 50916234!
test17

	|creditCard interface cartId book aSalesBook trueClock bag clientPurchases|
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	aSalesBook := interface listPurchases.
	 
	bag := Bag new.
	bag add: testObjectsFactory itemSellByTheStore.
	
	clientPurchases := ClientPurchases history: bag total: (testObjectsFactory itemSellByTheStorePrice).
	
	self assert: (clientPurchases history) equals: aSalesBook history. 
	self assert: (clientPurchases totalSpent) equals: aSalesBook totalSpent.
	
	! !

!testRun: #InterfaceTest #test17 stamp: 'Chiro 11/11/2021 13:42:35'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'Chiro 11/11/2021 13:46:06' prior: 50915482!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test13WhenListingCartItExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test14CreatingASecondCartDoesNotResetPreviousCartTimer stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test16 stamp: 'Chiro 11/11/2021 13:46:08'!
PASSED!

!testRun: #InterfaceTest #test17 stamp: 'Chiro 11/11/2021 13:46:08'!
ERROR!

!testRun: #InterfaceTest #test17 stamp: 'Chiro 11/11/2021 13:46:08'!
ERROR!

!classDefinition: #Interface category: 'TusLibros' stamp: 'Chiro 11/11/2021 13:48:59'!
Object subclass: #Interface
	instanceVariableNames: 'authenticator activeCarts catalog nextId merchantProcessor saleBook clock cartsLastUsedTime clientPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:48:58' prior: 50915766!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  

	|cart cashier|
	
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: clock currentTime  registeringOn: saleBook.
	cashier checkOut.
	clientPurchases := ClientPurchases history: (cart content) total: (saleBook last) 
	! !
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:49:17' prior: 50915985!
listPurchases
	^clientPurchases.! !

!testRun: #InterfaceTest #test17 stamp: 'Chiro 11/11/2021 13:49:20'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 13:49:48' prior: 50916458!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  

	|cart cashier|
	
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: clock currentTime  registeringOn: saleBook.
	cashier checkOut.
	clientPurchases := ClientPurchases history: (cart contents) total: (saleBook last) 
	! !

----SNAPSHOT----(11 November 2021 13:50:03) CuisUniversity-4913.image priorSource: 18661997!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 13:56:33'!
ERROR!

!testRun: #InterfaceTest #test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test13WhenListingCartItExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test14CreatingASecondCartDoesNotResetPreviousCartTimer stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'Chiro 11/11/2021 13:56:33'!
PASSED!

!testRun: #InterfaceTest #test16 stamp: 'Chiro 11/11/2021 13:56:33'!
FAILURE!

!testRun: #InterfaceTest #test17 stamp: 'Chiro 11/11/2021 13:56:33'!
FAILURE!

!testRun: #InterfaceTest #test17 stamp: 'Chiro 11/11/2021 13:56:38'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'Chiro 11/11/2021 13:57:41' prior: 50915561!
registerSale

	salesBook add: total! !

!methodRemoval: Cashier #createSale stamp: 'Chiro 11/11/2021 13:57:54'!
createSale

	^ Sale of: total
!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 13:57:59'!
ERROR!

!testRun: #InterfaceTest #test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test13WhenListingCartItExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test14CreatingASecondCartDoesNotResetPreviousCartTimer stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test16 stamp: 'Chiro 11/11/2021 13:57:59'!
FAILURE!

!testRun: #InterfaceTest #test17 stamp: 'Chiro 11/11/2021 13:57:59'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 13:58:02'!
ERROR!
!Interface methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 14:01:31' prior: 50916484!
checkOutCartWith: aCartId creditCard: aCreditCard onDate: aDate  

	|cart cashier|
	
	cart := activeCarts at: aCartId ifAbsent:[^self error: Interface invalidCartIdErrorMessage ].
	self checkExpirationTimeForCartIdAndRefreshIfNotExpired: aCartId.
	
	cashier := Cashier toCheckout: cart charging: aCreditCard throught: merchantProcessor on: clock currentTime  registeringOn: saleBook.
	cashier checkOut.
	clientPurchases := ClientPurchases history: (cart contents) total: (saleBook last).
	
	^saleBook
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 14:01:32'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 14:01:32'!
ERROR!

!testRun: #InterfaceTest #test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test13WhenListingCartItExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test14CreatingASecondCartDoesNotResetPreviousCartTimer stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test16 stamp: 'Chiro 11/11/2021 14:01:32'!
FAILURE!

!testRun: #InterfaceTest #test17 stamp: 'Chiro 11/11/2021 14:01:32'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 14:02:21'!
ERROR!
!InterfaceTest methodsFor: 'as yet unclassified' stamp: 'Chiro 11/11/2021 14:02:32' prior: 50915308!
test10CheckOutOfValidIdCartRegisterSale

	|creditCard interface cartId book aSalesBook trueClock |
	
	self setUp.
	
	shouldAuthenticate := true.
	trueClock := testObjectsFactory trueClock.
	interface := self createInterfaceWithClock: trueClock.
		
	cartId := interface createCartFor: 'user' with: 'password'.
	book := testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	interface add: 1 of: book to: cartId.
	aSalesBook := interface checkOutCartWith: cartId creditCard: creditCard onDate: testObjectsFactory today.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice) equals: aSalesBook first
	! !

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 14:02:33'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #InterfaceTest #test01CannotCreateCartWithInvalidCredentials stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #InterfaceTest #test02CreateCartWithValidCredentialsReturnsIdOfAnEmptyCart stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #InterfaceTest #test03AddingBookToInvalidIdCartThrowsError stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #InterfaceTest #test04AddingBookToValidIdCartAddsBookToCorrespondingCart stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #InterfaceTest #test05AddingMultipleCopiesOfTheSameBookAddsTheRightAmount stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #InterfaceTest #test06CreatingMoreThanOneCartAssingsDifferentIdsForEach stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #InterfaceTest #test07AddingABookToOneCartDoesNotAffectTheOtherCart stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #InterfaceTest #test08ListingInvalidCartIdThrowsError stamp: 'Chiro 11/11/2021 14:02:33'!
PASSED!

!testRun: #InterfaceTest #test09CheckOutOfAInvalidIdCartThrowError stamp: 'Chiro 11/11/2021 14:02:34'!
PASSED!

!testRun: #InterfaceTest #test10CheckOutOfValidIdCartRegisterSale stamp: 'Chiro 11/11/2021 14:02:34'!
PASSED!

!testRun: #InterfaceTest #test11WhenAddingBookCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 14:02:34'!
PASSED!

!testRun: #InterfaceTest #test12WhenDoingCheckoutCartExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 14:02:34'!
PASSED!

!testRun: #InterfaceTest #test13WhenListingCartItExpiresIfWasntUsedFor30Minutes stamp: 'Chiro 11/11/2021 14:02:34'!
PASSED!

!testRun: #InterfaceTest #test14CreatingASecondCartDoesNotResetPreviousCartTimer stamp: 'Chiro 11/11/2021 14:02:34'!
PASSED!

!testRun: #InterfaceTest #test15CheckThatExpiredCartNoLongerExistsAfterTryingToUseIt stamp: 'Chiro 11/11/2021 14:02:34'!
PASSED!

!testRun: #InterfaceTest #test16 stamp: 'Chiro 11/11/2021 14:02:34'!
FAILURE!

!testRun: #InterfaceTest #test17 stamp: 'Chiro 11/11/2021 14:02:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 14:02:38'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Chiro 11/11/2021 14:02:45' prior: 50915015!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'Chiro 11/11/2021 14:02:47'!
PASSED!

!testRun: #InterfaceTest #test16 stamp: 'Chiro 11/11/2021 14:02:49'!
FAILURE!

----SNAPSHOT----(11 November 2021 14:04:53) CuisUniversity-4913.image priorSource: 18715246!