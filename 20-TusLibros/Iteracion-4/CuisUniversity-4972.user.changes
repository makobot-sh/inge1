

----QUIT----(13 November 2021 20:18:32) CuisUniversity-4972.image priorSource: 14896235!

----STARTUP---- (13 November 2021 20:18:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4972.image!


----QUIT----(13 November 2021 20:18:33) CuisUniversity-4972.image priorSource: 18974023!

----STARTUP---- (15 November 2021 19:27:09) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!


CodePackage subclass: #ColorExtrasPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Color-Extras'!

!classDefinition: #ColorExtrasPackage category: 'Color-Extras' stamp: 'Install-Color-Extras 11/15/2021 19:27:43'!
CodePackage subclass: #ColorExtrasPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Color-Extras'!

ColorExtrasPackage class
	instanceVariableNames: ''!

!classDefinition: 'ColorExtrasPackage class' category: 'Color-Extras' stamp: 'Install-Color-Extras 11/15/2021 19:27:43'!
ColorExtrasPackage class
	instanceVariableNames: ''!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\Packages\Features\Color-Extras.pck.st----!

CodePackage subclass: #MorphicMisc1Package
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Misc1'!

!classDefinition: #MorphicMisc1Package category: 'Morphic-Misc1' stamp: 'Install-Morphic-Misc1 11/15/2021 19:27:44'!
CodePackage subclass: #MorphicMisc1Package
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Morphic-Misc1'!
!MorphicMisc1Package commentStamp: '<historical>' prior: 0!
My purpose in life is to check that any base image methods overridden have not been updated.
See #MorphMisc1Package class>>prePackageInstall!

MorphicMisc1Package class
	instanceVariableNames: ''!

!classDefinition: 'MorphicMisc1Package class' category: 'Morphic-Misc1' stamp: 'Install-Morphic-Misc1 11/15/2021 19:27:44'!
MorphicMisc1Package class
	instanceVariableNames: ''!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\Packages\Morphic\Morphic-Misc1\Morphic-Misc1.pck.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\Packages\Morphic\Morphic-Widgets-Extras.pck.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\Packages\System\Collections-CompactArrays.pck.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\Packages\Features\Compression.pck.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\Packages\Features\Sound.pck.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\Packages\Features\Cryptography-DigitalSignatures.pck.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\Packages\Features\Identities-UUID.pck.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\Packages\System\Network-Kernel.pck.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\it4\WebClient.pck.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\it4\WordsClientDemo.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\it4\StringsServicesServer.st----!

----SNAPSHOT----(15 November 2021 19:46:20) CuisUniversity-4972.image priorSource: 18974255!

----STARTUP---- (15 November 2021 19:46:36) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!


StringsServicesRestInterface listeningOn: 8080.!

|server|!

server := StringsServicesRestInterface listeningOn: 8080.!

server startListening.!

server startListening.!

server stopListening.!

server stopListening. !

server destroy.!

server destroy. !

server destroy. !

----SNAPSHOT----(15 November 2021 19:57:03) CuisUniversity-4972.image priorSource: 20470678!

server destroy. !

----SNAPSHOT----(15 November 2021 19:57:14) CuisUniversity-4972.image priorSource: 20471153!

----STARTUP---- (15 November 2021 19:57:37) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!


|server|!

server := StringsServicesRestInterface listeningOn: 8080.!

server startListening.!

server startListening.!

server stopListening.!

server stopListening.!

server destroy.!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\it4\TusLibros-80.st----!

----SNAPSHOT----(15 November 2021 20:17:18) CuisUniversity-4972.image priorSource: 20471266!

server := WordsClientWindow open.!

server := WordsClientWindow allInstances .!

server := WordsClientWindow allInstances .!

|server window|!

server := StringsServicesRestInterface listeningOn: 8080.!

server startListening.!

window := WordsClientWindow open.!

window destroy!

server destroy !

Object subclass: #TusLibrosServer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/15/2021 20:39:44'!
Object subclass: #TusLibrosServer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

TestCase subclass: #TusLibrosServerTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classDefinition: #TusLibrosServerTest category: 'TusLibros-Tests' stamp: 'MP 11/15/2021 20:40:30'!
TestCase subclass: #TusLibrosServerTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!
!TusLibrosServerTest methodsFor: 'no messages' stamp: 'MP 11/15/2021 20:48:07'!
test01

	|server|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	WebRequest new initializeFromUrl: 'http://localhost:8080/'! !

----SNAPSHOT----(15 November 2021 20:50:55) CuisUniversity-4972.image priorSource: 20524931!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 20:50:57' prior: 50973092!
test01

	|server req|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	req _ WebRequest new initializeFromUrl: 'http://localhost:8080/'.
	req ! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:00:13' prior: 50973103!
test01

	|server req|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	req _ WebRequest new initializeFromUrl: 'http://localhost:8080/ping'.
	req ! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:02:24' prior: 50973112!
test01

	|server req|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	req _ WebClient httpGet: 'http://localhost:8080/ping'.
	req send! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:02:55' prior: 50973121!
test01

	|server req|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	req _ WebClient httpGet: 'http://localhost:8080/ping'.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:03:49' prior: 50973130!
test01

	|server req client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	req _ client httpGet: 'http://localhost:8080/ping'.
	
	client close.! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:10:31' prior: 50973139!
test01

	|server req client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	req _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	self assert: req = 0.! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:10:43' prior: 50973149!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	self assert: resp = 0.! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:11:09' prior: 50973161!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	self assert: resp = '0|000'.! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:11:14' prior: 50973173!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	self assert: resp = '0|0000'.! !

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:11:16'!
ERROR!
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:11:58'!
listeningOn: aSmallInteger 
	self shouldBeImplemented.! !

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:12:12'!
ERROR!
!TusLibrosServer class methodsFor: 'error handling' stamp: 'MP 11/15/2021 21:12:19' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: TusLibrosServer class #error: stamp: 'MP 11/15/2021 21:12:40'!
error: aString 
	self shouldBeImplemented.!
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:12:47' prior: 50973199!
listeningOn: aPort
	! !
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:13:08' prior: 50973216!
listeningOn: aPortNumber

	^self new initializeWith: aPortNumber.! !

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:17:53'!
ERROR!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:17:53'!
ERROR!

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/15/2021 21:18:04'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'portNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:18:04'!
initializeWith: aPortNumber 
	self shouldBeImplemented.
	portNumber := aPortNumber.! !

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/15/2021 21:22:46'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'portNumber port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/15/2021 21:22:49'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'portNumber port webServer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:22:41' prior: 50973239!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[.
		request send200Response: ('0000')
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:22:58'!
ERROR!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:22:59'!
ERROR!

Object subclass: #TusLibrosServer
	instanceVariableNames: 'port webServer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/15/2021 21:23:43'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'port webServer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:23:48'!
ERROR!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:23:48'!
ERROR!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:24:03' prior: 50973261!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[.
		request send200Response: ('0000')
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:24:04'!
ERROR!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:24:04'!
ERROR!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:24:40'!
startListening
	
	webServer startListener.

	^'Listening on port: ', port asString.
	! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:24:59'!
stopListening
	
	webServer stopListener.
	
	^'Stopped listening from port: ', port asString! !

!methodRemoval: TusLibrosServer #startListening stamp: 'MP 11/15/2021 21:25:07'!
startListening
	
	webServer startListener.

	^'Listening on port: ', port asString.
	!

!methodRemoval: TusLibrosServer #stopListening stamp: 'MP 11/15/2021 21:25:09'!
stopListening
	
	webServer stopListener.
	
	^'Stopped listening from port: ', port asString!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:25:18' prior: 50973296!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[.
		request send200Response: ('0000')
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:25:34'!
destroy
	
	webServer ifNotNil:[webServer destroy].! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:26:28' prior: 50973185!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: resp = '0|0000'.
	! !

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:26:30'!
ERROR!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:26:38' prior: 50973354!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: resp = '0|0000'.
	! !

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:26:39'!
FAILURE!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:27:11' prior: 50973369!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:27:21' prior: 50973336!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[.
		request send200Response: ('o|0000')
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:27:23' prior: 50973396!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[.
		request send200Response: ('0|0000')
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:27:24'!
FAILURE!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:27:24'!
FAILURE!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:27:43' prior: 50973384!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp content.
	! !

----STARTUP---- (15 November 2021 21:30:08) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!

!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 20:50:57' prior: 50973092!
test01

	|server req|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	req _ WebRequest new initializeFromUrl: 'http://localhost:8080/'.
	req ! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:00:13' prior: 50973445!
test01

	|server req|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	req _ WebRequest new initializeFromUrl: 'http://localhost:8080/ping'.
	req ! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:02:24' prior: 50973454!
test01

	|server req|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	req _ WebClient httpGet: 'http://localhost:8080/ping'.
	req send! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:02:55' prior: 50973463!
test01

	|server req|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	req _ WebClient httpGet: 'http://localhost:8080/ping'.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:03:49' prior: 50973472!
test01

	|server req client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	req _ client httpGet: 'http://localhost:8080/ping'.
	
	client close.! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:10:31' prior: 50973481!
test01

	|server req client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	req _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	self assert: req = 0.! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:10:43' prior: 50973491!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	self assert: resp = 0.! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:11:09' prior: 50973503!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	self assert: resp = '0|000'.! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:11:14' prior: 50973515!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	self assert: resp = '0|0000'.! !
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:11:58'!
listeningOn: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosServer class methodsFor: 'error handling' stamp: 'MP 11/15/2021 21:12:19' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: TusLibrosServer class #error: stamp: 'MP 11/15/2021 21:30:19'!
error: aString 
	self shouldBeImplemented.!
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:12:47' prior: 50973539!
listeningOn: aPort
	! !
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:13:08' prior: 50973554!
listeningOn: aPortNumber

	^self new initializeWith: aPortNumber.! !

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/15/2021 21:30:19'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'portNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:18:04'!
initializeWith: aPortNumber 
	self shouldBeImplemented.
	portNumber := aPortNumber.! !

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/15/2021 21:30:19'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'portNumber port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/15/2021 21:30:19'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'portNumber port webServer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:22:41' prior: 50973572!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[.
		request send200Response: ('0000')
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/15/2021 21:30:20'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'port webServer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/15/2021 21:30:20'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'port webServer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:24:03' prior: 50973594!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[.
		request send200Response: ('0000')
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:24:40'!
startListening
	
	webServer startListener.

	^'Listening on port: ', port asString.
	! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:24:59'!
stopListening
	
	webServer stopListener.
	
	^'Stopped listening from port: ', port asString! !

!methodRemoval: TusLibrosServer #startListening stamp: 'MP 11/15/2021 21:30:20'!
startListening
	
	webServer startListener.

	^'Listening on port: ', port asString.
	!

!methodRemoval: TusLibrosServer #stopListening stamp: 'MP 11/15/2021 21:30:20'!
stopListening
	
	webServer stopListener.
	
	^'Stopped listening from port: ', port asString!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:25:18' prior: 50973622!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[.
		request send200Response: ('0000')
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:25:34'!
destroy
	
	webServer ifNotNil:[webServer destroy].! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:26:28' prior: 50973527!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	server startListening.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: resp = '0|0000'.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:26:38' prior: 50973675!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: resp = '0|0000'.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:27:11' prior: 50973688!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:27:21' prior: 50973657!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[.
		request send200Response: ('o|0000')
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:27:23' prior: 50973712!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[.
		request send200Response: ('0|0000')
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:27:43' prior: 50973700!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp content.
	! !

----SNAPSHOT----(15 November 2021 21:30:47) CuisUniversity-4972.image priorSource: 20526361!

----STARTUP---- (15 November 2021 21:31:44) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!


|server client resp|!

server _ StringsServicesRestInterface listeningOn: 8080.!

server startListening.!

client _ WebClient new.!

resp _ client httpGet: 'http://localhost:8080/quote'.!

client close.!

server destroy.!

resp.!

resp.!

resp content.!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:36:13' prior: 50973726!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[
		request send200Response: ('0|0000').
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:37:34' prior: 50973766!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:37:50' prior: 50973780!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: anError messageText ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:38:22' prior: 50973794!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: anError messageText ]].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:38:24'!
PASSED!

----SNAPSHOT----(15 November 2021 21:38:31) CuisUniversity-4972.image priorSource: 20547221!

----STARTUP---- (15 November 2021 21:39:06) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!

!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:39:28' prior: 50973559!
listeningOn: aPortNumber

	^self basic new initializeWith: aPortNumber.! !
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:39:35' prior: 50973831!
listeningOn: aPortNumber

	^self basicNew initializeWith: aPortNumber.! !

----SNAPSHOT----(15 November 2021 21:39:37) CuisUniversity-4972.image priorSource: 20549521!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:39:40'!
PASSED!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:40:12' prior: 50973740!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: '0|0001' equals: resp content.
	! !

----SNAPSHOT----(15 November 2021 21:40:36) CuisUniversity-4972.image priorSource: 20550121!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:40:38'!
FAILURE!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/15/2021 21:40:39'!
FAILURE!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/15/2021 21:40:46' prior: 50973849!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp content.
	! !

----SNAPSHOT----(15 November 2021 21:40:49) CuisUniversity-4972.image priorSource: 20550709!

----STARTUP---- (15 November 2021 21:41:24) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!

!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:43:17' prior: 50973808!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',anError messageText ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:43:23' prior: 50973887!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !

----SNAPSHOT----(15 November 2021 21:48:59) CuisUniversity-4972.image priorSource: 20551349!

----STARTUP---- (17 November 2021 15:28:31) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!

!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:29:20' prior: 50973869!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	self halt.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp content.
	! !

----STARTUP---- (17 November 2021 15:30:08) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!

!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:30:24' prior: 50973869!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self halt.
	self assert: '0|0000' equals: resp content.
	! !

self content!

----STARTUP---- (17 November 2021 15:31:07) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!


	self halt.!

	self halt.!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:31:21' prior: 50973869!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	self halt.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp content.
	! !

self content.!

self content.!

self content.!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:32:22' prior: 50973954!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw'.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp content.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:33:24' prior: 50973968!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/17/2021 15:33:38'!
PASSED!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/17/2021 15:33:38'!
PASSED!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/17/2021 15:33:42'!
PASSED!

!testRun: #TusLibrosServerTest #test01 stamp: 'MP 11/17/2021 15:33:42'!
PASSED!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:35:40'!
test01CreateCartForValidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !

!methodRemoval: TusLibrosServerTest #test01 stamp: 'MP 11/17/2021 15:35:40'!
test01

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=cliente&password=psw') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:40:22'!
test02CreateCartForInvalidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=invalidPassword') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:40:46' prior: 50974002!
test01CreateCartForValidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=password') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:44:14' prior: 50974026!
test02CreateCartForInvalidCredentials

	|server resp client|
	
	
	
	server _ TusLibrosServer listeningOn: 8080 toInterface: self mockInterface.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=invalidPassword') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:44:21' prior: 50974054!
test02CreateCartForInvalidCredentials

	|server resp client|
	
	self setup.
	
	server _ TusLibrosServer listeningOn: 8080 toInterface: self mockInterface.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=invalidPassword') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:46:09' prior: 50974069!
test02CreateCartForInvalidCredentials

	|server resp client interface|
	
	server _ TusLibrosServer listeningOn: 8080 toInterface: self mockInterface.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=invalidPassword') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:46:16' prior: 50974084!
test02CreateCartForInvalidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080 toInterface: self mockInterface.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=invalidPassword') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !

!classDefinition: #TusLibrosServerTest category: 'TusLibros-Tests' stamp: 'MP 11/17/2021 15:46:53'!
TestCase subclass: #TusLibrosServerTest
	instanceVariableNames: 'testObjectsFactory clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classDefinition: #TusLibrosServerTest category: 'TusLibros-Tests' stamp: 'MP 11/17/2021 15:46:55'!
TestCase subclass: #TusLibrosServerTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:46:51' overrides: 16927572!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.
	clock := ManualClock now: testObjectsFactory today.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: testObjectsFactory defaultCatalog
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: clock
! !
!TusLibrosServerTest methodsFor: 'test objects' stamp: 'MP 11/17/2021 15:47:47'!
validUser

	^'validUser'! !
!TusLibrosServerTest methodsFor: 'test objects' stamp: 'MP 11/17/2021 15:47:55'!
avalidUserPassword

	^'validUserPassword'! !
!TusLibrosServerTest methodsFor: 'test objects' stamp: 'MP 11/17/2021 15:48:07'!
avalidUsersAndPasswords

	^Dictionary new
		at: self validUser put: self validUserPassword;
		yourself! !
!TusLibrosServerTest methodsFor: 'test objects' stamp: 'MP 11/17/2021 15:48:17'!
validUsersAndPasswords

	^Dictionary new
		at: self validUser put: self validUserPassword;
		yourself! !

!methodRemoval: TusLibrosServerTest #avalidUsersAndPasswords stamp: 'MP 11/17/2021 15:48:17'!
avalidUsersAndPasswords

	^Dictionary new
		at: self validUser put: self validUserPassword;
		yourself!
!TusLibrosServerTest methodsFor: 'test objects' stamp: 'MP 11/17/2021 15:48:21'!
validUserPassword

	^'validUserPassword'! !

!methodRemoval: TusLibrosServerTest #avalidUserPassword stamp: 'MP 11/17/2021 15:48:21'!
avalidUserPassword

	^'validUserPassword'!
!TusLibrosServerTest methodsFor: 'setup' stamp: 'MP 11/17/2021 15:48:58'!
createSalesBook

	^OrderedCollection new! !
!TusLibrosServerTest methodsFor: 'setup' stamp: 'MP 11/17/2021 15:49:07'!
merchantProcessor

	^self! !
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/17/2021 15:49:51' prior: 50974099!
test02CreateCartForInvalidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=invalidPassword') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 15:50:48'!
initializeWith: aPortNumber communicateWith: aSystemFacade  
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:50:48' prior: 50973837!
listeningOn: aPortNumber

	^self basicNew initializeWith: aPortNumber communicateWith: systemFacade.! !

!methodRemoval: TusLibrosServer #initializeWith: stamp: 'MP 11/17/2021 15:50:48'!
initializeWith: aPortNumber 
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 15:51:34'!
initializeWith: aPortNumber   
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:51:34' prior: 50974218!
listeningOn: aPortNumber

	^self basicNew initializeWith: aPortNumber .! !

!methodRemoval: TusLibrosServer #initializeWith:communicateWith: stamp: 'MP 11/17/2021 15:51:34'!
initializeWith: aPortNumber communicateWith: aSystemFacade  
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
!
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:52:04'!
listeningOn: aPortNumber communicateWith: aSystemFacade 

	^self basicNew initializeWith: aPortNumber .! !

!methodRemoval: TusLibrosServer class #listeningOn: stamp: 'MP 11/17/2021 15:52:04'!
listeningOn: aPortNumber

	^self basicNew initializeWith: aPortNumber .!
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/17/2021 15:52:33' prior: 50974040!
test01CreateCartForValidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade .
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=password') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/17/2021 15:52:34' prior: 50974283!
test01CreateCartForValidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=password') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 15:53:32'!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:53:33' prior: 50974271!
listeningOn: aPortNumber communicateWith: aSystemFacade 

	^self basicNew initializeWith: aPortNumber and: systemFacade .! !

!methodRemoval: TusLibrosServer #initializeWith: stamp: 'MP 11/17/2021 15:53:33'!
initializeWith: aPortNumber   
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
!
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:53:46' prior: 50974326!
listeningOn: aPortNumber communicateWith: aSystemFacade 

	^self basicNew initializeWith: aPortNumber and: aSystemFacade .! !

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'MP 11/17/2021 15:54:07'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'port webServer systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 15:54:06' prior: 50974311!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
		request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 15:56:53' prior: 50974363!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
			systemFacade does: user authenticatesWith: password.
			request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 15:56:59' prior: 50974378!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
			systemFacade does: user authenticatesWith: psw.
			request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/17/2021 15:57:06'!
PASSED!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 15:57:07'!
PASSED!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/17/2021 15:57:07'!
PASSED!
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/17/2021 15:57:16' prior: 50974189!
test02CreateCartForInvalidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=invalidPassword') content.
	
	client close.
	server destroy.
	self assert: '1|INVALID_PASSWORD' equals: resp.
	! !

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/17/2021 15:57:17'!
FAILURE!
!TusLibrosServer class methodsFor: 'error handling' stamp: 'MP 11/17/2021 15:58:49'!
invalidUserOrPasswordErrorDescription
	^ 'INVALID_USERNAME_OR_PASSWORD'! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 15:59:36' prior: 50974399!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
			systemFacade does: user authenticatesWith: psw.
			request send200Response: '0|0000'.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:03:05' prior: 50974453!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw. 
			request send200Response: '0|',cartId.
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:03:07'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/17/2021 16:03:07'!
FAILURE!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:03:16'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:03:55' prior: 50974473!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw. 
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:03:56'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/17/2021 16:03:56'!
FAILURE!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:04:02'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:11:48' prior: 50974505!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			self halt. 
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !

			self halt. !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:12:14'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:12:22' prior: 50974537!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:12:24'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:14:09' prior: 50974563!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			self halt.
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:14:14'!
FAILURE!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:14:23'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:17:01' prior: 50974588!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			self halt.
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			anError messageText = TusLibrosSystemFacade invalidUserOrPasswordErrorDescription ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription )].
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:17:05'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/17/2021 16:17:05'!
FAILURE!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:17:08'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:17:34' prior: 50974617!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			anError messageText = TusLibrosSystemFacade invalidUserOrPasswordErrorDescription ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription )].
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:19:28' prior: 50974655!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = TusLibrosSystemFacade invalidUserOrPasswordErrorDescription) ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription )].
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:21:09' prior: 50974682!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = TusLibrosSystemFacade invalidUserOrPasswordErrorDescription ) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription )].
			request send400Response: '1|',(anError messageText) ]].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:22:06' prior: 50974709!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = TusLibrosSystemFacade invalidUserOrPasswordErrorDescription ) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription )] ifFalse: [
			request send400Response: '1|',(anError messageText) ]
		]
	].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:22:08'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/17/2021 16:22:08'!
FAILURE!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:22:10'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:22:29' prior: 50974737!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = TusLibrosSystemFacade invalidUserOrPasswordErrorDescription ) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription )].
		]
	].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:22:31'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/17/2021 16:22:31'!
FAILURE!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:22:33'!
FAILURE!

TusLibrosServer allInstances.!

TusLibrosServer allInstances do: [:i | i destroy].!

TusLibrosServer allInstances .!

TusLibrosServer allInstances .!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances.!

TusLibrosServer allInstances do: [:i | i delete ].!

TusLibrosServer allInstances.!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:26:40'!
FAILURE!

TusLibrosServer allInstances.!
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/17/2021 16:27:14' prior: 50974297!
test01CreateCartForValidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=password') content.
	
	client close.
	server destroy.
	server delete.
	self assert: '0|0000' equals: resp.
	! !

TusLibrosServer allInstances do: [:i | i delete ].!

TusLibrosServer allInstances do: [:i | i delete ].!

TusLibrosServer allInstances.!

TusLibrosServer allInstances do: [:i | i delete ].!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances.!

TusLibrosServer allInstances.!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances do: [:i | i delete].!

TusLibrosServer allInstances.!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances.!

TusLibrosServer allInstances.!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:30:34' prior: 50974776!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription )].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:31:09' prior: 50974874!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription )] 
				ifFalse: [request send400Response: '1|',anError].
		]
	].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:31:10'!
ERROR!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/17/2021 16:31:11'!
FAILURE!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:31:13'!
ERROR!
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/17/2021 16:31:21' prior: 50974836!
test01CreateCartForValidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=client&password=password') content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !

TusLibrosServer allInstances.!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances.!

TusLibrosServer allInstances do: [:i | i delete].!

TusLibrosServer allInstances.!

WebServer allInstances.!

WebServer allInstances do: [:i | i destroy].!

WebServer allInstances.!

WebServer allInstances do: [:i | i delete].!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:33:08'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:34:04' prior: 50974899!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription )] .
		]
	].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:34:08'!
FAILURE!

----SNAPSHOT----(17 November 2021 16:34:12) CuisUniversity-4972.image priorSource: 20552423!

TusLibrosServer allInstances do: [:i | i delete].!

WebServer allInstances.!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:34:28'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:35:23' prior: 50974965!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] .
		]
	].
	
	webServer startListener.
! !

WebServer allInstances.!

WebServer allInstances do: [:i | i destroy].!

WebServer allInstances.!

WebServer allInstances.!

WebServer allInstances.!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:36:52' prior: 50975003!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifFalse: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] .
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/17/2021 16:37:13' prior: 50975033!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifFalse: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] .
			request send200Response: '0|0000' asString .
		]
	].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:37:15'!
FAILURE!

----SNAPSHOT----(17 November 2021 16:37:42) CuisUniversity-4972.image priorSource: 20586959!

----STARTUP---- (17 November 2021 16:37:56) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!


!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/17/2021 16:38:18'!
FAILURE!

WebServer allInstances.!

WebServer allInstances.!

TusLibrosServer allInstances.!

WebServer allInstances do: [:i | i stopListening ].!

----SNAPSHOT----(17 November 2021 16:45:13) CuisUniversity-4972.image priorSource: 20589983!

----STARTUP---- (18 November 2021 17:40:49) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!


TusLibrosServer allInstances.!

WebServer allInstances. !
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/18/2021 17:43:52' prior: 50974936!
test01CreateCartForValidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ) content.
	
	client close.
	server destroy.
	self assert: '0|0000' equals: resp.
	! !
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/18/2021 17:44:39' prior: 50974429!
test02CreateCartForInvalidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword,'BAD') content.
	
	client close.
	server destroy.
	self assert: '1|INVALID_PASSWORD' equals: resp.
	! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 17:46:34'!
FAILURE!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 17:47:27'!
FAILURE!
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/18/2021 17:47:35' prior: 50975110!
test01CreateCartForValidCredentials

	|server resp client|
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ) content.
	
	client close.
	server destroy.
	self assert: '0|1' equals: resp.
	! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 17:47:36'!
PASSED!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 17:47:36'!
PASSED!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 17:47:36'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 17:47:36'!
FAILURE!

self content!
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/18/2021 17:49:47' prior: 50975147!
test01CreateCartForValidCredentials

	|server resp client respText |
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '0|1' equals: respText.
	! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 17:49:53'!
PASSED!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 17:49:53'!
PASSED!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 17:49:53'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 17:49:53'!
FAILURE!
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/18/2021 17:50:45' prior: 50975125!
test02CreateCartForInvalidCredentials

	|server resp client respText |
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword,'BAD').
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '1|INVALID_PASSWORD' equals: respText.
	! !

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 17:50:48'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 17:53:14' prior: 50975058!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifFalse: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] .
			request send400Response: 'Error' asString .
		]
	].
	
	webServer startListener.
! !
!TusLibrosServerTest methodsFor: 'test objects' stamp: 'MP 11/18/2021 17:53:50'!
invalidPassword

	^'invalidPassword'! !
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/18/2021 17:54:04' prior: 50975206!
test02CreateCartForInvalidCredentials

	|server resp client respText |
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '1|INVALID_PASSWORD' equals: respText.
	! !

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 17:54:05'!
FAILURE!

TusLibrosServer allInstances.!

TusLibrosServer allInstances.!

TusLibrosServer allInstances.!

TusLibrosServer allInstances.!

----SNAPSHOT----(18 November 2021 17:56:11) CuisUniversity-4972.image priorSource: 20590431!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 17:59:39' prior: 50975226!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifFalse: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] .
			request send400Response: 'Error'.
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:01:44' prior: 50975285!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: 'Unknown error: ', anError messageText	].
		]
	].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 18:01:56'!
PASSED!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:01:57'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:01:57'!
FAILURE!

----SNAPSHOT----(18 November 2021 18:02:17) CuisUniversity-4972.image priorSource: 20596175!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:02:24' prior: 50975312!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
			self halt.
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: 'Unknown error: ', anError messageText	].
		]
	].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 18:03:11'!
ERROR!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:03:56'!
FAILURE!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 18:04:37'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:05:22'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:06:42'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:07:25'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:07:44' prior: 50975353!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
			self halt.
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade signalInvalidUserAndOrPassword) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: 'Unknown error: ', anError messageText	].
		]
	].
	
	webServer startListener.
! !

----SNAPSHOT----(18 November 2021 18:08:14) CuisUniversity-4972.image priorSource: 20598367!

----STARTUP---- (18 November 2021 18:09:37) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!


!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 18:10:17'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:10:41'!
FAILURE!

TusLibrosServer allInstances.!

----STARTUP---- (18 November 2021 18:11:27) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!


!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 18:12:15'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:12:30'!
FAILURE!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances.!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 18:13:03'!
PASSED!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:13:48'!
ERROR!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:14:16'!
FAILURE!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:15:01' prior: 50975402!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
			self halt.
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: 'Unknown error: ', anError messageText	].
		]
	].
	
	webServer startListener.
! !

TusLibrosServer allInstances do: [:instance | instance destroy].!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 18:15:13'!
PASSED!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:15:15'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:15:17'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:15:17'!
PASSED!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:15:27' prior: 50975469!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: 'Unknown error: ', anError messageText	].
		]
	].
	
	webServer startListener.
! !

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 18:16:59'!
PASSED!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:17:30'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:17:44'!
FAILURE!

self content!

TusLibrosServer allInstances do: [:instance | instance destroy].!

TusLibrosServer allInstances.!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:20:44' prior: 50975514!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: anError messageText capitalized 	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:28:15' prior: 50975557!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: anError messageText capitalized 	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:28:20' prior: 50975586!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:28:27' prior: 50975615!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !

----STARTUP---- (18 November 2021 18:28:57) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!

!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:15:01' prior: 50975402!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
			self halt.
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: 'Unknown error: ', anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:15:27' prior: 50975674!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: 'Unknown error: ', anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:20:44' prior: 50975703!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send400Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: anError messageText capitalized 	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:28:15' prior: 50975732!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: anError messageText capitalized 	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:28:20' prior: 50975761!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send400Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:28:27' prior: 50975790!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			self halt.
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:29:30' prior: 50975818!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !

TusLibrosServer allInstances do: [:instance | instance destroy].!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 18:29:39'!
PASSED!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:29:39'!
FAILURE!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:29:39'!
FAILURE!
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/18/2021 18:30:20' prior: 50975258!
test02CreateCartForInvalidCredentials

	|server resp client respText |
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '1|',TusLibrosServer invalidUserOrPasswordErrorDescription = respText.
	! !

TusLibrosServer allInstances do: [:instance | instance destroy].!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'MP 11/18/2021 18:30:35'!
PASSED!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/18/2021 18:30:35'!
PASSED!

----SNAPSHOT----(18 November 2021 18:30:38) CuisUniversity-4972.image priorSource: 20600939!

----SNAPSHOT----(18 November 2021 18:50:55) CuisUniversity-4972.image priorSource: 20616351!

----SNAPSHOT----(18 November 2021 21:42:02) CuisUniversity-4972.image priorSource: 20616445!

----STARTUP---- (19 November 2021 11:36:09) as C:\Users\ferra\Desktop\windows64\windows64\CuisUniversity-4972.image!


----End fileIn of \Users\ferra\Desktop\TusLibros-Model.st----!

----End fileIn of \Users\ferra\Desktop\TusLibros-Tests.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AF 11/19/2021 11:37:17'!
PASSED!

!testRun: #TusLibrosServerTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosServerTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'AF 11/19/2021 11:37:18'!
PASSED!

!classRenamed: #TusLibrosServer as: #TusLibrosRestInterface stamp: 'AF 11/19/2021 11:45:30'!
Smalltalk renameClassNamed: #TusLibrosServer as: #TusLibrosRestInterface!
!TusLibrosRestInterface methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 11:45:30' prior: 50972561!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 11:45:30' prior: 50973169!
test01CreateCartForValidCredentials

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '0|1' equals: respText.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 11:45:30' prior: 50973184!
test02CreateCartForInvalidCredentials

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '1|',TusLibrosRestInterface invalidUserOrPasswordErrorDescription = respText.
	! !

!classRenamed: #TusLibrosServerTest as: #TusLibrosRestInterfaceTest stamp: 'AF 11/19/2021 11:47:43'!
Smalltalk renameClassNamed: #TusLibrosServerTest as: #TusLibrosRestInterfaceTest!

!testRun: #TusLibrosRestInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 11:47:55'!
PASSED!

!testRun: #TusLibrosRestInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 11:47:55'!
PASSED!
!TusLibrosRestInterface class methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 11:52:17' prior: 50972597!
listeningOn: aPortNumber communicateWith: aSystemFacade 

	^self basicNew initializeWith: aPortNumber.! !
!TusLibrosRestInterface class methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 11:52:26'!
listeningOn: aPortNumber  

	^self basicNew initializeWith: aPortNumber.! !

!methodRemoval: TusLibrosRestInterface class #listeningOn:communicateWith: stamp: 'AF 11/19/2021 11:52:26'!
listeningOn: aPortNumber communicateWith: aSystemFacade 

	^self basicNew initializeWith: aPortNumber.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 11:55:22' prior: 50973921!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: Dictionary new
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: Clock new.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 11:55:30'!
initializeWith: aPortNumber     
	
	port := aPortNumber.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: Dictionary new
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: Clock new.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !

!methodRemoval: TusLibrosRestInterface #initializeWith:and: stamp: 'AF 11/19/2021 11:55:30'!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: Dictionary new
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: Clock new.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 11:56:41' prior: 50974051!
initializeWith: aPortNumber     
	
	port := aPortNumber.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: Dictionary new
		registeringOn: OrderedCollection  new
		debitingThrought: self merchantProcessor
		measuringTimeWith: Clock new.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 12:00:34' prior: 50974119!
initializeWith: aPortNumber     
	
	port := aPortNumber.
	"systemFacade := aSystemFacade."
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 12:01:17'!
initializeWith: aPortNumber and: aSystemFacade      
	
	port := aPortNumber.
	"systemFacade := aSystemFacade."
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestInterface class methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 12:01:17' prior: 50974004!
listeningOn: aPortNumber  

	^self basicNew initializeWith: aPortNumber and: systemFacade.! !

!methodRemoval: TusLibrosRestInterface #initializeWith: stamp: 'AF 11/19/2021 12:01:17'!
initializeWith: aPortNumber     
	
	port := aPortNumber.
	"systemFacade := aSystemFacade."
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
!
!TusLibrosRestInterface class methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 12:02:18'!
listeningOn: aPortNumber with: aSystemFacade   

	^self basicNew initializeWith: aPortNumber and: systemFacade.! !

!methodRemoval: TusLibrosRestInterface class #listeningOn: stamp: 'AF 11/19/2021 12:02:18'!
listeningOn: aPortNumber  

	^self basicNew initializeWith: aPortNumber and: systemFacade.!
!TusLibrosRestInterface class methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 12:02:26' prior: 50974242!
listeningOn: aPortNumber with: aSystemFacade   

	^self basicNew initializeWith: aPortNumber and: aSystemFacade.! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 12:02:54' prior: 50974180!
initializeWith: aPortNumber and: aSystemFacade      
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestInterfaceTest methodsFor: 'setup' stamp: 'AF 11/19/2021 12:11:03' prior: 50973155 overrides: 16927572!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.
	clock := Clock now: testObjectsFactory today.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: testObjectsFactory defaultCatalog
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: clock
! !
!TusLibrosRestInterface class methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 12:11:59'!
listeningOn: aPortNumber communicateWith: aSystemFacade   

	^self basicNew initializeWith: aPortNumber and: aSystemFacade.! !

!methodRemoval: TusLibrosRestInterface class #listeningOn:with: stamp: 'AF 11/19/2021 12:11:59'!
listeningOn: aPortNumber with: aSystemFacade   

	^self basicNew initializeWith: aPortNumber and: aSystemFacade.!
!TusLibrosRestInterfaceTest methodsFor: 'setup' stamp: 'AF 11/19/2021 12:12:17' prior: 50974291 overrides: 16927572!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.
	clock := ManualClock now: testObjectsFactory today.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: testObjectsFactory defaultCatalog
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: clock
! !

!testRun: #TusLibrosRestInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 12:12:18'!
PASSED!

!testRun: #TusLibrosRestInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 12:12:18'!
PASSED!
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 12:14:28'!
test02

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '0|2' equals: respText.
	! !
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 12:15:47'!
test03

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '0|2' equals: respText.
	! !

!methodRemoval: TusLibrosRestInterfaceTest #test02 stamp: 'AF 11/19/2021 12:15:47'!
test02

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '0|2' equals: respText.
	!

!testRun: #TusLibrosRestInterfaceTest #test03 stamp: 'AF 11/19/2021 12:16:18'!
PASSED!

!testRun: #TusLibrosRestInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 12:16:18'!
PASSED!

!testRun: #TusLibrosRestInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 12:16:18'!
PASSED!

!testRun: #TusLibrosRestInterfaceTest #test03 stamp: 'AF 11/19/2021 12:16:18'!
PASSED!
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 12:18:52' prior: 50974361!
test03

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword.
	
	client close.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respText _ resp content.
	
	
	
	server destroy.
	self assert: '0|2' equals: respText.
	! !

!testRun: #TusLibrosRestInterfaceTest #test03 stamp: 'AF 11/19/2021 12:18:56'!
PASSED!

!testRun: #TusLibrosRestInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 12:18:56'!
PASSED!

!testRun: #TusLibrosRestInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 12:18:56'!
PASSED!

!testRun: #TusLibrosRestInterfaceTest #test03 stamp: 'AF 11/19/2021 12:18:56'!
PASSED!
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 12:22:25' prior: 50974411!
test03

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respText _ resp content.
	
	client close.
	
	server destroy.
	self assert: '0|2' equals: respText.
	! !
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 12:26:23' prior: 50974444!
test03

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword.
	
	resp _ client httpGet: 'http://localhost:8080/addToCart?cartId=',1,'&bookIsbn='.
	respText _ resp content.
	
	client close.
	
	server destroy.
	self assert: '0|2' equals: respText.
	! !
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 12:43:43' prior: 50974459!
test03

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword.
	
	resp _ client httpGet: 'http://localhost:8080/addToCart?cartId=',1,'&bookIsbn=',testObjectsFactory itemSellByTheStore,'&bookQuantity=1' .
	respText _ resp content.
	
	client close.
	
	server destroy.
	self assert: '0|2' equals: respText.
	! !
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 12:44:13' prior: 50974477!
test03

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword.
	
	resp _ client httpGet: 'http://localhost:8080/addToCart?cartId=',1,'&bookIsbn=',testObjectsFactory itemSellByTheStore,'&bookQuantity=1' .
	respText _ resp content.
	
	client close.
	
	server destroy.
	self assert: '0|OK' equals: respText.
	! !

!testRun: #TusLibrosRestInterfaceTest #test03 stamp: 'AF 11/19/2021 12:44:14'!
ERROR!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 12:56:39' prior: 50974262!
initializeWith: aPortNumber and: aSystemFacade      
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response|
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response).
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 12:59:13' prior: 50974518!
initializeWith: aPortNumber and: aSystemFacade      
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response|
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response).
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: ((Dictionary new) add: 'status' -> 1; 
														    add: 'errorDescription' -> (TusLibrosRestInterface invalidUserOrPasswordErrorDescription);
														    yourself)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 13:25:23' prior: 50973949!
test01CreateCartForValidCredentials

	|server resp client respDecoded respExpected |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respDecoded _ WebUtils jsonMapFrom: (resp content).
	
	client close.
	server destroy.
	respExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status').
	self assert: (respExpected at: 'cartId') equals: (respDecoded at: 'cartId').! !

!testRun: #TusLibrosRestInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 13:25:37'!
ERROR!

!testRun: #TusLibrosRestInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 13:25:37'!
ERROR!
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 13:31:36' prior: 50974584!
test01CreateCartForValidCredentials

	|server resp client respDecoded respExpected |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respDecoded _ WebUtils jsonMapFrom: (resp contentStream).
	
	client close.
	server destroy.
	respExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status').
	self assert: (respExpected at: 'cartId') equals: (respDecoded at: 'cartId').! !

!testRun: #TusLibrosRestInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 13:31:39'!
ERROR!

!testRun: #TusLibrosRestInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 13:31:39'!
ERROR!
!TusLibrosRestInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 13:47:18' prior: 50974615!
test01CreateCartForValidCredentials

	|server resp client respDecoded respExpected |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respDecoded _ WebUtils jsonMapFrom: (resp content) readStream.
	
	client close.
	server destroy.
	respExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status').
	self assert: (respExpected at: 'cartId') equals: (respDecoded at: 'cartId').! !

!testRun: #TusLibrosRestInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 13:48:02'!
ERROR!

!testRun: #TusLibrosRestInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 13:48:02'!
ERROR!

WebServer allInstances !

WebServer allInstancesDo: [:i | i destroy]!


WebServer allInstancesDo: [:i | i connections]!

WebServer allInstancesDo: [:i | i connections] !

WebServer allInstancesDo: [:i | i connections]!

WebServer allInstancesDo: [:i | i connections]!

WebServer allInstancesDo: [:i | i connections]!

----STARTUP---- (19 November 2021 13:52:32) as C:\Users\ferra\Desktop\windows64\windows64\CuisUniversity-4972.image!


!classDefinition: #Cart category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:34'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #Cart category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:34'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/21/2013 23:59'!
invalidItemErrorMessage

	^self class invalidItemErrorMessage ! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/22/2013 00:00'!
invalidQuantityErrorMessage

	^self class invalidQuantityErrorMessage ! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/22/2013 14:17'!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self signalInvalidItem ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/22/2013 14:18'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [self signalInvalidQuantity ]! !
!Cart methodsFor: 'content' stamp: 'HernanWilkinson 6/22/2013 12:17'!
catalog

	^ catalog! !
!Cart methodsFor: 'content' stamp: 'HernanWilkinson 6/22/2013 12:30'!
content

	^items copy! !
!Cart methodsFor: 'content' stamp: 'HernanWilkinson 6/23/2013 12:10'!
itemsAndQuantitiesDo: aBlock

	^ items contents keysAndValuesDo: [ :anItem :aQuantity | aBlock value: anItem value: aQuantity ]! !
!Cart methodsFor: 'content' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/22/2013 12:29'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'error signal' stamp: 'HernanWilkinson 6/22/2013 14:18'!
signalInvalidItem

	self error: self invalidItemErrorMessage! !
!Cart methodsFor: 'error signal' stamp: 'HernanWilkinson 6/22/2013 14:19'!
signalInvalidQuantity

	self error: self invalidQuantityErrorMessage ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty

	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/22/2013 12:31'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity ! !

!classDefinition: 'Cart class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:34'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:34'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/21/2013 23:59'!
invalidItemErrorMessage

	^'Item is not in catalog'! !
!Cart class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/22/2013 00:00'!
invalidQuantityErrorMessage

	^'Invalid number of items'! !
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartSession category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #CartSession
	instanceVariableNames: 'owner cart lastUsedTime systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #CartSession category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #CartSession
	instanceVariableNames: 'owner cart lastUsedTime systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!CartSession methodsFor: 'time/expiration' stamp: 'HernanWilkinson 6/17/2015 20:34'!
assertIsNotExpirtedAt: aTime

	(self isExpiredAt: aTime) ifTrue: [ self signalCartSessionExpired ]! !
!CartSession methodsFor: 'time/expiration' stamp: 'HernanWilkinson 6/17/2015 20:36'!
isExpiredAt: aTime

	^ (lastUsedTime + systemFacade sessionDuration) < aTime! !
!CartSession methodsFor: 'time/expiration' stamp: 'HernanWilkinson 6/17/2015 20:36'!
now

	^systemFacade now! !
!CartSession methodsFor: 'time/expiration' stamp: 'HernanWilkinson 6/17/2015 20:37'!
today

	^systemFacade today! !
!CartSession methodsFor: 'session management' stamp: 'HernanWilkinson 6/17/2015 20:35'!
do: aBlock

	| now |

	now := self now.
	self assertIsNotExpirtedAt: now.

	^ [ aBlock value: self ] ensure: [ lastUsedTime := now  ]! !
!CartSession methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2015 20:36'!
initializeOwnedBy: aCustomer with: aCart on: aSystemFacade

	owner := aCustomer.
	cart := aCart.
	systemFacade := aSystemFacade.
	lastUsedTime := self now.! !
!CartSession methodsFor: 'error signal' stamp: 'HernanWilkinson 6/17/2015 20:37'!
signalCartSessionExpired

	self error: systemFacade sessionHasExpiredErrorDescription ! !
!CartSession methodsFor: 'cart' stamp: 'HernanWilkinson 6/17/2015 20:34'!
addToCart: anAmount of: aBook

	^cart add: anAmount of: aBook! !
!CartSession methodsFor: 'cart' stamp: 'HernanWilkinson 6/17/2015 20:35'!
cartContent

	^cart content! !
!CartSession methodsFor: 'cart' stamp: 'HernanWilkinson 6/17/2015 20:35'!
checkOutCartWithCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	^(Cashier
		toCheckout: cart
		ownedBy: owner
		charging: (CreditCard expiringOn: anExpirationMonthOfYear)
		throught: systemFacade merchantProcessor
		on: self today
		registeringOn: systemFacade salesBook) checkOut ! !

!classDefinition: 'CartSession class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
CartSession class
	instanceVariableNames: ''!

!classDefinition: 'CartSession class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
CartSession class
	instanceVariableNames: ''!
!CartSession class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2015 20:37'!
ownedBy: aCustomer with: aCart on: aSystemFacade

	^self new initializeOwnedBy: aCustomer with: aCart on: aSystemFacade! !

!classDefinition: #Cashier category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard owner ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #Cashier category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard owner ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/22/2013 12:17'!
createLineItemOf: anItem quantity: aQuantity

	^LineItem of: anItem quantity: aQuantity total: (self totalOf: anItem quantity: aQuantity) ! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/22/2013 12:25'!
createSale

	^ Sale doneBy: owner certifiedWith: ticket
! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/22/2013 12:28'!
createTicket

	| lineItems |

	lineItems := OrderedCollection new.
	cart itemsAndQuantitiesDo: [ :anItem :aQuantity |
		lineItems add: (self createLineItemOf: anItem quantity: aQuantity)].

	ticket := Ticket of: lineItems
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/22/2013 12:20'!
debitTotal

	merchantProcessor debit: ticket total from: creditCard.
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:06'!
registerSale

	salesBook add: self createSale! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/22/2013 12:17'!
totalOf: anItem quantity: aQuantity

	^(cart catalog at: anItem) * aQuantity  ! !
!Cashier methodsFor: 'checkout' stamp: 'HernanWilkinson 6/22/2013 12:28'!
checkOut

	self createTicket.
	self debitTotal.
	self registerSale.

	^ ticket ! !
!Cashier methodsFor: 'initialization' stamp: 'HernanWilkinson 6/22/2013 12:02'!
initializeToCheckout: aCart ownedBy: anOwner charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook

	cart := aCart.
	owner := anOwner.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !

!classDefinition: 'Cashier class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'assertions' stamp: 'HernanWilkinson 6/22/2013 14:22'!
assertIsNotEmpty: aCart

	aCart isEmpty ifTrue: [self signalCartCanNotBeEmpty ]! !
!Cashier class methodsFor: 'assertions' stamp: 'HernanWilkinson 6/22/2013 14:22'!
assertIsNotExpired: aCreditCard on: aDate

	(aCreditCard isExpiredOn: aDate) ifTrue: [self signalCanNotChargeAnExpiredCreditCard]! !
!Cashier class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/22/2013 12:00'!
toCheckout: aCart ownedBy: anOwner charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook

	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.

	^self new initializeToCheckout: aCart ownedBy: anOwner charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !
!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 18:21'!
canNotChargeAnExpiredCreditCardErrorMessage

	^'Can not charge an expired credit card'! !
!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:56'!
cartCanNotBeEmptyErrorMessage

	^'Can not check out an empty cart'! !
!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 19:02'!
creditCardHasNoCreditErrorMessage

	^'Credit card has no credit'! !
!Cashier class methodsFor: 'error signal' stamp: 'HernanWilkinson 6/22/2013 14:22'!
signalCanNotChargeAnExpiredCreditCard

	 self error: self canNotChargeAnExpiredCreditCardErrorMessage ! !
!Cashier class methodsFor: 'error signal' stamp: 'HernanWilkinson 6/22/2013 14:22'!
signalCartCanNotBeEmpty

	self error: self cartCanNotBeEmptyErrorMessage! !

!classDefinition: #Clock category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #Clock category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!Clock methodsFor: 'time' stamp: 'HernanWilkinson 6/22/2013 14:23'!
now

	self subclassResponsibility ! !
!Clock methodsFor: 'time' stamp: 'HernanWilkinson 6/22/2013 14:23'!
today

	self subclassResponsibility ! !

!classDefinition: #CreditCard category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #CreditCard category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!CreditCard methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 18:39'!
isExpiredOn: aDate

	^expiration start < (Month month: aDate monthIndex year: aDate yearNumber) start ! !
!CreditCard methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:38'!
initializeExpiringOn: aMonth

	expiration := aMonth ! !

!classDefinition: 'CreditCard class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 18:38'!
expiringOn: aMonth

	^self new initializeExpiringOn: aMonth! !

!classDefinition: #LineItem category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #LineItem
	instanceVariableNames: 'item quantity total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #LineItem category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #LineItem
	instanceVariableNames: 'item quantity total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!LineItem methodsFor: 'accessing' stamp: 'HernanWilkinson 6/22/2013 12:33'!
item

	^ item! !
!LineItem methodsFor: 'accessing' stamp: 'HernanWilkinson 6/22/2013 12:21'!
total

	^ total! !
!LineItem methodsFor: 'initialization' stamp: 'HernanWilkinson 6/22/2013 12:18'!
initializeOf: anItem quantity: aQuantity total: aTotal

	item := anItem.
	quantity := aQuantity.
	total := aTotal

! !

!classDefinition: 'LineItem class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
LineItem class
	instanceVariableNames: ''!

!classDefinition: 'LineItem class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
LineItem class
	instanceVariableNames: ''!
!LineItem class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/22/2013 12:18'!
of: anItem quantity: aQuantity total: aTotal

	^self new initializeOf: anItem quantity: aQuantity total: aTotal

! !

!classDefinition: #MerchantProcessor category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #MerchantProcessor category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!MerchantProcessor methodsFor: 'debit' stamp: 'HernanWilkinson 6/22/2013 14:31'!
README

	"Aunque nadie subclasifica esta clase, esta para definir el protocolo que se espera que todo MerchantProcessor sepa responder - Hernan"! !
!MerchantProcessor methodsFor: 'debit' stamp: 'HernanWilkinson 6/22/2013 14:30'!
debit: anAmount from: aCreditCard

	self subclassResponsibility ! !

!classDefinition: #Sale category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #Sale
	instanceVariableNames: 'customer ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #Sale category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Object subclass: #Sale
	instanceVariableNames: 'customer ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!Sale methodsFor: 'testing' stamp: 'HernanWilkinson 6/22/2013 12:06'!
wasDoneBy: aCustomer

	^customer = aCustomer ! !
!Sale methodsFor: 'initialization' stamp: 'HernanWilkinson 6/22/2013 12:26'!
initializeDoneBy: aCustomer certifiedWith: aTicket

	customer := aCustomer.
	ticket := aTicket ! !
!Sale methodsFor: 'total' stamp: 'HernanWilkinson 6/22/2013 12:26'!
total

	^ ticket total! !
!Sale methodsFor: 'line items' stamp: 'HernanWilkinson 6/22/2013 12:33'!
lineItemsDo: aBlock

	^ticket lineItemsDo: aBlock ! !

!classDefinition: 'Sale class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Sale class
	instanceVariableNames: ''!

!classDefinition: 'Sale class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:35'!
Sale class
	instanceVariableNames: ''!
!Sale class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/22/2013 12:25'!
doneBy: aCustomer certifiedWith: aTicket

	^self new initializeDoneBy: aCustomer certifiedWith: aTicket ! !

!classDefinition: #Ticket category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
Object subclass: #Ticket
	instanceVariableNames: 'lineItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #Ticket category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
Object subclass: #Ticket
	instanceVariableNames: 'lineItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!Ticket methodsFor: 'total' stamp: 'HernanWilkinson 6/17/2015 20:39'!
total

	^lineItems sum: [ :aLineItem | aLineItem total]! !
!Ticket methodsFor: 'initialization' stamp: 'HernanWilkinson 6/22/2013 12:20'!
initializeOf: aCollectionOfLineItems

	lineItems := aCollectionOfLineItems ! !
!Ticket methodsFor: 'line items' stamp: 'HernanWilkinson 6/22/2013 12:33'!
lineItemsDo: aBlock

	^lineItems do: aBlock ! !

!classDefinition: 'Ticket class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
Ticket class
	instanceVariableNames: ''!

!classDefinition: 'Ticket class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
Ticket class
	instanceVariableNames: ''!
!Ticket class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/22/2013 12:20'!
of: aCollectionOfLineItems

	^self new initializeOf: aCollectionOfLineItems ! !

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'port webServer systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosServer category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
Object subclass: #TusLibrosServer
	instanceVariableNames: 'port webServer systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/15/2021 21:25:34'!
destroy
	
	webServer ifNotNil:[webServer destroy].! !
!TusLibrosServer methodsFor: 'initialization' stamp: 'MP 11/18/2021 18:29:30'!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosServer invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !

!classDefinition: 'TusLibrosServer class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
TusLibrosServer class
	instanceVariableNames: ''!

!classDefinition: 'TusLibrosServer class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
TusLibrosServer class
	instanceVariableNames: ''!
!TusLibrosServer class methodsFor: 'as yet unclassified' stamp: 'MP 11/17/2021 15:53:46'!
listeningOn: aPortNumber communicateWith: aSystemFacade 

	^self basicNew initializeWith: aPortNumber and: aSystemFacade .! !
!TusLibrosServer class methodsFor: 'error handling' stamp: 'MP 11/17/2021 15:58:49'!
invalidUserOrPasswordErrorDescription
	^ 'INVALID_USERNAME_OR_PASSWORD'! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'validUsersAndPasswords catalog lastId merchantProcessor salesBook clock cartSessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'validUsersAndPasswords catalog lastId merchantProcessor salesBook clock cartSessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosSystemFacade methodsFor: 'error messages' stamp: 'HernanWilkinson 6/22/2013 11:24'!
canNotChargeAnExpiredCreditCardErrorMessage

	^Cashier canNotChargeAnExpiredCreditCardErrorMessage ! !
!TusLibrosSystemFacade methodsFor: 'error messages' stamp: 'HernanWilkinson 6/22/2013 11:17'!
cartCanNotBeEmptyErrorMessage

	^Cashier cartCanNotBeEmptyErrorMessage ! !
!TusLibrosSystemFacade methodsFor: 'error messages' stamp: 'HernanWilkinson 6/21/2013 23:27'!
invalidCartIdErrorDescription

	^'Invalid cart id'! !
!TusLibrosSystemFacade methodsFor: 'error messages' stamp: 'HernanWilkinson 6/21/2013 23:59'!
invalidItemErrorMessage

	^Cart invalidItemErrorMessage ! !
!TusLibrosSystemFacade methodsFor: 'error messages' stamp: 'HernanWilkinson 6/21/2013 23:03'!
invalidUserAndOrPasswordErrorDescription

	^'Invalid user and/or password'! !
!TusLibrosSystemFacade methodsFor: 'error messages' stamp: 'HernanWilkinson 6/22/2013 13:07'!
sessionHasExpiredErrorDescription

	^'Can not use the cart after ', self sessionDuration minutes printString , ' minutes of inactivity'! !
!TusLibrosSystemFacade methodsFor: 'time' stamp: 'HernanWilkinson 6/22/2013 13:02'!
now

	^clock now! !
!TusLibrosSystemFacade methodsFor: 'time' stamp: 'HernanWilkinson 6/22/2013 12:49'!
today

	^clock today! !
!TusLibrosSystemFacade methodsFor: 'authentication' stamp: 'HernanWilkinson 6/23/2013 12:18'!
does: aUser authenticatesWith: aPassword

	"Recordar que esto es solo un ejemplo. No se deben guardar passwords en un sistema de verdad sino un
	hash o similar - Hernan"

	| storedPassword |

	storedPassword := validUsersAndPasswords at: aUser ifAbsent: [ ^false ].
	^aPassword = storedPassword ! !
!TusLibrosSystemFacade methodsFor: 'authentication' stamp: 'HernanWilkinson 6/23/2013 12:18'!
if: aUser authenticatesWith: aPassword do: aBlock

	^ (self does: aUser authenticatesWith: aPassword)
		ifTrue: aBlock
		ifFalse: [ self signalInvalidUserAndOrPassword ].
	! !
!TusLibrosSystemFacade methodsFor: 'error signal' stamp: 'HernanWilkinson 6/21/2013 23:27'!
signalInvalidCartId

	self error: self invalidCartIdErrorDescription ! !
!TusLibrosSystemFacade methodsFor: 'error signal' stamp: 'HernanWilkinson 6/21/2013 23:02'!
signalInvalidUserAndOrPassword

	self error: self invalidUserAndOrPasswordErrorDescription! !
!TusLibrosSystemFacade methodsFor: 'cart session management' stamp: 'HernanWilkinson 6/21/2013 23:32'!
generateCartId

	"Recuerden que esto es un ejemplo, por lo que voy a generar ids numericos consecutivos, pero en una
	implementacion real no deberian se numeros consecutivos ni nada que genere problemas de seguridad - Hernan"

	lastId := lastId + 1.
	^lastId! !
!TusLibrosSystemFacade methodsFor: 'cart session management' stamp: 'HernanWilkinson 6/22/2013 13:02'!
sessionDuration

	^30 minutes! !
!TusLibrosSystemFacade methodsFor: 'cart session management' stamp: 'HernanWilkinson 6/17/2015 20:50'!
withCartSessionIdentifiedAs: aCartId do: aBlock

	| cartSession |

	cartSession := cartSessions at: aCartId ifAbsent: [self signalInvalidCartId ].
	^cartSession do: aBlock
! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'HAW 11/26/2018 20:18:41'!
add: anAmount of: aBook toCartIdentifiedAs: aCartId

	self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession addToCart: anAmount of: aBook ]! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'HernanWilkinson 6/17/2015 20:47'!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumber
			ownedBy: anOwner
			expiringOn: anExpirationMonthOfYear ]
! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'HernanWilkinson 6/17/2015 20:52'!
createCartFor: aUser authenticatedWith: aPassword

	^ self if: aUser authenticatesWith: aPassword do: [ | cartId cartSession |

		cartId := self generateCartId.
		cartSession := CartSession ownedBy: aUser with: (Cart acceptingItemsOf: catalog) on: self..
		cartSessions at: cartId put: cartSession.

		cartId  ]! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'HernanWilkinson 6/17/2015 20:48'!
listCartIdentifiedAs: aCartId

	^ self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession cartContent ]! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'HAW 11/26/2018 20:33:49'!
listPurchasesOf: aUser authenticatingWith: aPassword

	^self if: aUser authenticatesWith: aPassword do: [ | sales |
		sales := self salesDoneBy: aUser.
		sales
			inject: Dictionary new
			into: [ :salesOrderedByBook :aSale |
				self list: aSale on: salesOrderedByBook.
				salesOrderedByBook ] ]! !
!TusLibrosSystemFacade methodsFor: 'checkout support' stamp: 'HernanWilkinson 6/17/2015 20:49'!
merchantProcessor

	^ merchantProcessor! !
!TusLibrosSystemFacade methodsFor: 'checkout support' stamp: 'HernanWilkinson 6/17/2015 20:50'!
salesBook

	^ salesBook! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'HernanWilkinson 6/17/2015 20:56'!
list: aSale on: salesOrderedByBook

	"Esto es un indicio de que por ahi conviene empezar a pensar en modelar un SaleBook - Hernan"
	aSale lineItemsDo: [ :aLineItem | | oldTotal newTotal |
		oldTotal := salesOrderedByBook at: aLineItem item ifAbsentPut: [ 0 ].
		newTotal := oldTotal + aLineItem total.
		salesOrderedByBook at: aLineItem item put: newTotal ]! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'HernanWilkinson 6/17/2015 20:55'!
salesDoneBy: aUser

	"Esto es un indicio de que por ahi conviene empezar a pensar en modelar un SaleBook - Hernan"
	^ salesBook select: [ :aSale | aSale wasDoneBy: aUser ]! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'HernanWilkinson 6/22/2013 14:17'!
initializeAuthenticatingWith: aValidUsersAndPasswords
	acceptingItemsOf: aCatalog
	registeringOn: aSalesBook
	debitingThrought: aMerchantProcessor
	measuringTimeWith: aClock

	validUsersAndPasswords := aValidUsersAndPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.

	cartSessions := Dictionary new.
	lastId := 0.! !

!classDefinition: 'TusLibrosSystemFacade class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
TusLibrosSystemFacade class
	instanceVariableNames: ''!

!classDefinition: 'TusLibrosSystemFacade class' category: 'TusLibros-Model' stamp: 'AF 11/19/2021 13:52:36'!
TusLibrosSystemFacade class
	instanceVariableNames: ''!
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/22/2013 14:17'!
authenticatingWith: aValidUsersAndPasswords
	acceptingItemsOf: aCatalog
	registeringOn: aSalesBook
	debitingThrought: aMerchantProcessor
	measuringTimeWith: aClock

	^self new
		initializeAuthenticatingWith: aValidUsersAndPasswords
		acceptingItemsOf: aCatalog
		registeringOn: aSalesBook
		debitingThrought: aMerchantProcessor
		measuringTimeWith: aClock! !

!classDefinition: #CartTest category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:36'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classDefinition: #CartTest category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:36'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test01NewCartsAreCreatedEmpty

	self assert: testObjectsFactory createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |

	cart := testObjectsFactory createCart.

	self
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |

	cart := testObjectsFactory createCart.

	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |

	cart := testObjectsFactory createCart.

	self
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |

	cart := testObjectsFactory createCart.

	self
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11'!
test06CartRemembersAddedItems

	| cart |

	cart := testObjectsFactory createCart.

	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11'!
test07CartDoesNotHoldNotAddedItems

	| cart |

	cart := testObjectsFactory createCart.

	self deny: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11'!
test08CartRemembersTheNumberOfAddedItems

	| cart |

	cart := testObjectsFactory createCart.

	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !
!CartTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 18:09' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !

!classDefinition: #CashierTest category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classDefinition: #CashierTest category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/22/2013 12:00'!
test01CanNotCheckoutAnEmptyCart

	| salesBook |

	salesBook := OrderedCollection new.
	self
		should: [ Cashier
			toCheckout: testObjectsFactory createCart
			ownedBy: testObjectsFactory customer
			charging: testObjectsFactory notExpiredCreditCard
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/22/2013 12:22'!
test02CalculatedTotalIsCorrect

	| cart cashier |

	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.

	cashier :=  Cashier
		toCheckout: cart
		ownedBy: testObjectsFactory customer
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: OrderedCollection new.

	self assert: cashier checkOut total = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/22/2013 12:01'!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.

	self
		should: [ Cashier
				toCheckout: cart
				ownedBy: testObjectsFactory customer
				charging: testObjectsFactory expiredCreditCard
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/22/2013 12:23'!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.

	cashier:= Cashier
		toCheckout: cart
		ownedBy: testObjectsFactory customer
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.

	total := cashier checkOut total.

	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/22/2013 12:22'!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.

	cashier:= Cashier
		toCheckout: cart
		ownedBy: testObjectsFactory customer
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.

	debitBehavior := [ :anAmount :aCreditCard |
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut total.

	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/22/2013 12:02'!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].

	cashier:= Cashier
		toCheckout: cart
		ownedBy: testObjectsFactory customer
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.

	self
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 19:03' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!CashierTest methodsFor: 'merchant processor protocol' stamp: 'HernanWilkinson 6/17/2013 19:02'!
debit: anAmount from: aCreditCard

	^debitBehavior value: anAmount value: aCreditCard ! !

!classDefinition: #TusLibrosServerTest category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:37'!
TestCase subclass: #TusLibrosServerTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classDefinition: #TusLibrosServerTest category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:37'!
TestCase subclass: #TusLibrosServerTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!
!TusLibrosServerTest methodsFor: 'test objects' stamp: 'MP 11/18/2021 17:53:50'!
invalidPassword

	^'invalidPassword'! !
!TusLibrosServerTest methodsFor: 'test objects' stamp: 'MP 11/17/2021 15:47:47'!
validUser

	^'validUser'! !
!TusLibrosServerTest methodsFor: 'test objects' stamp: 'MP 11/17/2021 15:48:21'!
validUserPassword

	^'validUserPassword'! !
!TusLibrosServerTest methodsFor: 'test objects' stamp: 'MP 11/17/2021 15:48:17'!
validUsersAndPasswords

	^Dictionary new
		at: self validUser put: self validUserPassword;
		yourself! !
!TusLibrosServerTest methodsFor: 'setup' stamp: 'MP 11/17/2021 15:48:58'!
createSalesBook

	^OrderedCollection new! !
!TusLibrosServerTest methodsFor: 'setup' stamp: 'MP 11/17/2021 15:49:07'!
merchantProcessor

	^self! !
!TusLibrosServerTest methodsFor: 'setup' stamp: 'MP 11/17/2021 15:46:51' overrides: 16927572!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.
	clock := ManualClock now: testObjectsFactory today.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: testObjectsFactory defaultCatalog
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: clock
! !
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/18/2021 17:49:47'!
test01CreateCartForValidCredentials

	|server resp client respText |
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '0|1' equals: respText.
	! !
!TusLibrosServerTest methodsFor: 'tests' stamp: 'MP 11/18/2021 18:30:20'!
test02CreateCartForInvalidCredentials

	|server resp client respText |
	
	server _ TusLibrosServer listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '1|',TusLibrosServer invalidUserOrPasswordErrorDescription = respText.
	! !

!classDefinition: #TusLibrosSystemFacadeTest category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:37'!
TestCase subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classDefinition: #TusLibrosSystemFacadeTest category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:37'!
TestCase subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!
!TusLibrosSystemFacadeTest methodsFor: 'tests - add to cart' stamp: 'HAW 6/19/2018 11:41:46'!
test04CanAddItemsToACreatedCart

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.

	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self assert: ((systemFacade listCartIdentifiedAs: cartId) occurrencesOf: self validBook) equals: 1
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - add to cart' stamp: 'HAW 11/26/2018 18:03:02'!
test05CanNotAddItemToNotCreatedCart

	self
		should: [systemFacade add: 1 of: self validBook toCartIdentifiedAs: self invalidCartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidCartIdErrorDescription ]
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - add to cart' stamp: 'HAW 11/26/2018 18:03:17'!
test06CanNotAddItemNotSellByTheStore

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	self
		should: [systemFacade add: 1 of: self invalidBook toCartIdentifiedAs: cartId ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidItemErrorMessage.
			self assert: (systemFacade listCartIdentifiedAs: cartId) isEmpty ]
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - add to cart' stamp: 'HAW 11/26/2018 18:03:58'!
test17CanNotAddToCartWhenSessionIsExpired

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	self advanceTime: (systemFacade sessionDuration + 1 minutes) .
	self
		should: [systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade sessionHasExpiredErrorDescription.
			self revertTime: systemFacade sessionDuration.
			self assert: (systemFacade listCartIdentifiedAs: cartId) isEmpty ]
! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'HAW 11/26/2018 18:07:48'!
test14ListPurchasesIncludesBoughtItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: (testObjectsFactory itemSellByTheStorePrice * 2).
	self assert: (purchases at: self anotherValidBook) equals: testObjectsFactory anotherItemSellByTheStorePrice.! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'HAW 11/26/2018 18:10:29'!
test15CanNotListPurchasesOfInvalidCustomer

	self
		should: [systemFacade listPurchasesOf: self invalidUser authenticatingWith: self validUserPassword ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'HAW 11/26/2018 18:10:45'!
test16CanNotListPurchasesOfValidCustomerWithInvalidPassword

	self
		should: [systemFacade listPurchasesOf: self validUser authenticatingWith: self invalidPassword ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - create cart' stamp: 'HAW 6/19/2018 11:40:51'!
test01CanCreateCartWithValidUserAndPassword

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	self assert: (systemFacade listCartIdentifiedAs: cartId) isEmpty
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - create cart' stamp: 'HAW 11/26/2018 18:02:23'!
test02CanNotCreateCartWithInvalidUser

	self
		should: [ systemFacade createCartFor: self invalidUser authenticatedWith: self validUserPassword ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - create cart' stamp: 'HAW 11/26/2018 18:02:33'!
test03CanNotCreateCartWithInvalidPassword

	self
		should: [ systemFacade createCartFor: self validUser authenticatedWith: self invalidPassword ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'merchant processor protocol' stamp: 'HernanWilkinson 6/22/2013 11:48'!
debit: anAmount from: aCreditCard
! !
!TusLibrosSystemFacadeTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/22/2013 11:42'!
createSalesBook

	^OrderedCollection new! !
!TusLibrosSystemFacadeTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/22/2013 11:47'!
merchantProcessor

	^self! !
!TusLibrosSystemFacadeTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2015 20:53' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	clock := ManualClock now: testObjectsFactory today.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		acceptingItemsOf: testObjectsFactory defaultCatalog
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: clock
! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'HernanWilkinson 6/22/2013 00:15'!
anotherValidBook

	^testObjectsFactory anotherItemSellByTheStore ! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'HernanWilkinson 6/21/2013 23:49'!
invalidBook

	^testObjectsFactory itemNotSellByTheStore ! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'HernanWilkinson 6/21/2013 23:25'!
invalidCartId

	"Devuelvo nil porque seguro que siempre sera un id invalido, no importa que sea el id - Hernan"
	^nil! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'HernanWilkinson 6/21/2013 23:06'!
invalidPassword

	^'invalidPassword'! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'HernanWilkinson 6/21/2013 22:30'!
invalidUser

	^'invalidUser'! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'HernanWilkinson 6/21/2013 23:50'!
validBook

	^testObjectsFactory itemSellByTheStore ! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'HernanWilkinson 6/21/2013 22:27'!
validUser

	^'validUser'! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'HernanWilkinson 6/21/2013 22:28'!
validUserPassword

	^'validUserPassword'! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'HernanWilkinson 6/21/2013 22:43'!
validUsersAndPasswords

	^Dictionary new
		at: self validUser put: self validUserPassword;
		yourself! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'HAW 6/19/2018 11:45:13'!
test10CanCheckoutACart

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
		ownedBy: testObjectsFactory notExpiredCreditCardOwner
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: (purchases at: self validBook) equals: testObjectsFactory itemSellByTheStorePrice.
! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'HAW 11/26/2018 18:05:20'!
test11CanNotCheckoutANotCreatedCart

	self
		should: [systemFacade
			checkOutCartIdentifiedAs: self invalidCartId
			withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidCartIdErrorDescription ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'HAW 11/26/2018 18:06:07'!
test12CanNotCheckoutAnEmptyCart

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId
			withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade cartCanNotBeEmptyErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'HAW 11/26/2018 18:07:02'!
test13CanNotCheckoutWithAnExpiredCreditCard

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	self
		should: [systemFacade
			checkOutCartIdentifiedAs: cartId
			withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			expiringOn: testObjectsFactory expiredMonthOfYear ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]

		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - checkout' stamp: 'HAW 11/26/2018 18:07:15'!
test19CanNotCheckOutCartWhenSessionIsExpired

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	self advanceTime: (systemFacade sessionDuration + 1 minutes) .
	self should: [
		systemFacade
			checkOutCartIdentifiedAs: cartId
			withCreditCardNumbered: testObjectsFactory notExpiredCreditCardNumber
			ownedBy: testObjectsFactory notExpiredCreditCardOwner
			expiringOn: testObjectsFactory notExpiredMonthOfYear ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade sessionHasExpiredErrorDescription.
			self assert: (systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword) isEmpty ]


	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'HernanWilkinson 6/17/2015 20:53'!
test07ListCartOfAnEmptyCartReturnsAnEmptyBag

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	self assert: (systemFacade listCartIdentifiedAs: cartId) isEmpty
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'HAW 11/26/2018 18:04:15'!
test08CanNotListCartOfInvalidCartId

	self
		should: [systemFacade listCartIdentifiedAs: self invalidCartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidCartIdErrorDescription ]
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'HAW 11/26/2018 18:04:32'!
test09ListCartReturnsTheRightNumberOfItems

	| cartId cartContent |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 2 of: self anotherValidBook toCartIdentifiedAs: cartId.
	cartContent := systemFacade listCartIdentifiedAs: cartId.

	self assert: (cartContent occurrencesOf: self validBook) equals: 1.
	self assert: (cartContent occurrencesOf: self anotherValidBook) equals: 2
! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list cart' stamp: 'HAW 11/26/2018 18:04:42'!
test18CanNotListCartWhenSessionIsExpired

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	self advanceTime: (systemFacade sessionDuration + 1 minutes) .
	self
		should: [systemFacade listCartIdentifiedAs: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade sessionHasExpiredErrorDescription ].

! !
!TusLibrosSystemFacadeTest methodsFor: 'time' stamp: 'HernanWilkinson 6/22/2013 12:53'!
advanceTime: aDuration

	clock advanceTime: aDuration ! !
!TusLibrosSystemFacadeTest methodsFor: 'time' stamp: 'HernanWilkinson 6/22/2013 13:07'!
revertTime: aDuration

	clock revertTime: aDuration ! !

!classDefinition: #ManualClock category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:38'!
Clock subclass: #ManualClock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classDefinition: #ManualClock category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:38'!
Clock subclass: #ManualClock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!
!ManualClock methodsFor: 'time change' stamp: 'HernanWilkinson 6/22/2013 12:54'!
advanceTime: aDuration

	now := now + aDuration ! !
!ManualClock methodsFor: 'time change' stamp: 'HernanWilkinson 6/22/2013 13:08'!
revertTime: aDuration

	now := now + aDuration negated ! !
!ManualClock methodsFor: 'time' stamp: 'HernanWilkinson 6/22/2013 12:56' overrides: 50975047!
now

	^ now! !
!ManualClock methodsFor: 'time' stamp: 'HernanWilkinson 6/22/2013 12:53' overrides: 50975051!
today

	^now date! !
!ManualClock methodsFor: 'initialization' stamp: 'HernanWilkinson 6/22/2013 12:52'!
initializeNow: aTime

	now := aTime ! !

!classDefinition: 'ManualClock class' category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:38'!
ManualClock class
	instanceVariableNames: ''!

!classDefinition: 'ManualClock class' category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:38'!
ManualClock class
	instanceVariableNames: ''!
!ManualClock class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/22/2013 12:52'!
now: aTime

	^self new initializeNow: aTime ! !

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:38'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros-Tests' stamp: 'AF 11/19/2021 13:52:38'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/22/2013 00:16'!
anotherItemSellByTheStore

	^'anotherValidBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/22/2013 00:16'!
anotherItemSellByTheStorePrice

	^15! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08'!
itemNotSellByTheStore

	^'invalidBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08'!
itemSellByTheStore

	^ 'validBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08'!
itemSellByTheStorePrice

	^10! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'HernanWilkinson 6/17/2013 18:08'!
createCart

	^Cart acceptingItemsOf: self defaultCatalog! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'HernanWilkinson 6/22/2013 00:16'!
defaultCatalog

	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'HernanWilkinson 6/22/2013 11:24'!
expiredCreditCard

	^CreditCard expiringOn: self expiredMonthOfYear ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'HernanWilkinson 6/22/2013 11:24'!
expiredMonthOfYear

	^ Month month: today monthIndex year: today yearNumber - 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'HernanWilkinson 6/22/2013 11:06'!
notExpiredCreditCard

	^CreditCard expiringOn: self notExpiredMonthOfYear! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'HAW 6/19/2018 11:45:30'!
notExpiredCreditCardNumber

	^ '1111222233334444' ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'HAW 6/19/2018 11:45:48'!
notExpiredCreditCardOwner

	^'Juan Perez'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'HernanWilkinson 6/22/2013 11:06'!
notExpiredMonthOfYear

	^ Month month: today monthIndex year: today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:37' overrides: 16896425!
initialize

	today := DateAndTime now! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'HernanWilkinson 6/17/2013 18:37'!
today

	^ today! !
!StoreTestObjectsFactory methodsFor: 'customer' stamp: 'HernanWilkinson 6/22/2013 12:02'!
customer

	^'aCustomer'! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 11:45:30' prior: 50975899!
test01CreateCartForValidCredentials

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '0|1' equals: respText.
	! !
!TusLibrosServerTest methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 11:45:30' prior: 50975914!
test02CreateCartForInvalidCredentials

	|server resp client respText |
	
	server _ TusLibrosRestInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '1|',TusLibrosRestInterface invalidUserOrPasswordErrorDescription = respText.
	! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'AF 11/19/2021 13:53:19'!
PASSED!

!classRenamed: #TusLibrosServer as: #TusLibrosRestAPIInterface stamp: 'AF 11/19/2021 13:54:53'!
Smalltalk renameClassNamed: #TusLibrosServer as: #TusLibrosRestAPIInterface!
!TusLibrosRestAPIInterface methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 13:54:53' prior: 50975279!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			request send200Response: '0|',cartId asString .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestAPIInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !

!classRenamed: #TusLibrosServerTest as: #TusLibrosRestAPIInterfaceTest stamp: 'AF 11/19/2021 13:55:14'!
Smalltalk renameClassNamed: #TusLibrosServerTest as: #TusLibrosRestAPIInterfaceTest!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 13:55:22' prior: 50976532!
test01CreateCartForValidCredentials

	|server resp client respText |
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '0|1' equals: respText.
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 13:56:15' prior: 50976548!
test02CreateCartForInvalidCredentials

	|server resp client respText |
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respText _ resp content.
	
	client close.
	server destroy.
	self assert: '1|',TusLibrosRestAPIInterface invalidUserOrPasswordErrorDescription = respText.
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AF 11/19/2021 13:56:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'AF 11/19/2021 13:56:39'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 13:56:44'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 13:56:44'!
PASSED!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 14:02:45' prior: 50976643!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(TusLibrosRestAPIInterface invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 14:03:11' prior: 50976677!
test01CreateCartForValidCredentials

	|server resp client respDecoded |
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respDecoded _ resp content.
	
	client close.
	server destroy.
	self assert: '0|1' equals: respDecoded.
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 14:03:47' prior: 50976875!
test01CreateCartForValidCredentials

	|server resp client respDecoded |
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respDecoded _ WebUtils jsonDecode: (resp content) readStream.
	
	client close.
	server destroy.
	
	
	self assert: '0|1' equals: respDecoded.
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 14:04:19' prior: 50976892!
test01CreateCartForValidCredentials

	|server resp client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respDecoded _ WebUtils jsonDecode: (resp content) readStream.
	
	client close.
	server destroy.
	
	respExpected := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	self assert: '0|1' equals: respDecoded.
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 14:05:08' prior: 50976910!
test01CreateCartForValidCredentials

	|server resp client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respDecoded _ WebUtils jsonDecode: (resp content) readStream.
	
	client close.
	server destroy.
	
	respExpected := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status') .
	self assert: (respExpected at: 'cartId') equals: (respDecoded at: 'cartId') .! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 14:05:13'!
PASSED!

----SNAPSHOT----(19 November 2021 14:24:21) CuisUniversity-4972.image priorSource: 20491248!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 14:32:09' prior: 50976693!
test02CreateCartForInvalidCredentials

	|server resp client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respDecoded _ WebUtils jsonDecode: (resp content) readStream.
	
	client close.
	server destroy.
	
	respExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (TusLibrosSystemFacade invalidUserOrPasswordErrorDescription); yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status').
	! !

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 14:32:43'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 14:32:43'!
ERROR!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 14:33:52' prior: 50976962!
test02CreateCartForInvalidCredentials

	|server resp client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respDecoded _ WebUtils jsonDecode: (resp content) readStream.
	
	client close.
	server destroy.
	
	respExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (systemFacade invalidUserOrPasswordErrorDescription); yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status').
	! !

!methodRemoval: TusLibrosRestAPIInterface class #invalidUserOrPasswordErrorDescription stamp: 'AF 11/19/2021 14:36:12'!
invalidUserOrPasswordErrorDescription
	^ 'INVALID_USERNAME_OR_PASSWORD'!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 14:39:13' prior: 50976843!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(systemFacade invalidUserOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 14:40:33' prior: 50976994!
test02CreateCartForInvalidCredentials

	|server resp client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respDecoded _ WebUtils jsonDecode: (resp content) readStream.
	
	client close.
	server destroy.
	
	respExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (systemFacade invalidUserAndOrPasswordErrorDescription); yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status').
	! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 14:41:34' prior: 50977024!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: '1|',(systemFacade invalidUserAndOrPasswordErrorDescription)] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 14:41:41'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 14:41:41'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 14:41:41'!
ERROR!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 14:42:29' prior: 50977055!
test02CreateCartForInvalidCredentials

	|server resp client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respDecoded _ WebUtils jsonMapFrom: (resp content) readStream.
	
	client close.
	server destroy.
	
	respExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (systemFacade invalidUserAndOrPasswordErrorDescription); yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status').
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 14:42:53' prior: 50976931!
test01CreateCartForValidCredentials

	|server resp client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respDecoded _ WebUtils jsonMapFrom: (resp content) readStream.
	
	client close.
	server destroy.
	
	respExpected := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status') .
	self assert: (respExpected at: 'cartId') equals: (respDecoded at: 'cartId') .! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 14:43:37' prior: 50977122!
test02CreateCartForInvalidCredentials

	|server resp client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respDecoded _ WebUtils jsonMapFrom: (resp content) readStream.
	
	client close.
	server destroy.
	
	respExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (systemFacade invalidUserAndOrPasswordErrorDescription); yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status').
	self assert: (respExpected at: 'errorDescription') equals: (respDecoded at: 'errorDescription').
	! !

----SNAPSHOT----(19 November 2021 14:43:44) CuisUniversity-4972.image priorSource: 20649843!

TusLibrosRestAPIInterface allInstances!

WebServer allInstances!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 14:45:56'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 14:45:56'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 14:45:56'!
ERROR!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 14:49:53' prior: 50977079!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: (WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
																			 add: 'errorDescription' -> systemFacade invalidUserAndOrPasswordErrorDescription;
																			 yourself))] 
				ifFalse: [request send500Response: anError messageText	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 14:51:04' prior: 50977215!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: (WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
																			 add: 'errorDescription' -> systemFacade invalidUserAndOrPasswordErrorDescription;
																			 yourself))] 
				ifFalse: [request send500Response: (WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
																			 add: 'errorDescription' -> anError messageText;
																			 yourself))	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 14:51:48' prior: 50977251!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: (WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
																			 add: 'errorDescription' -> anError messageText;
																			 yourself))] 
				ifFalse: [request send500Response: (WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
																			 add: 'errorDescription' -> anError messageText;
																			 yourself))	].
		]
	].
	
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 14:53:15' prior: 50977291!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 14:53:20'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 14:53:20'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 14:54:40'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 14:54:46'!
FAILURE!

WebServer allInstances!

TusLibrosRestAPIInterface allInstances!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance connections ].!

WebServer allInstancesDo: [:anInstance | anInstance connections].!

TusLibrosRestAPIInterface allInstances.!

TusLibrosRestAPIInterface allInstances.!

WebServer allInstances!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 15:01:55'!
PASSED!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:05:26'!
decodeJsonMapFrom: resp

	^ WebUtils jsonMapFrom: (resp content) readStream! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:05:26' prior: 50977146!
test01CreateCartForValidCredentials

	|server resp client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respDecoded _ self decodeJsonMapFrom: resp.
	
	client close.
	server destroy.
	
	respExpected := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status') .
	self assert: (respExpected at: 'cartId') equals: (respDecoded at: 'cartId') .! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:05:26' prior: 50977171!
test02CreateCartForInvalidCredentials

	|server resp client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	resp _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respDecoded _ self decodeJsonMapFrom: resp.
	
	client close.
	server destroy.
	
	respExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (systemFacade invalidUserAndOrPasswordErrorDescription); yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status').
	self assert: (respExpected at: 'errorDescription') equals: (respDecoded at: 'errorDescription').
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:06:01' prior: 50977402!
test01CreateCartForValidCredentials

	|server response client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	respDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	respExpected := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status') .
	self assert: (respExpected at: 'cartId') equals: (respDecoded at: 'cartId') .! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:06:12' prior: 50977452!
test01CreateCartForValidCredentials

	|server response client responseDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	respExpected := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	
	self assert: (respExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: (respExpected at: 'cartId') equals: (responseDecoded at: 'cartId') .! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:06:18' prior: 50977476!
test01CreateCartForValidCredentials

	|server response client responseDecoded responseExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	responseExpected := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: (responseExpected at: 'cartId') equals: (responseDecoded at: 'cartId') .! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:06:26' prior: 50977426!
test02CreateCartForInvalidCredentials

	|server response client respDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	respDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	respExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (systemFacade invalidUserAndOrPasswordErrorDescription); yourself.
	
	self assert: (respExpected at: 'status') equals: (respDecoded at: 'status').
	self assert: (respExpected at: 'errorDescription') equals: (respDecoded at: 'errorDescription').
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:06:32' prior: 50977526!
test02CreateCartForInvalidCredentials

	|server response client responseDecoded respExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	respExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (systemFacade invalidUserAndOrPasswordErrorDescription); yourself.
	
	self assert: (respExpected at: 'status') equals: (responseDecoded at: 'status').
	self assert: (respExpected at: 'errorDescription') equals: (responseDecoded at: 'errorDescription').
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:06:38' prior: 50977553!
test02CreateCartForInvalidCredentials

	|server response client responseDecoded responseExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	responseExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (systemFacade invalidUserAndOrPasswordErrorDescription); yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status').
	self assert: (responseExpected at: 'errorDescription') equals: (responseDecoded at: 'errorDescription').
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:09:17' prior: 50977580!
test02CreateCartForInvalidCredentials

	|server response client responseDecoded responseExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	responseExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (systemFacade invalidUserAndOrPasswordErrorDescription); yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status').
	self assert: (responseExpected at: 'errorDescription') equals: (responseDecoded at: 'errorDescription').
	! !

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 15:09:19'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 15:09:19'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 15:09:19'!
PASSED!

TusLibrosRestAPIInterface allInstances.!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

WebServer allInstancesDo: [:anInstance | anInstance connections].!

----SNAPSHOT----(19 November 2021 15:10:18) CuisUniversity-4972.image priorSource: 20657486!

WebServer allInstancesDo: [:anInstance | anInstance connections].!
!WebServer methodsFor: 'accessing' stamp: 'AF 11/19/2021 15:11:13' prior: 50958083!
connections
	"The active connection processes. Can only be examined after aquiring
	the WebServer's mutex."

	^connections! !
!WebServer methodsFor: 'accessing' stamp: 'AF 11/19/2021 15:11:22' prior: 50958103!
errorHandler: aBlock
	"The user-supplied error handler. If present the handler takes two arguments:
		* The error being caught by WebServer
		* The request the error occurred in.
	The user-supplied error handler can do whatever it wants, including calling
	WebServer's #handleError:request: method which is the default."

	errorHandler := aBlock.! !
!WebServer methodsFor: 'accessing' stamp: 'AF 11/19/2021 15:11:26' prior: 50958117!
listenerInterface
	"Returns the listener interface for the server"

	^interface! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:17:23'!
test03

	|server client cartId response responseDecoded responseExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ responseDecoded at: 'cartId'.
	
	response _ (client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', testObjectsFactory itemSellByTheStore, '&bookQuantity=1').
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .! !

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:17:28'!
ERROR!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:18:05' prior: 50977685!
test03

	|server client cartId response responseDecoded responseExpected|
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ responseDecoded at: 'cartId'.
	
	response _ (client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId asString,'&bookIsbn=', testObjectsFactory itemSellByTheStore, '&bookQuantity=1').
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .! !

WebServer allInstancesDo: [:anInstance | anInstance connections].
!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:18:25'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:21:50' prior: 50977330!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:23:16' prior: 50977756!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount of: book toCartIdentifiedAs: cartId.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	webServer startListener.
! !

----SNAPSHOT----(19 November 2021 15:24:01) CuisUniversity-4972.image priorSource: 20672048!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:27:09' prior: 50977816!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount of: book toCartIdentifiedAs: cartId.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:27:13'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:27:13'!
ERROR!
!WebServer methodsFor: 'initialize' stamp: 'AF 11/19/2021 15:29:39' prior: 50958029!
destroy
	"Destroys the receiver"

	self stopListener.
	self destroyConnections.
	listenerSocket ifNotNil:[listenerSocket destroy].

	"De-register the WebServer"
	(self class forUrl: self siteUrl ifAbsent:[self]) == self 
		ifTrue:[self class removeUrl: siteUrl]

! !

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:30:05'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:30:05'!
ERROR!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:32:21' prior: 50975274!
destroy
	
	webServer ifNotNil:[webServer destroy].
	webServer _ nil.! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:35:06' prior: 50977968!
destroy
	
	webServer ifNotNil:[webServer destroy].! !

TusLibrosRestAPIInterface allInstances.!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:35:46'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:37:25'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:37:48'!
ERROR!

TusLibrosRestAPIInterface allInstances.!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:39:35' prior: 50977881!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount of: book toCartIdentifiedAs: cartId.
			self halt.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:39:40'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:39:40'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:39:57'!
ERROR!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:40:49' prior: 50977993!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			self halt.
			systemFacade add: bookAmount of: book toCartIdentifiedAs: cartId.
			
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:40:54'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:40:54'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

----STARTUP---- (19 November 2021 15:41:33) as C:\Users\ferra\Desktop\windows64\windows64\CuisUniversity-4972.image!

!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:42:01' prior: 50977816!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
						
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			self halt.
			systemFacade add: bookAmount of: book toCartIdentifiedAs: cartId.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	webServer startListener.
! !

TusLibrosRestAPIInterface allInstances.!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:43:23'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:43:32'!
ERROR!

TusLibrosRestAPIInterface allInstances.!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:46:14'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:46:27'!
ERROR!

----STARTUP---- (19 November 2021 15:50:49) as C:\Users\ferra\Desktop\windows64\windows64\CuisUniversity-4972.image!


TusLibrosRestAPIInterface allInstances.!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:51:28' prior: 50975274!
destroy
	
	webServer ifNotNil:[webServer destroy].
	systemFacade _ nil.! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 15:51:32'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 15:51:33'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:51:34'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:51:34'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:52:28'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:52:28'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:52:46' prior: 50978229!
destroy
	
	webServer ifNotNil:[webServer destroy].
! !

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 15:54:49' prior: 50977816!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
			self Halt.			
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount of: book toCartIdentifiedAs: cartId.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:54:54'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 15:54:54'!
ERROR!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 15:58:26' prior: 50977501!
test01CreateCartForValidCredentials

	|server response client responseDecoded responseExpected|
	
	self setUp.
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	responseExpected := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: (responseExpected at: 'cartId') equals: (responseDecoded at: 'cartId') .! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:00:17'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:00:31'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:00:31'!
ERROR!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 16:00:42' prior: 50978335!
test01CreateCartForValidCredentials

	|server response client responseDecoded responseExpected|
	

	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	responseExpected := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: (responseExpected at: 'cartId') equals: (responseDecoded at: 'cartId') .! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:00:44'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:01:01'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:01:01'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

TusLibrosRestAPIInterface allInstances.!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:01:31'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:01:31'!
ERROR!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 16:02:17' prior: 50978267!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount of: book toCartIdentifiedAs: cartId.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:02:48'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:02:48'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:03:13'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:03:15'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:03:17'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:03:17'!
ERROR!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 16:03:44' prior: 50977717!
test03

	|server client cartId response responseDecoded responseExpected|
	self setUp.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ responseDecoded at: 'cartId'.
	
	response _ (client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId asString,'&bookIsbn=', testObjectsFactory itemSellByTheStore, '&bookQuantity=1').
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .! !

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 16:04:04' prior: 50978374!
test01CreateCartForValidCredentials

	|server response client responseDecoded responseExpected|
	
	self setUp.
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	responseExpected := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> 1; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: (responseExpected at: 'cartId') equals: (responseDecoded at: 'cartId') .! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:04:06'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:04:06'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:04:06'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:04:06'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:04:06'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:04:17'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:04:28'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:04:31'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:04:36'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:04:38'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:04:40'!
PASSED!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 16:04:50' prior: 50977608!
test02CreateCartForInvalidCredentials

	|server response client responseDecoded responseExpected|
	
	self setUp.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self invalidPassword).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	client close.
	server destroy.
	
	responseExpected := Dictionary new add: 'status' -> 1; add: 'errorDescription' -> (systemFacade invalidUserAndOrPasswordErrorDescription); yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status').
	self assert: (responseExpected at: 'errorDescription') equals: (responseDecoded at: 'errorDescription').
	! !

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:04:52'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:04:52'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:04:52'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:04:52'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:04:52'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:04:55'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:04:57'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:05:00'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:05:00'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:05:00'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:05:00'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

TusLibrosRestAPIInterface allInstances. !

TusLibrosRestAPIInterface allInstances. !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:06:20'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:06:21'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:06:24'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:06:24'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 16:07:35' prior: 50978424!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 16:07:48' prior: 50978697!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] 
				ifFalse: [request send500Response: response	].
		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:07:58'!
PASSED!

----SNAPSHOT----(19 November 2021 16:08:06) CuisUniversity-4972.image priorSource: 20679235!

TusLibrosRestAPIInterface allInstances. !

TusLibrosRestAPIInterface allInstances. !

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:08:45'!
PASSED!

TusLibrosRestAPIInterface allInstances. !

----SNAPSHOT----(19 November 2021 16:09:04) CuisUniversity-4972.image priorSource: 20709518!

TusLibrosRestAPIInterface allInstances. !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:31:21'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:31:21'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:31:21'!
PASSED!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 16:35:34' prior: 50978759!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] .
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			(anError messageText = systemFacade invalidUserAndOrPasswordErrorDescription ) 
				ifTrue: [request send200Response: response] .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 16:36:40' prior: 50978849!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response.
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response .
		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 16:36:42'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 16:36:42'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 16:36:42'!
PASSED!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 16:44:16'!
test04

	|server client cartId response responseDecoded responseExpected|
	self setUp.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.
	
	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', testObjectsFactory itemSellByTheStore, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/listCart?cartId=',cartId ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	
	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 16:45:04' prior: 50978971!
test04

	|server client cartId response responseDecoded responseExpected|
	self setUp.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.
	
	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', testObjectsFactory itemSellByTheStore, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/listCart?cartId=',cartId ).
	responseDecoded _ self decodeJsonMapFrom: response.
	

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .! !

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 16:45:06'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 16:51:27' prior: 50979003!
test04

	|server client cartId response responseDecoded responseExpected|
	self setUp.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.
	
	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', testObjectsFactory itemSellByTheStore, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/listCart?cartId=',cartId ).
	responseDecoded _ self decodeJsonMapFrom: response.
	

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 16:55:08' prior: 50979040!
test04

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.
	book _ testObjectsFactory itemSellByTheStore .
	
	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/listCart?cartId=',cartId ).
	responseDecoded _ self decodeJsonMapFrom: response.
	

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> ((Dictionary new) add: book -> 1 ;yourself) ; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .! !

WebUtils jsonEncode: ((Bag new) add: 'hola'; yourself).!

WebUtils jsonMap: ((Bag new) add: 'hola'; yourself) on: (WriteStream on:'').!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 17:09:48' prior: 50979072!
test04

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.
	book _ testObjectsFactory itemSellByTheStore.
	
	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/listCart?cartId=',cartId ).
	responseDecoded _ self decodeJsonMapFrom: response.
	

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> ((Dictionary new) add: book -> 1 ;yourself) ; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 17:10:56' prior: 50979111!
test04

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.
	book _ testObjectsFactory itemSellByTheStore.
	
	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/listCart?cartId=',cartId ).
	responseDecoded _ self decodeJsonMapFrom: response.
	

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> ((Dictionary new) add: book -> 1 ;yourself) ; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: ((responseExpected at: 'cartContents') at: book) equals: ((responseDecoded at: 'cartContents') at: book) .
	! !

|book|
book _ 'hola'.
Dictionary new add: book -> 1.!


|book|
book _ 'hola'.
Dictionary new add: book -> 1; at: book.!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 17:13:59'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:15:44' prior: 50978908!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response.
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId response |
			cartId := (request fields at:'cartId').	
			
			systemFacade listCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response .
		]
	].
	webServer startListener.
! !

----End fileIn of C:\Users\ferra\Desktop\windows64\windows64\Packages\TerseGuide.pck.st----!

----SNAPSHOT----(19 November 2021 17:18:17) CuisUniversity-4972.image priorSource: 20709832!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:24:00' prior: 50979194!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response.
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ Dictionary new.
			cartContents do:[:aBook | cartContentsDictionary add: aBook -> (cartContents occurrencesOf: aBook)] .
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response .
		]
	].
	webServer startListener.
! !

----SNAPSHOT----(19 November 2021 17:24:37) CuisUniversity-4972.image priorSource: 20817249!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 17:24:45'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 17:26:23'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 17:26:38'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 17:26:38'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 17:26:38'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 17:26:38'!
PASSED!

----SNAPSHOT----(19 November 2021 17:26:53) CuisUniversity-4972.image priorSource: 20819892!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'AF 11/19/2021 17:38:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'AF 11/19/2021 17:38:45'!
PASSED!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:42:46'!
errorResponseBasedOn: anError

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself)! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:42:46' prior: 50982194!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ self errorResponseBasedOn: anError.
			request send200Response: response.
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ Dictionary new.
			cartContents do:[:aBook | cartContentsDictionary add: aBook -> (cartContents occurrencesOf: aBook)] .
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:42:46' prior: 50982438!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ self errorResponseBasedOn: anError.
			request send200Response: response.
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ self errorResponseBasedOn: anError.
			request send200Response: response .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ Dictionary new.
			cartContents do:[:aBook | cartContentsDictionary add: aBook -> (cartContents occurrencesOf: aBook)] .
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
													     add: 'errorDescription' -> anError messageText;
													     yourself).
			request send200Response: response .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:42:47' prior: 50982514!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ self errorResponseBasedOn: anError.
			request send200Response: response.
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ self errorResponseBasedOn: anError.
			request send200Response: response .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ Dictionary new.
			cartContents do:[:aBook | cartContentsDictionary add: aBook -> (cartContents occurrencesOf: aBook)] .
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			|response|
			response _ self errorResponseBasedOn: anError.
			request send200Response: response .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:44:46' prior: 50982586!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self errorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ Dictionary new.
			cartContents do:[:aBook | cartContentsDictionary add: aBook -> (cartContents occurrencesOf: aBook)] .
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:47:22'!
xxxxx: aBag

	! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:48:37' prior: 50982719!
xxxxx: aBag
	
	|cartContentsDictionary|

	cartContentsDictionary _ Dictionary new.
	aBag do:[:anItem | cartContentsDictionary add: anItem -> (aBag occurrencesOf: anItem)] ! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:48:50' prior: 50982723!
xxxxx: aBag
	
	|cartContentsDictionary|

	cartContentsDictionary _ Dictionary new.
	aBag do:[:anItem | cartContentsDictionary add: anItem -> (aBag occurrencesOf: anItem)].
	
	^cartContentsDictionary .! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:50:55' prior: 50982732!
xxxxx: aBag
	
	|cartContentsDictionary|

	cartContentsDictionary _ Dictionary new.
	aBag do:[:anItem | cartContentsDictionary add: anItem -> (aBag occurrencesOf: anItem)].
	
	^cartContentsDictionary.! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:51:38' prior: 50982654!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self errorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self xxxxx: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:52:01'!
convertToDictionary: aBag
	
	|cartContentsDictionary|

	cartContentsDictionary _ Dictionary new.
	aBag do:[:anItem | cartContentsDictionary add: anItem -> (aBag occurrencesOf: anItem)].
	
	^cartContentsDictionary.! !
!TusLibrosRestAPIInterface methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 17:52:01' prior: 50982752!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self errorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !

!methodRemoval: TusLibrosRestAPIInterface #xxxxx: stamp: 'AF 11/19/2021 17:52:01'!
xxxxx: aBag
	
	|cartContentsDictionary|

	cartContentsDictionary _ Dictionary new.
	aBag do:[:anItem | cartContentsDictionary add: anItem -> (aBag occurrencesOf: anItem)].
	
	^cartContentsDictionary.!

----SNAPSHOT----(19 November 2021 17:56:32) CuisUniversity-4972.image priorSource: 20820592!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:58:32' prior: 50982825!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := (WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself)).
			request send200Response: response.
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self errorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:59:10' prior: 50982428!
errorResponseBasedOn: anError

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
									   add: 'errorDescription' -> anError messageText;
									   yourself)! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 17:59:42' prior: 50982899!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself).
			request send200Response: response.
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self errorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:00:58'!
responseForCreateCart: cartId

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself)! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:00:58' prior: 50982971!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId response |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
			
			response := self responseForCreateCart: cartId.
			request send200Response: response.
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self errorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:01:38' prior: 50983041!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
						
			request send200Response: (self responseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self errorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:02:32'!
jsonResponseForCreateCart: cartId

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself)! !
!TusLibrosRestAPIInterface methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 18:02:32' prior: 50983102!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self errorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self errorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !

!methodRemoval: TusLibrosRestAPIInterface #responseForCreateCart: stamp: 'AF 11/19/2021 18:02:32'!
responseForCreateCart: cartId

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; add: 'cartId' -> cartId; yourself)!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:02:52'!
jsonErrorResponseBasedOn: anError

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
									   add: 'errorDescription' -> anError messageText;
									   yourself)! !
!TusLibrosRestAPIInterface methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 18:02:52' prior: 50983169!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user psw cartId |
			user := (request fields at:'clientId').
			psw := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: psw.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self jsonErrorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !

!methodRemoval: TusLibrosRestAPIInterface #errorResponseBasedOn: stamp: 'AF 11/19/2021 18:02:52'!
errorResponseBasedOn: anError

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 1; 
									   add: 'errorDescription' -> anError messageText;
									   yourself)!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:03:28' prior: 50983245!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self jsonErrorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := (Dictionary new) add: 'status' -> 0; yourself.
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:04:25' prior: 50983314!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self jsonErrorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; yourself).
			request send200Response: response .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:04:37' prior: 50983375!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self jsonErrorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; yourself).
			request send200Response: response .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:05:09'!
jsonResponseForAddToCart

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; yourself)! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:05:09' prior: 50983436!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self jsonErrorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId response |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.
			
			response := self jsonResponseForAddToCart.
			request send200Response: response .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:05:29' prior: 50983503!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self jsonErrorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonResponseForAddToCart.
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself.
			
			request send200Response: (WebUtils jsonEncode: response) .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:05:59' prior: 50983562!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self jsonErrorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonResponseForAddToCart.
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself).
			
			request send200Response: response .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:06:30'!
jsonResponseForListCart: cartContentsDictionary

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; add: 'cartContents' -> cartContentsDictionary ; yourself)! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:06:30' prior: 50983620!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self jsonErrorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonResponseForAddToCart.
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary response |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			response := self jsonResponseForListCart: cartContentsDictionary.
			
			request send200Response: response .
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:06:51' prior: 50983687!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self jsonErrorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonResponseForAddToCart.
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.
			
			
			
			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:06:59' prior: 50983743!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 
			request send200Response: (self jsonErrorResponseBasedOn: anError).
		]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonResponseForAddToCart.
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |
			request send200Response: (self jsonErrorResponseBasedOn: anError) .
		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 18:07:00'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 18:07:00'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 18:07:00'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 18:07:00'!
PASSED!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:08:08' prior: 50983798!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonResponseForAddToCart.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 18:08:33'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 18:08:33'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 18:08:33'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 18:08:33'!
PASSED!

----SNAPSHOT----(19 November 2021 18:08:37) CuisUniversity-4972.image priorSource: 20839827!

----SNAPSHOT----(19 November 2021 18:16:03) CuisUniversity-4972.image priorSource: 20873026!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 18:21:33'!
test05

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=',cartId,'&ccn=').
	responseDecoded _ self decodeJsonMapFrom: response.
	

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> ((Dictionary new) add: book -> 1 ;yourself) ; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: ((responseExpected at: 'cartContents') at: book) equals: ((responseDecoded at: 'cartContents') at: book) .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 18:25:34' prior: 50983939!
test05

	|server client cartId book creditCard response responseDecoded responseExpected|
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	creditCard _ testObjectsFactory notExpiredCreditCard .
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=',cartId,'&ccn=', creditCard number, '&cced=', testObjectsFactory notExpiredMonthOfYear, '&cco=', testObjectsFactory notExpiredCreditCardOwner ).
	responseDecoded _ self decodeJsonMapFrom: response.
	

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> ((Dictionary new) add: book -> 1 ;yourself) ; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: ((responseExpected at: 'cartContents') at: book) equals: ((responseDecoded at: 'cartContents') at: book) .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 18:34:29' prior: 50983978!
test05

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=',cartId,'&ccn=', testObjectsFactory notExpiredCreditCardNumber , '&cced=', testObjectsFactory notExpiredMonthOfYear, '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.
	

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> ((Dictionary new) add: book -> 1 ;yourself) ; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: ((responseExpected at: 'cartContents') at: book) equals: ((responseDecoded at: 'cartContents') at: book) .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 18:37:16' prior: 50984023!
test05

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', testObjectsFactory notExpiredMonthOfYear,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.
	

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> ((Dictionary new) add: book -> 1 ;yourself) ; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: ((responseExpected at: 'cartContents') at: book) equals: ((responseDecoded at: 'cartContents') at: book) .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 18:37:53' prior: 50984067!
test05

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', testObjectsFactory notExpiredMonthOfYear,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; add: 'cartContents' -> ((Dictionary new) add: book -> 1 ;yourself) ; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: ((responseExpected at: 'cartContents') at: book) equals: ((responseDecoded at: 'cartContents') at: book) .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 18:49:27' prior: 50984113!
test05

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', testObjectsFactory notExpiredMonthOfYear,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	self assert: ((responseExpected at: 'cartContents') at: book) equals: ((responseDecoded at: 'cartContents') at: book) .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 18:49:31' prior: 50984159!
test05

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', testObjectsFactory notExpiredMonthOfYear,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 18:49:35'!
ERROR!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:54:30' prior: 50983866!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonResponseForAddToCart.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn') .	
			cardExpirationDate := (request fields at:'ccn') .	
			cardOwner := (request fields at:'ccn') .	
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:54:56'!
jsonSuccessfulResponse

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; yourself)! !
!TusLibrosRestAPIInterface methodsFor: 'as yet unclassified' stamp: 'AF 11/19/2021 18:54:56' prior: 50984245!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn') .	
			cardExpirationDate := (request fields at:'ccn') .	
			cardOwner := (request fields at:'ccn') .	
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !

!methodRemoval: TusLibrosRestAPIInterface #jsonResponseForAddToCart stamp: 'AF 11/19/2021 18:54:56'!
jsonResponseForAddToCart

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; yourself)!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 18:56:48' prior: 50984326!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn') .	
			cardExpirationDate := (request fields at:'ccn') .	
			cardOwner := (request fields at:'ccn') .	
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 18:58:07' prior: 50984202!
test05

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', testObjectsFactory notExpiredMonthOfYear asString,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 19:03:20' prior: 50984481!
test05

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', testObjectsFactory notExpiredMonthOfYear,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !

(Month month: DateAndTime now monthIndex year: DateAndTime now yearNumber) asString!

((Month month: DateAndTime now monthIndex year: DateAndTime now yearNumber) asString) asMonth!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 19:09:45' prior: 50984521!
test05

	|server client cartId book response responseDecoded responseExpected|
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', testObjectsFactory notExpiredMonthOfYear asString,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 19:10:20' prior: 50984407!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn') .	
			cardExpirationDate := (request fields at:'cced') asMonth.	
			cardOwner := (request fields at:'cco') .	
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 19:10:22'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 19:10:22'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 19:10:22'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 19:10:22'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:10:22'!
ERROR!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 19:10:57'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 19:10:58'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 19:10:59'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 19:11:01'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:11:02'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:11:02'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:11:22'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:11:22'!
FAILURE!

self content!

self contents!

self content!

TusLibrosRestAPIInterface allInstances. 
TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].
!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 19:15:21' prior: 50984606!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn') .	
			cardExpirationDate := (request fields at:'cced') asMonth.	
			cardOwner := (request fields at:'cco') .	
			
			self halt.
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:15:27'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:15:27'!
FAILURE!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].
!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:16:26'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:16:26'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:16:38'!
PASSED!

----SNAPSHOT----(19 November 2021 19:16:48) CuisUniversity-4972.image priorSource: 20873120!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:16:52'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:16:52'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:16:55'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 19:17:03'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 19:17:03'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 19:17:04'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 19:17:04'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:17:04'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:17:04'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:17:06'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 19:17:18'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 19:17:18'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 19:17:18'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 19:17:18'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:17:18'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:17:18'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:17:21'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 19:17:22'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 19:17:22'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 19:17:22'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 19:17:22'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:17:22'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:17:22'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:17:34'!
PASSED!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 19:19:29' prior: 50984729!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn') .	
			cardExpirationDate := (request fields at:'cced') asMonth.	
			cardOwner := (request fields at:'cco') .	
			
			self halt.
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 19:19:30'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 19:19:30'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 19:19:30'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 19:19:30'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:19:30'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:19:30'!
FAILURE!

----SNAPSHOT----(19 November 2021 19:19:39) CuisUniversity-4972.image priorSource: 20901412!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 19:22:05' prior: 50984898!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn') .	
			cardExpirationDate := (request fields at:'cced') asMonth.	
			cardOwner := (request fields at:'cco') .	
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'AF 11/19/2021 19:22:36' prior: 50975463!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	self halt.

	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumber
			ownedBy: anOwner
			expiringOn: anExpirationMonthOfYear ]
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 19:22:40'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 19:22:40'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 19:22:40'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 19:22:40'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:22:40'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:22:40'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'AF 11/19/2021 19:22:56' prior: 50985070!
checkOutCartIdentifiedAs: aCartId withCreditCardNumbered: aCreditCartNumber ownedBy: anOwner expiringOn: anExpirationMonthOfYear

	self
		withCartSessionIdentifiedAs: aCartId
		do: [ :cartSession | cartSession
			checkOutCartWithCreditCardNumbered: aCreditCartNumber
			ownedBy: anOwner
			expiringOn: anExpirationMonthOfYear ]
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'AF 11/19/2021 19:23:15'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'AF 11/19/2021 19:23:15'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'AF 11/19/2021 19:23:15'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'AF 11/19/2021 19:23:15'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:23:15'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:23:15'!
FAILURE!

----SNAPSHOT----(19 November 2021 19:23:21) CuisUniversity-4972.image priorSource: 20906892!

TusLibrosRestAPIInterface allInstances. 
TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!

----SNAPSHOT----(19 November 2021 19:24:53) CuisUniversity-4972.image priorSource: 20911499!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 19:25:07' prior: 50984995!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn') .	
			cardExpirationDate := (request fields at:'cced') asMonth.	
			cardOwner := (request fields at:'cco') .	
			
			self halt.
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:25:14'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:25:14'!
FAILURE!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 19:47:55' prior: 50984566!
test05

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ testObjectsFactory notExpiredMonthOfYear monthName, '%20',testObjectsFactory notExpiredMonthOfYear yearNumber.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 19:48:38' prior: 50985237!
test05

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ testObjectsFactory notExpiredMonthOfYear monthName,'%20',testObjectsFactory notExpiredMonthOfYear yearNumber.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:48:53'!
ERROR!

TusLibrosRestAPIInterface allInstances. 
TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].
!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 19:49:14' prior: 50985282!
test05

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ testObjectsFactory notExpiredMonthOfYear monthName,'%20',testObjectsFactory notExpiredMonthOfYear yearNumber asString.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !

----STARTUP---- (19 November 2021 19:50:15) as C:\Users\ferra\Desktop\windows64\windows64\CuisUniversity-4972.image!

!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 19:25:07' prior: 50984995!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn') .	
			cardExpirationDate := (request fields at:'cced') asMonth.	
			cardOwner := (request fields at:'cco') .	
			
			self halt.
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 19:47:55' prior: 50984566!
test05

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ testObjectsFactory notExpiredMonthOfYear monthName, '%20',testObjectsFactory notExpiredMonthOfYear yearNumber.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 19:48:38' prior: 50985458!
test05

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ testObjectsFactory notExpiredMonthOfYear monthName,'%20',testObjectsFactory notExpiredMonthOfYear yearNumber.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 19:49:14' prior: 50985503!
test05

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ testObjectsFactory notExpiredMonthOfYear monthName,'%20',testObjectsFactory notExpiredMonthOfYear yearNumber asString.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 19:51:01' prior: 50985383!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn').	
			cardExpirationDate := (request fields at:'cced') asMonth.	
			cardOwner := (request fields at:'cco').	
			
			self halt.
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 19:54:06' prior: 50985548!
test05

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ testObjectsFactory notExpiredMonthOfYear monthName,'%20',testObjectsFactory notExpiredMonthOfYear yearNumber asString.
	
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', testObjectsFactory notExpiredCreditCardOwner).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'AF 11/19/2021 19:59:00' prior: 50985668!
test05

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ testObjectsFactory notExpiredMonthOfYear monthName,'%20',testObjectsFactory notExpiredMonthOfYear yearNumber asString.
	
	creditCardOwnerHttpEncoded _ 'Juan%20Perez'.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 19:59:55'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 20:00:11'!
ERROR!

TusLibrosRestAPIInterface allInstances. 
TusLibrosRestAPIInterface allInstancesDo: [:anInstance | anInstance destroy].!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'AF 11/19/2021 20:00:40' prior: 50985593!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn').	
			cardExpirationDate := (request fields at:'cced') asMonth.	
			cardOwner := (request fields at:'cco').	
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	webServer startListener.
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 20:01:03'!
FAILURE!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 20:01:03'!
FAILURE!
!TusLibrosRestAPIInterfaceTest methodsFor: 'setup' stamp: 'AF 11/19/2021 20:02:30'!
debit: anAmount from: aCreditCard
! !

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'AF 11/19/2021 20:02:38'!
PASSED!

----SNAPSHOT----(19 November 2021 20:02:45) CuisUniversity-4972.image priorSource: 20912034!

----SNAPSHOT----(19 November 2021 20:02:52) CuisUniversity-4972.image priorSource: 20934592!

----SNAPSHOT----(19 November 2021 20:03:36) CuisUniversity-4972.image priorSource: 20934686!

----STARTUP---- (20 November 2021 15:42:12) as D:\001.Maca\2c2021\inge1\qa3\CuisUniversity-4972.image!


----End fileIn of D:\001.Maca\2c2021\inge1\qa3\TusLibros-Model.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa3\TusLibros-Tests.st----!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'MP 11/20/2021 15:44:59'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'MP 11/20/2021 15:44:59'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/20/2021 15:44:59'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'MP 11/20/2021 15:44:59'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'MP 11/20/2021 15:44:59'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'MP 11/20/2021 15:44:59'!
PASSED!

TusLibrosRestAPIInterface allInstances.!

TusLibrosRestAPIInterface do: [:instance | instance destroy].!

TusLibrosRestAPIInterface allInstances do: [:instance | instance destroy].!

----SNAPSHOT----(20 November 2021 15:45:41) CuisUniversity-4972.image priorSource: 21019572!

|x| !

|x| 
x _ WriteStream on: OrderedCollection new.
'Nov 2021' do: [:a | a = ' ' ifTrue: [x nextPutAll: '%20'] ifFalse: [x nextPutAll: a]].
!

'Nov 2021' do: [:a | a = ' ' ifTrue: [x nextPutAll: '%20'] ifFalse: [x nextPut: a]].!

sep _ Character space!

'Nov 2021' do: [:a | a = sep ifTrue: [x nextPutAll: '%20'] ifFalse: [x nextPut: a]].!

|x sep| 
sep _ Character space.
x _ WriteStream on: OrderedCollection new.
'Nov 2021' do: [:a | a = sep ifTrue: [x nextPutAll: '%20'] ifFalse: [x nextPut: a]].
!

'Nov 2021' do: [:a | a = sep ifTrue: [x nextPutAll: '%20'] ifFalse: [x nextPut: a]].!

|x sep| 
sep _ Character space.
x _ WriteStream on: OrderedCollection new.
'Nov 2021' do: [:a | a = sep ifTrue: [x nextPutAll: '%20'] ifFalse: [x nextPut: a]].
x.!

|x sep| 
sep _ Character space.
x _ WriteStream on: OrderedCollection new.
'Nov 2021' do: [:a | a = sep ifTrue: [x nextPutAll: '%20'] ifFalse: [x nextPut: a]].
x asString.!

x _ WriteStream on: OrderedCollection new.!

x print: String.!

x contents.!

|x sep| 
sep _ Character space.
x _ WriteStream on: OrderedCollection new.
'Nov 2021' do: [:a | a = sep ifTrue: [x nextPutAll: '%20'] ifFalse: [x nextPut: a]].
x contents.!

x print.!

String streamContents: x.!

String streamContents: [x].!

x originalContents.!

|x sep| 
sep _ Character space.
x _ WriteStream on: OrderedCollection new.
'Nov 2021' do: [:a | a = sep ifTrue: [x nextPutAll: '%20'] ifFalse: [x nextPut: a]].
x originalContents.!

x contents.!
!TusLibrosRestAPIInterfaceTest methodsFor: 'nil' stamp: 'MP 11/20/2021 16:10:06'!
correctlyEncodeSpacesForUrlRequestParameter: aParameter
	
	^ aParameter copyReplaceAll: ' ' with: '%20'. ! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'as yet unclassified' stamp: 'MP 11/20/2021 16:10:28'!
encodeSpacesForUrl: aParameter
	
	^ aParameter copyReplaceAll: ' ' with: '%20'. ! !

!methodRemoval: TusLibrosRestAPIInterfaceTest #correctlyEncodeSpacesForUrlRequestParameter: stamp: 'MP 11/20/2021 16:11:16'!
correctlyEncodeSpacesForUrlRequestParameter: aParameter
	
	^ aParameter copyReplaceAll: ' ' with: '%20'. !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:15:05' prior: 50989899!
test05

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'MP 11/20/2021 16:15:33'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'MP 11/20/2021 16:15:33'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/20/2021 16:15:33'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'MP 11/20/2021 16:15:33'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'MP 11/20/2021 16:15:34'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'MP 11/20/2021 16:15:34'!
PASSED!

----SNAPSHOT----(20 November 2021 16:15:37) CuisUniversity-4972.image priorSource: 21085111!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:16:41'!
test06listPurhcases

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	response _ (client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded).
	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	responseExpected _ (Dictionary new) add: 'status' -> 0; yourself.
	
	self assert: (responseExpected at: 'status') equals: (responseDecoded at: 'status') .
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:18:49' prior: 50990700!
test06listPurhcases

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded.
	responseDecoded _ self decodeJsonMapFrom: response.

	response _ (client httpGet: 'http://localhost:8080/listPurchases?clientId=',self validUser,'&password=',self validUserPassword ).

	client close.
	server destroy.
	
	! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:19:12' prior: 50990748!
test06listPurhcases

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded.
	responseDecoded _ self decodeJsonMapFrom: response.

	response _ (client httpGet: 'http://localhost:8080/listPurchases?clientId=',self validUser,'&password=',self validUserPassword ).

	client close.
	server destroy.
	
	responseExpected _ 'u'.! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:26:57' prior: 50990795!
test06listPurhcases

	|server client cartId book response responseDecoded responseExpected creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded.
	responseDecoded _ self decodeJsonMapFrom: response.

	response _ (client httpGet: 'http://localhost:8080/listPurchases?clientId=',self validUser,'&password=',self validUserPassword ).

	client close.
	server destroy.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice ) equals: (response)! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:27:26' prior: 50990842!
test06listPurhcases

	|server client cartId book response responseDecoded creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded.
	responseDecoded _ self decodeJsonMapFrom: response.

	response _ (client httpGet: 'http://localhost:8080/listPurchases?clientId=',self validUser,'&password=',self validUserPassword ).

	client close.
	server destroy.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice ) equals: (responseDecoded)! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:27:42' prior: 50990891!
test06listPurhcases

	|server client cartId book response responseDecoded creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded.
	responseDecoded _ self decodeJsonMapFrom: response.

	response _ (client httpGet: 'http://localhost:8080/listPurchases?clientId=',self validUser,'&password=',self validUserPassword ).

	client close.
	server destroy.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice ) equals: (responseDecoded at: self validBook)! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:27:57' prior: 50990940!
test06listPurhcases

	|server client cartId book response responseDecoded creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=1'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded.
	responseDecoded _ self decodeJsonMapFrom: response.

	response _ (client httpGet: 'http://localhost:8080/listPurchases?clientId=',self validUser,'&password=',self validUserPassword ).

	client close.
	server destroy.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice ) equals: (responseDecoded at: book)! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:30:52' prior: 50990989!
test06listPurhcases

	|server client cartId book response responseDecoded creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=2'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded.
	responseDecoded _ self decodeJsonMapFrom: response.

	response _ (client httpGet: 'http://localhost:8080/listPurchases?clientId=',self validUser,'&password=',self validUserPassword ).

	client close.
	server destroy.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice * 2) equals: (responseDecoded at: book)! !

!testRun: #TusLibrosRestAPIInterfaceTest #test06listPurhcases stamp: 'MP 11/20/2021 16:30:53'!
ERROR!

!testRun: #TusLibrosRestAPIInterfaceTest #test06listPurhcases stamp: 'MP 11/20/2021 16:31:20'!
FAILURE!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:32:06' prior: 50991038!
test06listPurhcases

	|server client cartId book response responseDecoded creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=2'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded.
	responseDecoded _ self decodeJsonMapFrom: response.

	response _ (client httpGet: 'http://localhost:8080/listPurchases?clientId=',self validUser,'&password=',self validUserPassword ).

	client close.
	server destroy.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice * 2) equals: ((responseDecoded at: 'list') at: book)! !

!testRun: #TusLibrosRestAPIInterfaceTest #test06listPurhcases stamp: 'MP 11/20/2021 16:32:07'!
ERROR!

TusLibrosRestAPIInterface allInstances do: [:instance | instance destroy].!
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'MP 11/20/2021 16:34:16' prior: 50989082!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn').	
			cardExpirationDate := (request fields at:'cced') asMonth.	
			cardOwner := (request fields at:'cco').	
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	
	webServer addService: '/listPurchases' action:[:request | 
		[
			| user password list |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			list := systemFacade listPurchasesOf: user authenticatingWith: password.
						
			request send200Response: (self jsonResponseForListPurchases: list).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].

	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'MP 11/20/2021 16:34:50' prior: 50991149!
initializeWith: aPortNumber and: aSystemFacade    
	
	port := aPortNumber.
	systemFacade := aSystemFacade.
	
	webServer := WebServer new listenOn: port.
	
	webServer addService: '/createCart' action:[:request | 
		[
			| user password cartId |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			cartId := systemFacade createCartFor: user authenticatedWith: password.
						
			request send200Response: (self jsonResponseForCreateCart: cartId).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].
	
	webServer addService: '/addToCart' action:[:request | 
		[
			| book bookAmount cartId |
			cartId := (request fields at:'cartId').
			book := (request fields at:'bookIsbn').
			bookAmount := (request fields at:'bookQuantity').		
			
			systemFacade add: bookAmount asNumber of: book toCartIdentifiedAs: cartId asNumber.

			request send200Response: self jsonSuccessfulResponse.
		 ] 
		on: Error 
		do: [ :anError | request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/listCart' action:[:request | 
		[
			| cartId cartContents cartContentsDictionary |
			cartId := (request fields at:'cartId').	
			
			cartContents _ systemFacade listCartIdentifiedAs: cartId asNumber.
			cartContentsDictionary _ self convertToDictionary: cartContents.

			request send200Response: (self jsonResponseForListCart: cartContentsDictionary).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].

	webServer addService: '/checkOutCart' action:[:request | 
		[
			| cartId cardNumber cardExpirationDate cardOwner|
			cartId := (request fields at:'cartId') asNumber.	
			cardNumber := (request fields at:'ccn').	
			cardExpirationDate := (request fields at:'cced') asMonth.	
			cardOwner := (request fields at:'cco').	
			
			systemFacade checkOutCartIdentifiedAs: cartId withCreditCardNumbered: cardNumber  ownedBy: cardOwner expiringOn: cardExpirationDate .
			
			request send200Response: (self jsonSuccessfulResponse).
		 ] 
		on: Error 
		do: [ :anError |			request send200Response: (self jsonErrorResponseBasedOn: anError) .		]
	].
	
	webServer addService: '/listPurchases' action:[:request | 
		[
			| user password list |
			user := (request fields at:'clientId').
			password := (request fields at:'password').
				
			list := systemFacade listPurchasesOf: user authenticatingWith: password.
						
			request send200Response: (self jsonResponseForListPurchases: list).
		 ] 
		on: Error 
		do: [ :anError |			 request send200Response: (self jsonErrorResponseBasedOn: anError).]
	].

	webServer startListener.
! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'MP 11/20/2021 16:35:22'!
jsonResponseForListPurchases: purchasesDictionary

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; add: 'list' -> purchasesDictionary ; yourself)! !
!TusLibrosRestAPIInterface methodsFor: 'initialization' stamp: 'MP 11/20/2021 16:35:48' prior: 50991326!
jsonResponseForListPurchases: purchasesDictionary

	^ WebUtils jsonEncode: ((Dictionary new) add: 'status' -> 0; add: 'purchases' -> purchasesDictionary ; yourself)! !
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:35:52' prior: 50991094!
test06listPurhcases

	|server client cartId book response responseDecoded creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=2'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded.
	responseDecoded _ self decodeJsonMapFrom: response.

	response _ (client httpGet: 'http://localhost:8080/listPurchases?clientId=',self validUser,'&password=',self validUserPassword ).

	client close.
	server destroy.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice * 2) equals: ((responseDecoded at: 'purchases') at: book)! !

!testRun: #TusLibrosRestAPIInterfaceTest #test06listPurhcases stamp: 'MP 11/20/2021 16:36:00'!
ERROR!

TusLibrosRestAPIInterface allInstances do: [:instance | instance destroy].!

----SNAPSHOT----(20 November 2021 16:44:48) CuisUniversity-4972.image priorSource: 21089463!

TusLibrosRestAPIInterface allInstances do: [:instance | instance destroy].!

!testRun: #TusLibrosRestAPIInterfaceTest #test06listPurhcases stamp: 'MP 11/20/2021 16:44:56'!
ERROR!
!TusLibrosRestAPIInterfaceTest methodsFor: 'tests' stamp: 'MP 11/20/2021 16:45:36' prior: 50991344!
test06listPurhcases

	|server client cartId book response responseDecoded creditCardExpirationHttpEncoded creditCardOwnerHttpEncoded |
	self setUp.
	book _ testObjectsFactory itemSellByTheStore.
	
	server _ TusLibrosRestAPIInterface listeningOn: 8080 communicateWith: systemFacade.
	
	client _ WebClient new.
	response _ (client httpGet: 'http://localhost:8080/createCart?clientId=',self validUser,'&password=',self validUserPassword ).
	responseDecoded _ self decodeJsonMapFrom: response.
	
	cartId _ (responseDecoded at: 'cartId') asString.

	client httpGet: 'http://localhost:8080/addToCart?cartId=',cartId,'&bookIsbn=', book, '&bookQuantity=2'.
	
	creditCardExpirationHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredMonthOfYear asString. 
	
	creditCardOwnerHttpEncoded _ self encodeSpacesForUrl: testObjectsFactory notExpiredCreditCardOwner.
	
	client httpGet: 'http://localhost:8080/checkOutCart?cartId=', cartId,
			    										    '&ccn=', testObjectsFactory notExpiredCreditCardNumber, 
			    										  '&cced=', creditCardExpirationHttpEncoded,
			    										   '&cco=', creditCardOwnerHttpEncoded.

	response _ (client httpGet: 'http://localhost:8080/listPurchases?clientId=',self validUser,'&password=',self validUserPassword ).

	responseDecoded _ self decodeJsonMapFrom: response.

	client close.
	server destroy.
	
	self assert: (testObjectsFactory itemSellByTheStorePrice * 2) equals: ((responseDecoded at: 'purchases') at: book)! !

TusLibrosRestAPIInterface allInstances.!

TusLibrosRestAPIInterface allInstances do: [:instance | instance destroy].!

----SNAPSHOT----(20 November 2021 16:45:52) CuisUniversity-4972.image priorSource: 21111926!

!testRun: #TusLibrosRestAPIInterfaceTest #test06listPurhcases stamp: 'MP 11/20/2021 16:45:54'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test01CreateCartForValidCredentials stamp: 'MP 11/20/2021 16:45:54'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test02CreateCartForInvalidCredentials stamp: 'MP 11/20/2021 16:45:54'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test03 stamp: 'MP 11/20/2021 16:45:54'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test04 stamp: 'MP 11/20/2021 16:45:55'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test05 stamp: 'MP 11/20/2021 16:45:55'!
PASSED!

!testRun: #TusLibrosRestAPIInterfaceTest #test06listPurhcases stamp: 'MP 11/20/2021 16:45:55'!
PASSED!

----SNAPSHOT----(20 November 2021 16:47:16) CuisUniversity-4972.image priorSource: 21113914!