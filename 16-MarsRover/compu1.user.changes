

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (16 September 2021 16:06:59) as D:\001.Maca\2c2021\inge1\qa2\CuisUniversity-4532.image!


----End fileIn of D:\001.Maca\2c2021\inge1\qa2\Numero-Exercise.st----!

----STARTUP---- (16 September 2021 16:35:43) as D:\001.Maca\2c2021\inge1\qa2\CuisUniversity-4532.image!


----End fileIn of D:\001.Maca\2c2021\inge1\qa2\Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/16/2021 16:36:34'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/16/2021 16:36:34'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/16/2021 16:36:34'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/16/2021 16:36:34'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/16/2021 16:36:34'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'MK 9/16/2021 16:36:35'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'MK 9/16/2021 16:36:36'!
PASSED!

!methodRemoval: Entero #divideByGCDWith: stamp: 'MK 9/16/2021 16:37:42'!
divideByGCDWith: aValue
	|greatestCommonDivisor |
	greatestCommonDivisor := self greatestCommonDivisorWith: aValue. 
	^self // greatestCommonDivisor.!

----SNAPSHOT----(16 September 2021 16:39:08) CuisUniversity-4532.image priorSource: 16885703!
!Fraccion methodsFor: 'initialization' stamp: 'MK 9/16/2021 16:41:48' prior: 50863722!
initializeWith: aNumerator over: aDenominator
	
	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	"Las dejamos a pesar de que sean ifs ya que por mail dijeron no hay problema. Se podrian borrar ya que los chequeos estan en otro lado - Grupo 1"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !

----SNAPSHOT----(16 September 2021 16:41:51) CuisUniversity-4532.image priorSource: 17040987!

----SNAPSHOT----(16 September 2021 18:12:00) CuisUniversity-4532.image priorSource: 17041717!

----STARTUP---- (16 September 2021 20:40:27) as D:\001.Maca\2c2021\inge1\qa2\CuisUniversity-4532.image!


----End fileIn of D:\001.Maca\2c2021\inge1\qa2\Packages\TerseGuide.pck.st----!

----SNAPSHOT----(17 September 2021 11:38:24) CuisUniversity-4532.image priorSource: 17041812!

----STARTUP---- (18 September 2021 11:10:04) as D:\001.Maca\2c2021\inge1\qa2\CuisUniversity-4532.image!


!classRemoval: #FraccionWithDenominatorOne stamp: 'MK 9/18/2021 11:11:30'!
FraccionWithPositiveDenominator subclass: #FraccionWithDenominatorOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #FraccionSimplifiedWithDenominatorGreaterThanOne stamp: 'MK 9/18/2021 11:11:38'!
FraccionWithPositiveDenominator subclass: #FraccionSimplifiedWithDenominatorGreaterThanOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #FraccionNotSimplified stamp: 'MK 9/18/2021 11:11:38'!
FraccionWithPositiveDenominator subclass: #FraccionNotSimplified
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #FraccionWithPositiveDenominator stamp: 'MK 9/18/2021 11:11:39'!
Fraccion subclass: #FraccionWithPositiveDenominator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #FraccionWithNumeratorZero stamp: 'MK 9/18/2021 11:11:39'!
Fraccion subclass: #FraccionWithNumeratorZero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #FraccionWithNegativeDenominator stamp: 'MK 9/18/2021 11:11:40'!
Fraccion subclass: #FraccionWithNegativeDenominator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #FraccionWithDenominatorZero stamp: 'MK 9/18/2021 11:11:40'!
Fraccion subclass: #FraccionWithDenominatorZero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Fraccion stamp: 'MK 9/18/2021 11:11:40'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroZero stamp: 'MK 9/18/2021 11:11:41'!
Entero subclass: #EnteroZero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroOne stamp: 'MK 9/18/2021 11:11:41'!
EnteroPositive subclass: #EnteroOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroGreaterThanOne stamp: 'MK 9/18/2021 11:11:42'!
EnteroPositive subclass: #EnteroGreaterThanOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroPositive stamp: 'MK 9/18/2021 11:11:42'!
Entero subclass: #EnteroPositive
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegative stamp: 'MK 9/18/2021 11:11:43'!
Entero subclass: #EnteroNegative
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'MK 9/18/2021 11:11:43'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'MK 9/18/2021 11:11:44'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'MK 9/18/2021 11:11:44'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of D:\001.Maca\2c2021\inge1\repoEntrega\15-Stack\Stack-Exercise.st----!

Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:18:24'!
Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'MK 9/18/2021 11:18:37' prior: 50867387 overrides: 16896425!
initialize

	elementContainerList := OrderedCollection new.
	dictionary := Dictionary new.! !

Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList popDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:19:11'!
Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList popDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'MK 9/18/2021 11:19:17' prior: 50867459 overrides: 16896425!
initialize

	elementContainerList := OrderedCollection new.
	popDictionary := Dictionary new.! !

Object subclass: #StackStateHandler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackStateHandler category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:30:15'!
Object subclass: #StackStateHandler
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #StackStateHandler
	instanceVariableNames: 'dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackStateHandler category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:34:24'!
Object subclass: #StackStateHandler
	instanceVariableNames: 'dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary pushDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackStateHandler category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:37:54'!
Object subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary pushDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!StackStateHandler methodsFor: 'nil' stamp: 'MK 9/18/2021 11:46:52' overrides: 16896425!
initialize
	
	popDictionary := Dictionary new.
	
	popDictionary add: 0 -> [self changeToErrorState]; add: 1 -> [self changeToEmptyState].
	
	pushDictionary := Dictionary new.
	
	pushDictionary add: 0 -> [self changeToNotEmptyState].! !

Object subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary pushDictionary state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackStateHandler category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:47:34'!
Object subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary pushDictionary state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackStateHandler subclass: #ErrorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #ErrorState category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:48:07'!
StackStateHandler subclass: #ErrorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackStateHandler subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyState category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:48:15'!
StackStateHandler subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackStateHandler subclass: #NotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NotEmptyState category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:48:29'!
StackStateHandler subclass: #NotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!StackStateHandler methodsFor: 'as yet unclassified' stamp: 'MK 9/18/2021 11:51:04' prior: 50867523 overrides: 16896425!
initialize
	
	popDictionary := Dictionary new.
	pushDictionary := Dictionary new.
	state := EmptyState new.
		
	popDictionary add: 0 -> [self changeToErrorState]; add: 1 -> [self changeToEmptyState].
	pushDictionary add: 0 -> [self changeToNotEmptyState].! !

OOStack subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary pushDictionary state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:54:51'!
Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'MK 9/18/2021 11:54:56' prior: 50867479 overrides: 16896425!
initialize

	elementContainerList := OrderedCollection new.! !

OOStack subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary pushDictionary state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackStateHandler category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:55:06'!
OOStack subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary pushDictionary state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyState category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:55:48'!
OOStack subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #ErrorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #ErrorState category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:55:54'!
OOStack subclass: #ErrorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #NotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NotEmptyState category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:56:01'!
OOStack subclass: #NotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList stateHandler'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'MK 9/18/2021 11:58:13'!
Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList stateHandler'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'MK 9/18/2021 11:58:55' prior: 50867613 overrides: 16896425!
initialize

	elementContainerList := OrderedCollection new.
	stateHandler := StackStateHandler new.! !
!StackStateHandler methodsFor: 'nil' stamp: 'MK 9/18/2021 11:59:24'!
changeToErrorState
	state := ErrorState new.! !
!StackStateHandler methodsFor: 'as yet unclassified' stamp: 'MK 9/18/2021 11:59:35'!
changeToEmtyState
	state := EmptyState new.! !
!StackStateHandler methodsFor: 'as yet unclassified' stamp: 'MK 9/18/2021 11:59:42'!
changeToEmptyState
	state := EmptyState new.! !
!StackStateHandler methodsFor: 'as yet unclassified' stamp: 'MK 9/18/2021 11:59:46'!
changeToNotEmptyState
	state := NotEmptyState new.! !

!methodRemoval: StackStateHandler #changeToEmtyState stamp: 'MK 9/18/2021 11:59:53'!
changeToEmtyState
	state := EmptyState new.!

----SNAPSHOT----(18 September 2021 12:00:08) CuisUniversity-4532.image priorSource: 17135603!
!StackStateHandler methodsFor: 'as yet unclassified' stamp: 'MK 9/18/2021 12:00:28'!
changeTo: aState
	state := aState new.! !

!methodRemoval: StackStateHandler #changeToEmptyState stamp: 'MK 9/18/2021 12:00:35'!
changeToEmptyState
	state := EmptyState new.!

!methodRemoval: StackStateHandler #changeToErrorState stamp: 'MK 9/18/2021 12:00:39'!
changeToErrorState
	state := ErrorState new.!

!methodRemoval: StackStateHandler #changeToNotEmptyState stamp: 'MK 9/18/2021 12:00:56'!
changeToNotEmptyState
	state := NotEmptyState new.!
!StackStateHandler methodsFor: 'as yet unclassified' stamp: 'MK 9/18/2021 12:01:16' prior: 50867584 overrides: 50867679!
initialize
	
	popDictionary := Dictionary new.
	pushDictionary := Dictionary new.
	state := EmptyState new.
		
	popDictionary add: 0 -> [self changeTo: ErrorState]; add: 1 -> [self changeTo: EmptyState].
	pushDictionary add: 0 -> [self changeTo: NotEmptyState].! !
!OOStack methodsFor: 'operations' stamp: 'MK 9/18/2021 12:02:22' prior: 50867402!
push: anItem

	elementContainerList add: anItem.! !
!StackStateHandler methodsFor: 'nil' stamp: 'MK 9/18/2021 12:10:03' overrides: 50867741!
push: anItem
	
	(pushDictionary at: self size ifAbsent: []) value: anItem! !
!StackStateHandler methodsFor: 'initialization' stamp: 'MK 9/18/2021 12:11:43' prior: 50867730 overrides: 50867679!
initialize
	
	popDictionary := Dictionary new.
	pushDictionary := Dictionary new.
	state := EmptyState new.
		
	popDictionary add: 0 -> [self changeTo: ErrorState]; add: 1 -> [self changeTo: EmptyState].
	pushDictionary add: 0 -> [:anItem | self changeTo: NotEmptyState.
						state push: anItem].! !
!StackStateHandler methodsFor: 'initialization' stamp: 'MK 9/18/2021 12:12:02' prior: 50867753 overrides: 50867679!
initialize
	
	popDictionary := Dictionary new.
	state := EmptyState new.
		
	popDictionary add: 0 -> [self changeTo: ErrorState]; add: 1 -> [self changeTo: EmptyState].! !
!StackStateHandler methodsFor: 'initialization' stamp: 'MK 9/18/2021 12:12:06' prior: 50867767 overrides: 50867679!
initialize
	
	popDictionary := Dictionary new.
	state := EmptyState new.
		
	popDictionary add: 0 -> [self changeTo: ErrorState]; add: 1 -> [self changeTo: EmptyState].! !
!StackStateHandler methodsFor: 'as yet unclassified' stamp: 'MK 9/18/2021 12:12:32' prior: 50867746 overrides: 50867741!
push: anItem
	
	self changeTo: NotEmptyState.
	state push: anItem! !

OOStack subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackStateHandler category: 'Stack-Exercise' stamp: 'MK 9/18/2021 12:12:43'!
OOStack subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #State
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #State category: 'Stack-Exercise' stamp: 'MK 9/18/2021 12:50:51'!
Object subclass: #State
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRenamed: #State as: #StackState stamp: 'MK 9/18/2021 12:51:13'!
Smalltalk renameClassNamed: #State as: #StackState!

StackState subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyState category: 'Stack-Exercise' stamp: 'MK 9/18/2021 12:52:17'!
StackState subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackState subclass: #ErrorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #ErrorState category: 'Stack-Exercise' stamp: 'MK 9/18/2021 12:52:24'!
StackState subclass: #ErrorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

StackState subclass: #NotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NotEmptyState category: 'Stack-Exercise' stamp: 'MK 9/18/2021 12:52:31'!
StackState subclass: #NotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackStateHandler category: 'Stack-Exercise' stamp: 'MK 9/18/2021 12:52:42'!
Object subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!methodRemoval: StackStateHandler #push: stamp: 'MK 9/18/2021 12:52:53'!
push: anItem
	
	self changeTo: NotEmptyState.
	state push: anItem!
!StackStateHandler methodsFor: 'initialization' stamp: 'MK 9/18/2021 16:02:39' prior: 50867776 overrides: 16896425!
initialize
	
	| str |
	popDictionary := Dictionary new.
	state := EmptyState new.
		
	popDictionary add: 0 -> [self changeTo: ErrorState]; add: 1 -> [self changeTo: EmptyState].
	
	str := 'Maca'.
	str ! !
!StackStateHandler methodsFor: 'initialization' stamp: 'MK 9/18/2021 16:02:51' prior: 50867871 overrides: 16896425!
initialize
	
	
	popDictionary := Dictionary new.
	state := EmptyState new.
		
	popDictionary add: 0 -> [self changeTo: ErrorState]; add: 1 -> [self changeTo: EmptyState].
	! !

str := 'Maca'.!

str find: 'M'.!

str := 'Maca'.!

str findString: 'M'.!

str findString: ' '.!

str findString: ' '.  !

str findString: ' '.  !

str := 'Ma ca'.!

str findString: ' '. !

str := 'Maca'.!

str findString: ' '. !

str := 'Maca'.!

str findString: ' '.  !

str findString: ' '.!

str findString: ' '.!

str findString: ' '.!

str findString: ' '.!

str := 'Ma ca'.!

str findString: ' '.!

str := ' Maca'.!

str findString: ' '.!

----SNAPSHOT----(18 September 2021 16:09:55) CuisUniversity-4532.image priorSource: 17153848!

----STARTUP---- (19 September 2021 17:26:31) as D:\001.Maca\2c2021\inge1\qa2\CuisUniversity-4532.image!


!classRemoval: #StackStateHandler stamp: 'MK 9/19/2021 17:27:25'!
Object subclass: #StackStateHandler
	instanceVariableNames: 'popDictionary state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NotEmptyState stamp: 'MK 9/19/2021 17:27:26'!
StackState subclass: #NotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #ErrorState stamp: 'MK 9/19/2021 17:27:26'!
StackState subclass: #ErrorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #EmptyState stamp: 'MK 9/19/2021 17:27:27'!
StackState subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #StackState stamp: 'MK 9/19/2021 17:27:27'!
Object subclass: #StackState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefix stamp: 'MK 9/19/2021 17:27:28'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'MK 9/19/2021 17:27:28'!
Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList stateHandler'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'MK 9/19/2021 17:27:28'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'MK 9/19/2021 17:27:29'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of D:\001.Maca\2c2021\inge1\repoEntrega\15-Stack\Stack-Exercise.st----!

Object subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyState category: 'Stack-Exercise' stamp: 'MK 9/19/2021 17:32:45'!
Object subclass: #EmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRenamed: #EmptyState as: #StackEmptyState stamp: 'MK 9/19/2021 17:32:57'!
Smalltalk renameClassNamed: #EmptyState as: #StackEmptyState!

Object subclass: #StackNotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #StackNotEmptyState category: 'Stack-Exercise' stamp: 'MK 9/19/2021 17:33:08'!
Object subclass: #StackNotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRenamed: #StackEmptyState as: #OOStackEmptyState stamp: 'MK 9/19/2021 17:33:25'!
Smalltalk renameClassNamed: #StackEmptyState as: #OOStackEmptyState!

!classRenamed: #StackNotEmptyState as: #OOStackNotEmptyState stamp: 'MK 9/19/2021 17:33:39'!
Smalltalk renameClassNamed: #StackNotEmptyState as: #OOStackNotEmptyState!

Object subclass: #OOStackStateMachine
	instanceVariableNames: 'topDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackStateMachine category: 'Stack-Exercise' stamp: 'MK 9/19/2021 17:33:55'!
Object subclass: #OOStackStateMachine
	instanceVariableNames: 'topDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackStateMachine subclass: #OOStackNotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNotEmptyState category: 'Stack-Exercise' stamp: 'MK 9/19/2021 17:34:04'!
OOStackStateMachine subclass: #OOStackNotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackStateMachine subclass: #OOStackEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackEmptyState category: 'Stack-Exercise' stamp: 'MK 9/19/2021 17:34:13'!
OOStackStateMachine subclass: #OOStackEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOStackStateMachine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackStateMachine category: 'Stack-Exercise' stamp: 'MK 9/19/2021 17:34:33'!
Object subclass: #OOStackStateMachine
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackStateMachine methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:34:58' prior: 50868174 overrides: 16896425!
initialize
	
	! !

----SNAPSHOT----(19 September 2021 17:35:03) CuisUniversity-4532.image priorSource: 17160109!
!SentenceFinderByPrefixTest class methodsFor: 'nil' stamp: 'MK 9/19/2021 17:35:32'!
isValidFor: aStack
	! !

!methodRemoval: SentenceFinderByPrefixTest class #isValidFor: stamp: 'MK 9/19/2021 17:35:48'!
isValidFor: aStack
	!
!OOStackStateMachine class methodsFor: 'nil' stamp: 'MK 9/19/2021 17:36:29'!
isValidFor: aStack
	self subclassResponsibility.! !
!OOStackEmptyState class methodsFor: 'nil' stamp: 'MK 9/19/2021 17:36:42' overrides: 50868355!
isValidFor: aStack
	! !
!OOStackEmptyState class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:36:51' prior: 50868360 overrides: 50868355!
isValidFor: aStack
	^ aStack isEmpty! !
!OOStackNotEmptyState class methodsFor: 'nil' stamp: 'MK 9/19/2021 17:37:09' overrides: 50868355!
isValidFor: aStack
	^ aStack isEmpty not.! !
!OOStackEmptyState class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:37:14' prior: 50868365 overrides: 50868355!
isValidFor: aStack
	^ aStack isEmpty.! !
!OOStackStateMachine methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:37:48' prior: 50868181!
topOf: aStack
"	|size|
	size := aStack size.
	(topDictionary at: size ifAbsent:[^aStack topNotEmpty]) value: aStack. "
	^ self subclassResponsibility .! !
!OOStackStateMachine methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:37:50' prior: 50868381!
topOf: aStack
"	|size|
	size := aStack size.
	(topDictionary at: size ifAbsent:[^aStack topNotEmpty]) value: aStack. "
	^ self subclassResponsibility.! !
!OOStackEmptyState methodsFor: 'nil' stamp: 'MK 9/19/2021 17:38:23' overrides: 50868390!
topOf: aStack
	! !
!OOStackEmptyState methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:38:51' prior: 50868398 overrides: 50868390!
topOf: aStack
	^ aStack! !
!OOStackEmptyState methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:39:36' prior: 50868403 overrides: 50868390!
topOf: aStack
	^ aStack class topEmpty ! !
!OOStackEmptyState methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:39:39' prior: 50868408 overrides: 50868390!
topOf: aStack
	^ aStack topEmpty ! !
!OOStackNotEmptyState methodsFor: 'nil' stamp: 'MK 9/19/2021 17:40:07' overrides: 50868390!
topOf: aStack
	^ aStack topNotEmpty ! !
!OOStackStateMachine methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:40:41' prior: 50868390!
topOf: aStack
	^ self subclassResponsibility.! !

!methodRemoval: OOStackStateMachine #initialize stamp: 'MK 9/19/2021 17:40:49'!
initialize
	
	!
!OOStackStateMachine methodsFor: 'nil' stamp: 'MK 9/19/2021 17:42:10' overrides: 16896425!
initialize
	! !
!OOStackStateMachine methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:43:40' prior: 50868432 overrides: 16896425!
initialize
	|aValue|
	^ (self subclasses detect:[:aEnteroClass | aEnteroClass matchesWith: aValue]) with: aValue.! !
!OOStackStateMachine class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:45:22'!
canHandle: aStack
	self subclassResponsibility.! !
!OOStackNotEmptyState class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:45:23' overrides: 50868444!
canHandle: aStack
	^ aStack isEmpty not.! !
!OOStackEmptyState class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:45:23' overrides: 50868444!
canHandle: aStack
	^ aStack isEmpty.! !

!methodRemoval: OOStackStateMachine class #isValidFor: stamp: 'MK 9/19/2021 17:45:23'!
isValidFor: aStack
	self subclassResponsibility.!

!methodRemoval: OOStackNotEmptyState class #isValidFor: stamp: 'MK 9/19/2021 17:45:23'!
isValidFor: aStack
	^ aStack isEmpty not.!

!methodRemoval: OOStackEmptyState class #isValidFor: stamp: 'MK 9/19/2021 17:45:23'!
isValidFor: aStack
	^ aStack isEmpty.!
!OOStackStateMachine methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:47:08'!
initializeWith: aStack
	^ (self subclasses detect:[:aStackState | aStackState canHandle: aStack]) with: aStack.! !

!methodRemoval: OOStackStateMachine #initializeWith: stamp: 'MK 9/19/2021 17:47:26'!
initializeWith: aStack
	^ (self subclasses detect:[:aStackState | aStackState canHandle: aStack]) with: aStack.!

!methodRemoval: OOStackStateMachine #initialize stamp: 'MK 9/19/2021 17:47:28'!
initialize
	|aValue|
	^ (self subclasses detect:[:aEnteroClass | aEnteroClass matchesWith: aValue]) with: aValue.!
!OOStackStateMachine class methodsFor: 'nil' stamp: 'MK 9/19/2021 17:47:36'!
initializeWith: aStack
	^ (self subclasses detect:[:aStackState | aStackState canHandle: aStack]) with: aStack.! !
!OOStackStateMachine class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:49:45'!
with: aStack
	^ self new initializeWith: aStack! !
!OOStackStateMachine class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:50:09' prior: 50868498!
with: aStack
	^ self new initializeWith: aStack! !
!OOStackStateMachine class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:51:25' prior: 50868503!
with: aStack
	^ (self subclasses detect:[:aStackState | aStackState canHandle: aStack]) with: aStack.! !

!methodRemoval: OOStackStateMachine class #initializeWith: stamp: 'MK 9/19/2021 17:52:02'!
initializeWith: aStack
	^ (self subclasses detect:[:aStackState | aStackState canHandle: aStack]) with: aStack.!
!OOStackStateMachine methodsFor: 'nil' stamp: 'MK 9/19/2021 17:52:26'!
initializeWith: aStack
	^ self subclassResponsibility.! !
!OOStackEmptyState class methodsFor: 'nil' stamp: 'MK 9/19/2021 17:53:01' overrides: 50868508!
with: aStack
	^ self new initializeWith: aStack! !
!OOStackEmptyState class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:53:02' prior: 50868525 overrides: 50868508!
with: aStack
	^ self new initializeWith: aStack.! !
!OOStackNotEmptyState class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:53:22' overrides: 50868508!
with: aStack
	^ self new initializeWith: aStack.! !

Object subclass: #OOStackStateMachine
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackStateMachine category: 'Stack-Exercise' stamp: 'MK 9/19/2021 17:53:52'!
Object subclass: #OOStackStateMachine
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStackEmptyState methodsFor: 'nil' stamp: 'MK 9/19/2021 17:54:18' overrides: 50868520!
initializeWith: aStack
	stack := aStack.! !
!OOStackNotEmptyState methodsFor: 'nil' stamp: 'MK 9/19/2021 17:54:33' overrides: 50868520!
initializeWith: aStack
	stack := aStack.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'MK 9/19/2021 17:55:30'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'MK 9/19/2021 17:55:30'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 17:55:30'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'MK 9/19/2021 17:55:30'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'MK 9/19/2021 17:55:30'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'MK 9/19/2021 17:55:30'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'MK 9/19/2021 17:55:30'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 17:55:30'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'MK 9/19/2021 17:55:30'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 17:55:30'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 17:55:37'!
ERROR!
!OOStackNotEmptyState methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:56:08' prior: 50868419 overrides: 50868424!
topOf: aStack
	^ aStack topNotEmpty.! !
!OOStackEmptyState methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:56:13' prior: 50868414 overrides: 50868424!
topOf: aStack
	^ aStack topEmpty.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'MK 9/19/2021 17:56:27'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'MK 9/19/2021 17:56:27'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 17:56:27'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'MK 9/19/2021 17:56:27'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'MK 9/19/2021 17:56:27'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'MK 9/19/2021 17:56:27'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'MK 9/19/2021 17:56:27'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 17:56:27'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'MK 9/19/2021 17:56:27'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 17:56:27'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 17:56:36'!
ERROR!
!OOStackStateMachine class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 17:57:37' prior: 50868444!
canHandle: aStack
	^ self subclassResponsibility.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'MK 9/19/2021 17:57:58'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'MK 9/19/2021 17:57:58'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 17:57:58'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'MK 9/19/2021 17:57:58'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'MK 9/19/2021 17:57:58'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'MK 9/19/2021 17:57:58'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'MK 9/19/2021 17:57:58'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 17:57:58'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'MK 9/19/2021 17:57:58'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 17:57:58'!
FAILURE!

----SNAPSHOT----(19 September 2021 17:58:02) CuisUniversity-4532.image priorSource: 17174193!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 17:58:03'!
ERROR!
!OOStack methodsFor: 'initialization' stamp: 'MK 9/19/2021 17:59:22' prior: 50868110 overrides: 16896425!
initialize
	elementContainerList  := OrderedCollection new.
	stateMachine := OOStackStateMachine with: self. 
	

	! !
!OOStack methodsFor: 'operations' stamp: 'MK 9/19/2021 18:00:09' prior: 50868135!
top
	^stateMachine topOf.
	
! !
!OOStackStateMachine methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:00:40'!
topOf
	^ self subclassResponsibility.! !

!methodRemoval: OOStackStateMachine #topOf: stamp: 'MK 9/19/2021 18:00:43'!
topOf: aStack
	^ self subclassResponsibility.!
!OOStackEmptyState methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:00:52' overrides: 50868702!
topOf
	^ stack topEmpty.! !

!methodRemoval: OOStackEmptyState #topOf: stamp: 'MK 9/19/2021 18:00:54'!
topOf: aStack
	^ aStack topEmpty.!
!OOStackNotEmptyState methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:01:06' overrides: 50868702!
topOf
	^ stack topNotEmpty.! !

!methodRemoval: OOStackNotEmptyState #topOf: stamp: 'MK 9/19/2021 18:01:08'!
topOf: aStack
	^ aStack topNotEmpty.!
!OOStackStateMachine methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:01:39'!
top
	^ self subclassResponsibility.! !
!OOStackEmptyState methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:01:39' overrides: 50868727!
top
	^ stack topEmpty.! !
!OOStackNotEmptyState methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:01:40' overrides: 50868727!
top
	^ stack topNotEmpty.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:01:40' prior: 50868698!
top
	^stateMachine top.
	
! !

!methodRemoval: OOStackStateMachine #topOf stamp: 'MK 9/19/2021 18:01:40'!
topOf
	^ self subclassResponsibility.!

!methodRemoval: OOStackEmptyState #topOf stamp: 'MK 9/19/2021 18:01:40'!
topOf
	^ stack topEmpty.!

!methodRemoval: OOStackNotEmptyState #topOf stamp: 'MK 9/19/2021 18:01:40'!
topOf
	^ stack topNotEmpty.!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'MK 9/19/2021 18:01:47'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'MK 9/19/2021 18:01:47'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 18:01:47'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'MK 9/19/2021 18:01:47'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'MK 9/19/2021 18:01:47'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'MK 9/19/2021 18:01:47'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'MK 9/19/2021 18:01:47'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 18:01:48'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'MK 9/19/2021 18:01:48'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 18:01:48'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 18:01:53'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 18:02:52'!
ERROR!
!OOStackNotEmptyState class methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:03:58' prior: 50868450 overrides: 50868647!
canHandle: aStack
	^ aStack isEmpty not.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'MK 9/19/2021 18:04:38'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'MK 9/19/2021 18:04:39'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 18:04:39'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'MK 9/19/2021 18:04:39'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'MK 9/19/2021 18:04:39'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'MK 9/19/2021 18:04:39'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'MK 9/19/2021 18:04:39'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 18:04:39'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'MK 9/19/2021 18:04:39'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 18:04:39'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 18:04:41'!
ERROR!

Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'MK 9/19/2021 18:07:19'!
Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'MK 9/19/2021 18:07:27' prior: 50868691 overrides: 16896425!
initialize
	elementContainerList  := OrderedCollection new.
	

	! !
!OOStack methodsFor: 'operations' stamp: 'MK 9/19/2021 18:08:12' prior: 50868741!
top
	^ (OOStackStateMachine with: self) top.
	
! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'MK 9/19/2021 18:08:28'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'MK 9/19/2021 18:08:28'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'MK 9/19/2021 18:08:28'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'MK 9/19/2021 18:08:28'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'MK 9/19/2021 18:08:28'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'MK 9/19/2021 18:08:29'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'MK 9/19/2021 18:08:29'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 18:08:29'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'MK 9/19/2021 18:08:29'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'MK 9/19/2021 18:08:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:09:24'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:09:24'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:10:21' prior: 50868087!
test01StackEmptyShouldReturnEmptyCollection

	|stack prefixMatch finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Macarena'.
	
	self assert: prefixMatch isEmpty! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:10:45'!
ERROR!
!SentenceFinderByPrefix class methodsFor: 'initialize' stamp: 'MK 9/19/2021 18:11:45' prior: 50868239!
with: aStack
	^ self new initializeWith: aStack! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:11:49'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:11:49'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:12:36' prior: 50868225!
validatePrefix: prefix
	^(prefix findString: ' ') ~= 0
	
! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:12:42'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:12:42'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:13:30'!
ERROR!

|stack prefixMatch finder|!

stack := OOStack new.!

finder := SentenceFinderByPrefix with: stack.!

finder validatePrefix: 'Macarena'.!

'Macarena' findString: ' ' !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:16:02' prior: 50868926!
validatePrefix: prefix
	^(prefix findString: ' ') = 0
	
! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:16:09'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:16:09'!
ERROR!

finder := SentenceFinderByPrefix with: stack.!

finder validatePrefix: 'Macarena'. !

"prefixMatch := finder find: 'Macarena'."!

finder validatePrefix: 'Macarena'. !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:17:21' prior: 50868201!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithEmptySpaces].
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		[sentence beginsWith: aPrefix] ifTrue: [prefixMatched add: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:18:02' prior: 50868967!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithEmptySpaces].
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		[sentence beginsWith: aPrefix] ifTrue: [prefixMatched add: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:18:05'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:21:37'!
test02InvalidPrefixShouldThrowError

	|stack prefixMatch finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Pre fix'.
	
	self assert: prefixMatch isEmpty! !

!testRun: #SentenceFinderByPrefixTest #test02InvalidPrefixShouldThrowError stamp: 'MK 9/19/2021 18:21:38'!
ERROR!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:39:41' prior: 50869008!
test02InvalidPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.

	self
		should	: [finder find: 'Pre fix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix  ].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:40:33' prior: 50869022!
test02InvalidPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.

	self
		should	: [finder find: 'Pre fix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithEmptySpaces].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:42:52' prior: 50869034!
test02InvalidPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should	: [finder find: 'Pre fix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithEmptySpaces].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:44:47' prior: 50869047!
test02InvalidPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: 'Pre fix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithEmptySpaces].! !

----SNAPSHOT----(19 September 2021 18:45:09) CuisUniversity-4532.image priorSource: 17185060!

!testRun: #SentenceFinderByPrefixTest #test02InvalidPrefixShouldThrowError stamp: 'MK 9/19/2021 18:47:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:47:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02InvalidPrefixShouldThrowError stamp: 'MK 9/19/2021 18:47:16'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:47:32' prior: 50869060!
test02InvalidPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: 'Invalid prefix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithEmptySpaces].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:47:45'!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: 'Invalid prefix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithEmptySpaces].! !

!methodRemoval: SentenceFinderByPrefixTest #test02InvalidPrefixShouldThrowError stamp: 'MK 9/19/2021 18:47:48'!
test02InvalidPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: 'Invalid prefix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithEmptySpaces].!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:48:03'!
test02EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithEmptySpaces].! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:49:19' prior: 50868948!
validatePrefix: prefix
	^((prefix findString: ' ') = 0) & prefix isEmpty not.
	
! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:49:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 18:49:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 18:49:22'!
PASSED!
!SentenceFinderByPrefix class methodsFor: 'error' stamp: 'MK 9/19/2021 18:50:10'!
invalidPrefixWithSpaces

	^'The prefix should not contain any spaces'! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:50:11' prior: 50869126!
test02EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithSpaces].! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:50:11' prior: 50868986!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		[sentence beginsWith: aPrefix] ifTrue: [prefixMatched add: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:50:11' prior: 50869100!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: 'Invalid prefix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithSpaces].! !

!methodRemoval: SentenceFinderByPrefix class #invalidPrefixWithEmptySpaces stamp: 'MK 9/19/2021 18:50:11'!
invalidPrefixWithEmptySpaces

	^'The prefix should not contain any spaces'!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:50:13'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 18:50:14'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 18:50:14'!
PASSED!
!SentenceFinderByPrefix class methodsFor: 'error' stamp: 'MK 9/19/2021 18:50:42'!
invalidPrefixEmpty

	^'The prefix should not be empty'! !
!SentenceFinderByPrefix class methodsFor: 'error' stamp: 'MK 9/19/2021 18:50:54' prior: 50869224!
invalidPrefixEmpty

	^'The prefix should not be empty'! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:53:16' prior: 50869175!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty].
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		[sentence beginsWith: aPrefix] ifTrue: [prefixMatched add: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:53:25' prior: 50869139!
validatePrefix: prefix
	^(prefix findString: ' ') = 0.
	
! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:54:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 18:54:00'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 18:54:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 18:54:00'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:54:12' prior: 50869194!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: 'Invalid prefix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty ].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:54:15' prior: 50869276!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: 'Invalid prefix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty].! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:54:26'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 18:54:26'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 18:54:26'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:54:46' prior: 50869289!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: 'Invalid prefix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithSpaces ].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:54:48' prior: 50869313!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: 'Invalid prefix']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithSpaces].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:54:56' prior: 50869162!
test02EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty ].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:54:57' prior: 50869339!
test02EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:54:59'!
test03EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty].! !

!methodRemoval: SentenceFinderByPrefixTest #test02EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 18:55:01'!
test02EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: '']
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty].!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 18:55:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 18:55:27'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 18:55:27'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 18:58:34'!
test04StackWithOneElementWithPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tom'.
	
	self assert: prefixMatch isEmpty! !

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementWithPrefix stamp: 'MK 9/19/2021 18:58:36'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 18:59:47' prior: 50869235!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty].
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched add: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:00:08'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:00:08'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:00:08'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementWithPrefix stamp: 'MK 9/19/2021 19:00:08'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementWithPrefix stamp: 'MK 9/19/2021 19:00:08'!
FAILURE!

OrderedCollection with: 'hola'!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:01:50' prior: 50869400!
test04StackWithOneElementWithPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tom'.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementWithPrefix stamp: 'MK 9/19/2021 19:01:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:01:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:01:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:01:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementWithPrefix stamp: 'MK 9/19/2021 19:01:52'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:02:03'!
test04StackWithOneElementThatMatchesPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tom'.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !

!methodRemoval: SentenceFinderByPrefixTest #test04StackWithOneElementWithPrefix stamp: 'MK 9/19/2021 19:02:06'!
test04StackWithOneElementWithPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tom'.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:02:36'!
test05StackWithOneElementThatDoesNotMatchPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Agus'.
	
	self assert: prefixMatch = (OrderedCollection new).! !

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 19:02:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:02:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:02:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:02:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 19:02:39'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 19:02:39'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:03:31'!
test05StackWithOneElementThatDoesNotMatchPrefixCase

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'tomas'.
	
	self assert: prefixMatch = (OrderedCollection new).! !

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 19:03:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:03:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:03:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:03:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 19:03:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 19:03:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 19:03:33'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:03:43'!
test06StackWithOneElementThatDoesNotMatchPrefixCase

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'tomas'.
	
	self assert: prefixMatch = (OrderedCollection new).! !

!methodRemoval: SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 19:03:45'!
test05StackWithOneElementThatDoesNotMatchPrefixCase

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'tomas'.
	
	self assert: prefixMatch = (OrderedCollection new).!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:05:18'!
test06StackWithMultipleMatches

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'tomas'.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:05:23'!
test07StackWithMultipleMatches

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'tomas'.
	
	self assert: prefixMatch = (OrderedCollection new).! !

!methodRemoval: SentenceFinderByPrefixTest #test06StackWithMultipleMatches stamp: 'MK 9/19/2021 19:05:32'!
test06StackWithMultipleMatches

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'tomas'.
	
	self assert: prefixMatch = (OrderedCollection new).!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:07:30' prior: 50869617!
test07StackWithMultipleMatches

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'Tomas estuvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'Tomas estuvo aqui'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tomas'.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:08:09' prior: 50869639!
test07StackWithMultipleMatches

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'Tomas estuvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'Tomas estuvo aqui'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tomas'.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas' with: 'Tomas estuvo' with: 'Tomas estuvo aqui').! !

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 19:08:14'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:09:46' prior: 50869415!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty].
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addLast: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:09:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:09:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:09:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 19:09:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 19:09:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 19:09:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 19:09:50'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 19:09:50'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:10:21' prior: 50869675!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty].
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:10:23'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:10:24'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:10:24'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 19:10:24'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 19:10:24'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 19:10:24'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 19:10:24'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:11:54'!
test08StackWithMultipleMatchesButWrongCases

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'Tomas estuvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'Tomas estuvo aqui'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tomas'.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas' with: 'Tomas estuvo' with: 'Tomas estuvo aqui').! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:12:23' prior: 50869774!
test08StackWithMultipleMatchesButWrongCases

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'tOmAs estUvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'TOMAS ESTUVO AQUI!!!!!!'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tomas'.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 19:12:28' prior: 50869792!
test08StackWithMultipleMatchesButWrongCases

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'tOmAs estUvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'TOMAS ESTUVO AQUI!!!!!!'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tomas'.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 19:12:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:12:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:12:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:12:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 19:12:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 19:12:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 19:12:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 19:12:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 19:12:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:14:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:14:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:14:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 19:14:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 19:14:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 19:14:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 19:14:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 19:14:05'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:19:21' prior: 50869256!
validatePrefix: prefix
	^((prefix findString: ' ') = 0) & (prefix isEmpty not).
	
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:20:00' prior: 50869727!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	self validatePrefix: aPrefix.
	(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty].
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:20:46' prior: 50869890!
validatePrefix: prefix
	^((prefix findString: ' ') = 0) & (prefix isEmpty not).
	
	"(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty]."! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:21:46' prior: 50869896!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty].
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:22:12' prior: 50869919!
validatePrefix: prefix
	^((prefix findString: ' ') = 0) & (prefix isEmpty not).
	
	"(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty]."! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:22:57'!
prefixHasSpaces: aPrefix
	^((aPrefix findString: ' ') ~= 0).
	
	"(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty]."! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:23:05'!
prefixHasNoSpaces: aPrefix
	^((aPrefix findString: ' ') = 0).
	
	"(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty]."! !

!methodRemoval: SentenceFinderByPrefix #prefixHasSpaces: stamp: 'MK 9/19/2021 19:23:08'!
prefixHasSpaces: aPrefix
	^((aPrefix findString: ' ') ~= 0).
	
	"(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty]."!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:23:14' prior: 50869975!
prefixHasNoSpaces: aPrefix
	^((aPrefix findString: ' ') = 0).! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:23:42'!
prefixIsNotEmpty: aPrefix
	^aPrefix isEmpty not.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:24:33' prior: 50869953!
validatePrefix: prefix
	self prefixHasNoSpaces: prefix.
	self prefixIsNotEmpty: prefix.

	^((prefix findString: ' ') = 0) & (prefix isEmpty not).
	
	"(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty]."! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:24:54' prior: 50870006!
validatePrefix: aPrefix
	self prefixHasNoSpaces: aPrefix.
	self prefixIsNotEmpty: aPrefix.

	^((aPrefix findString: ' ') = 0) & (aPrefix isEmpty not).
	
	"(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty]."! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:25:36' prior: 50870020!
validatePrefix: aPrefix
	self prefixHasNoSpaces: aPrefix.
	self prefixIsNotEmpty: aPrefix.
	
	"(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty]."! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:26:57'!
assertPrefixHasNoSpaces: aPrefix
	^((aPrefix findString: ' ') = 0).! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:26:57' prior: 50870034!
validatePrefix: aPrefix
	self assertPrefixHasNoSpaces: aPrefix.
	self prefixIsNotEmpty: aPrefix.
	
	"(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty]."! !

!methodRemoval: SentenceFinderByPrefix #prefixHasNoSpaces: stamp: 'MK 9/19/2021 19:26:57'!
prefixHasNoSpaces: aPrefix
	^((aPrefix findString: ' ') = 0).!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:27:08'!
assertPrefixIsNotEmpty: aPrefix
	^aPrefix isEmpty not.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:27:09' prior: 50870052!
validatePrefix: aPrefix
	self assertPrefixHasNoSpaces: aPrefix.
	self assertPrefixIsNotEmpty: aPrefix.
	
	"(self validatePrefix: aPrefix) ifFalse: [^self error: self class invalidPrefixWithSpaces].
	(aPrefix isEmpty) ifTrue: [^self error: self class invalidPrefixEmpty]."! !

!methodRemoval: SentenceFinderByPrefix #prefixIsNotEmpty: stamp: 'MK 9/19/2021 19:27:09'!
prefixIsNotEmpty: aPrefix
	^aPrefix isEmpty not.!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:27:27' prior: 50870046!
assertPrefixHasNoSpaces: aPrefix
	^((aPrefix findString: ' ') = 0) ifFalse: [^self error: self class invalidPrefixWithSpaces].! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:27:49' prior: 50870069!
assertPrefixIsNotEmpty: aPrefix
	^aPrefix isEmpty ifTrue: [^self error: self class invalidPrefixEmpty].! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:28:14' prior: 50870075!
validatePrefix: aPrefix
	self assertPrefixHasNoSpaces: aPrefix.
	self assertPrefixIsNotEmpty: aPrefix.! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:28:16'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:28:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:28:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 19:28:16'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 19:28:16'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 19:28:16'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 19:28:16'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 19:28:16'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:28:20'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:28:43' prior: 50869931!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	self validatePrefix: aPrefix.
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:29:08'!
assertPrefixIsValid: aPrefix
	self assertPrefixHasNoSpaces: aPrefix.
	self assertPrefixIsNotEmpty: aPrefix.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:29:08' prior: 50870148!
find: aPrefix
	|sentence auxiliaryStack prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !

!methodRemoval: SentenceFinderByPrefix #validatePrefix: stamp: 'MK 9/19/2021 19:29:08'!
validatePrefix: aPrefix
	self assertPrefixHasNoSpaces: aPrefix.
	self assertPrefixIsNotEmpty: aPrefix.!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:29:15'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:29:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:29:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 19:29:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 19:29:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 19:29:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 19:29:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 19:29:16'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:32:10'!
fetchMatchingElementsInStack: aPrefix
	|sentence auxiliaryStack prefixMatched|
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:32:39' prior: 50870226!
fetchMatchingElementsInStack: aPrefix
	|sentence auxiliaryStack prefixMatched|
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:35:23'!
fetchMatchingElementsInStack: aPrefix usingAuxiliaryStack: aStack
	|sentence prefixMatched|
	prefixMatched := OrderedCollection new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		aStack push: sentence.
	].
	^ prefixMatched! !

!methodRemoval: SentenceFinderByPrefix #fetchMatchingElementsInStack: stamp: 'MK 9/19/2021 19:35:32'!
fetchMatchingElementsInStack: aPrefix
	|sentence auxiliaryStack prefixMatched|
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:36:04' prior: 50870172!
find: aPrefix
	|auxiliaryStack prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	prefixMatched := OrderedCollection new.
	auxiliaryStack := OOStack new.
	self fetchMatchingElementsInStack: aPrefix usingAuxiliaryStack: auxiliaryStack.
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:36:26' prior: 50870279!
find: aPrefix
	|auxiliaryStack prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	
	auxiliaryStack := OOStack new.
	prefixMatched := self fetchMatchingElementsInStack: aPrefix usingAuxiliaryStack: auxiliaryStack.
	
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack auxiliaryStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:38:15' prior: 50870293!
find: aPrefix
	|auxiliaryStack prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	
	prefixMatched := self fetchMatchingElementsInStack: aPrefix usingAuxiliaryStack: auxiliaryStack.
	
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
	^prefixMatched! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack auxStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'MK 9/19/2021 19:38:24'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack auxStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:38:43' prior: 50870312!
find: aPrefix
	|prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	
	prefixMatched := self fetchMatchingElementsInStack: aPrefix usingAuxiliaryStack: auxStack.
	
	[auxStack isEmpty not] whileTrue: [
		stack push: auxStack pop.
	].
	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:38:47' prior: 50870338!
find: aPrefix
	|prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	
	prefixMatched := self fetchMatchingElementsInStack: aPrefix.
	
	[auxStack isEmpty not] whileTrue: [
		stack push: auxStack pop.
	].
	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:39:30'!
fetchMatchingElementsInStack: aPrefix
	|sentence prefixMatched|
	prefixMatched := OrderedCollection new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxStack push: sentence.
	].
	^ prefixMatched! !

!methodRemoval: SentenceFinderByPrefix #fetchMatchingElementsInStack:usingAuxiliaryStack: stamp: 'MK 9/19/2021 19:39:35'!
fetchMatchingElementsInStack: aPrefix usingAuxiliaryStack: aStack
	|sentence prefixMatched|
	prefixMatched := OrderedCollection new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		aStack push: sentence.
	].
	^ prefixMatched!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:39:54' prior: 50870350!
find: aPrefix
	|prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	
	prefixMatched := self fetchMatchingElementsInStack: aPrefix.
	
	[auxStack isEmpty not] whileTrue: [
		stack push: auxStack pop.
	].

	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:40:45'!
fetchElementsInStackMatching: aPrefix
	|sentence prefixMatched|
	prefixMatched := OrderedCollection new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxStack push: sentence.
	].
	^ prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:40:45' prior: 50870387!
find: aPrefix
	|prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	
	prefixMatched := self fetchElementsInStackMatching: aPrefix.
	
	[auxStack isEmpty not] whileTrue: [
		stack push: auxStack pop.
	].

	^prefixMatched! !

!methodRemoval: SentenceFinderByPrefix #fetchMatchingElementsInStack: stamp: 'MK 9/19/2021 19:40:46'!
fetchMatchingElementsInStack: aPrefix
	|sentence prefixMatched|
	prefixMatched := OrderedCollection new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxStack push: sentence.
	].
	^ prefixMatched!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:41:32'!
restoreStack
	[auxStack isEmpty not] whileTrue: [
		stack push: auxStack pop.
	].
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:41:48' prior: 50870410!
find: aPrefix
	|prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	
	prefixMatched := self fetchElementsInStackMatching: aPrefix.
	
	self restoreStack.

	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:41:55' prior: 50870439!
find: aPrefix
	|prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	
	prefixMatched := self fetchElementsInStackMatching: aPrefix.

	^prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:42:03' prior: 50870397!
fetchElementsInStackMatching: aPrefix
	|sentence prefixMatched|
	prefixMatched := OrderedCollection new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxStack push: sentence.
	].
	self restoreStack.
	^ prefixMatched! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 19:42:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 19:42:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 19:42:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 19:42:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 19:42:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 19:42:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 19:42:07'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 19:42:07'!
ERROR!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'MK 9/19/2021 19:42:35'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack auxiliaryStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:42:35' prior: 50870457!
fetchElementsInStackMatching: aPrefix
	|sentence prefixMatched|
	prefixMatched := OrderedCollection new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].
	self restoreStack.
	^ prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:42:35' prior: 50870433!
restoreStack
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'MK 9/19/2021 19:42:39'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:43:31' prior: 50870509!
fetchElementsInStackMatching: aPrefix
	|sentence prefixMatched auxiliaryStack|
	auxiliaryStack := OOStack new.
	prefixMatched := OrderedCollection new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].
	self restoreStackFrom: auxiliaryStack.
	^ prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:43:54'!
restoreStackFrom: aStack
	[aStack isEmpty not] whileTrue: [
		stack push: aStack pop.
	].
! !

!methodRemoval: SentenceFinderByPrefix #restoreStack stamp: 'MK 9/19/2021 19:43:56'!
restoreStack
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:44:27'!
fetchElementsInStackThatMatch: aPrefix
	|sentence prefixMatched auxiliaryStack|
	auxiliaryStack := OOStack new.
	prefixMatched := OrderedCollection new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].
	self restoreStackFrom: auxiliaryStack.
	^ prefixMatched! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:44:28' prior: 50870448!
find: aPrefix
	|prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	
	prefixMatched := self fetchElementsInStackThatMatch: aPrefix.

	^prefixMatched! !

!methodRemoval: SentenceFinderByPrefix #fetchElementsInStackMatching: stamp: 'MK 9/19/2021 19:44:28'!
fetchElementsInStackMatching: aPrefix
	|sentence prefixMatched auxiliaryStack|
	auxiliaryStack := OOStack new.
	prefixMatched := OrderedCollection new.
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].
	self restoreStackFrom: auxiliaryStack.
	^ prefixMatched!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:45:47' prior: 50870569!
fetchElementsInStackThatMatch: aPrefix
	|sentence prefixMatched auxiliaryStack|
	auxiliaryStack := OOStack new.
	prefixMatched := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [prefixMatched addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFrom: auxiliaryStack.
	^ prefixMatched! !

----SNAPSHOT----(19 September 2021 19:46:29) CuisUniversity-4532.image priorSource: 17197493!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:47:14' prior: 50870609!
fetchElementsInStackThatMatch: aPrefix
	|sentence matchingSentences auxiliaryStack|
	auxiliaryStack := OOStack new.
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFrom: auxiliaryStack.
	^ matchingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:47:34'!
fetchSentencesInStackThatMatch: aPrefix
	|sentence matchingSentences auxiliaryStack|
	auxiliaryStack := OOStack new.
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFrom: auxiliaryStack.
	^ matchingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:47:34' prior: 50870585!
find: aPrefix
	|prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	
	prefixMatched := self fetchSentencesInStackThatMatch: aPrefix.

	^prefixMatched! !

!methodRemoval: SentenceFinderByPrefix #fetchElementsInStackThatMatch: stamp: 'MK 9/19/2021 19:47:34'!
fetchElementsInStackThatMatch: aPrefix
	|sentence matchingSentences auxiliaryStack|
	auxiliaryStack := OOStack new.
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFrom: auxiliaryStack.
	^ matchingSentences!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack auxStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'MK 9/19/2021 19:49:09'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack auxStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'MK 9/19/2021 19:49:35'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----SNAPSHOT----(19 September 2021 19:50:05) CuisUniversity-4532.image priorSource: 17247140!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack auxiliaryStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack auxStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'MK 9/19/2021 19:50:14'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack auxStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:50:37' prior: 50870644!
fetchSentencesInStackThatMatch: aPrefix
	|sentence matchingSentences|
	auxStack := OOStack new.
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxStack push: sentence.
	].

	self restoreStackFrom: auxStack.
	^ matchingSentences! !

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'MK 9/19/2021 19:50:54'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'stack auxiliaryStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:50:54' prior: 50870731!
fetchSentencesInStackThatMatch: aPrefix
	|sentence matchingSentences|
	auxiliaryStack := OOStack new.
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFrom: auxiliaryStack.
	^ matchingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:51:02' prior: 50870755!
fetchSentencesInStackThatMatch: aPrefix
	|sentence matchingSentences|
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFrom: auxiliaryStack.
	^ matchingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 19:51:22'!
restoreStackFromAuxiliaryStack
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
! !

!methodRemoval: SentenceFinderByPrefix #restoreStackFrom: stamp: 'MK 9/19/2021 19:51:27'!
restoreStackFrom: aStack
	[aStack isEmpty not] whileTrue: [
		stack push: aStack pop.
	].
!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:02:11' prior: 50870660!
find: aPrefix
	|prefixMatched|
	
	self assertPrefixIsValid: aPrefix.
	prefixMatched := self fetchSentencesInStackThatMatch: aPrefix.

	^prefixMatched! !

----SNAPSHOT----(19 September 2021 20:02:14) CuisUniversity-4532.image priorSource: 17249861!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:02:52' prior: 50870799!
find: aPrefix
	
	self assertPrefixIsValid: aPrefix.
	^ self fetchSentencesInStackThatMatch: aPrefix.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:03:37' prior: 50870771!
fetchSentencesInStackThatMatch: aPrefix
	|sentence matchingSentences|
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFromAuxiliaryStack.
	^ matchingSentences! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:03:41'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 20:03:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 20:03:41'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 20:03:41'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 20:03:41'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 20:03:41'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 20:03:41'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 20:03:41'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:03:44'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:04:15'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:04:52' prior: 50868220!
initializeWith: aStack
	stack := aStack.
	auxiliaryStack := OOStack new.! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:04:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 20:04:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 20:04:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 20:04:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 20:04:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 20:04:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 20:04:56'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 20:04:56'!
PASSED!

----SNAPSHOT----(19 September 2021 20:17:56) CuisUniversity-4532.image priorSource: 17252984!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:18:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 20:18:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 20:18:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 20:18:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 20:18:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 20:18:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 20:18:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 20:18:32'!
PASSED!

----SNAPSHOT----(19 September 2021 20:18:36) CuisUniversity-4532.image priorSource: 17256186!
!SentenceFinderByPrefix methodsFor: 'fetchers' stamp: 'MK 9/19/2021 20:22:59'!
find: aPrefix in: aStackOfSenteces 
	
	self assertPrefixIsValid: aPrefix.
	^ self fetchSentencesInStackThatMatch: aPrefix.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:22:59' prior: 50869654!
test07StackWithMultipleMatches

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'Tomas estuvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'Tomas estuvo aqui'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tomas' in: aStack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas' with: 'Tomas estuvo' with: 'Tomas estuvo aqui').! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:22:59' prior: 50869486!
test04StackWithOneElementThatMatchesPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tom' in: aStack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:22:59' prior: 50869326!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: 'Invalid prefix' in: aStack]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithSpaces].! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:22:59' prior: 50868898!
test01StackEmptyShouldReturnEmptyCollection

	|stack prefixMatch finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Macarena' in: aStack.
	
	self assert: prefixMatch isEmpty! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:22:59' prior: 50869808!
test08StackWithMultipleMatchesButWrongCases

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'tOmAs estUvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'TOMAS ESTUVO AQUI!!!!!!'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Tomas' in: aStack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:22:59' prior: 50869364!
test03EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder find: '' in: aStack]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty].! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:22:59' prior: 50869509!
test05StackWithOneElementThatDoesNotMatchPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'Agus' in: aStack.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:22:59' prior: 50869582!
test06StackWithOneElementThatDoesNotMatchPrefixCase

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder find: 'tomas' in: aStack.
	
	self assert: prefixMatch = (OrderedCollection new).! !

!methodRemoval: SentenceFinderByPrefix #find: stamp: 'MK 9/19/2021 20:22:59'!
find: aPrefix
	
	self assertPrefixIsValid: aPrefix.
	^ self fetchSentencesInStackThatMatch: aPrefix.!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:23:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 20:23:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 20:23:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 20:23:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 20:23:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 20:23:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 20:23:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 20:23:17'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'fetchers' stamp: 'MK 9/19/2021 20:23:44'!
findAllSentencesWith: aPrefix in: aStackOfSenteces 
	
	self assertPrefixIsValid: aPrefix.
	^ self fetchSentencesInStackThatMatch: aPrefix.! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:23:44' prior: 50870996!
test01StackEmptyShouldReturnEmptyCollection

	|stack prefixMatch finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'Macarena' in: aStack.
	
	self assert: prefixMatch isEmpty! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:23:44' prior: 50871050!
test06StackWithOneElementThatDoesNotMatchPrefixCase

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'tomas' in: aStack.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:23:44' prior: 50871037!
test05StackWithOneElementThatDoesNotMatchPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'Agus' in: aStack.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:23:44' prior: 50871007!
test08StackWithMultipleMatchesButWrongCases

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'tOmAs estUvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'TOMAS ESTUVO AQUI!!!!!!'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'Tomas' in: aStack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:23:44' prior: 50870982!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder findAllSentencesWith: 'Invalid prefix' in: aStack]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithSpaces].! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:23:44' prior: 50871024!
test03EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder findAllSentencesWith: '' in: aStack]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty].! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:23:44' prior: 50870951!
test07StackWithMultipleMatches

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'Tomas estuvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'Tomas estuvo aqui'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'Tomas' in: aStack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas' with: 'Tomas estuvo' with: 'Tomas estuvo aqui').! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:23:44' prior: 50870969!
test04StackWithOneElementThatMatchesPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'Tom' in: aStack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !

!methodRemoval: SentenceFinderByPrefix #find:in: stamp: 'MK 9/19/2021 20:23:45'!
find: aPrefix in: aStackOfSenteces 
	
	self assertPrefixIsValid: aPrefix.
	^ self fetchSentencesInStackThatMatch: aPrefix.!
!SentenceFinderByPrefix methodsFor: 'fetchers' stamp: 'MK 9/19/2021 20:24:59'!
in: aStackOfSentences fetchSentencesInStackThatMatch: aPrefix
	|sentence matchingSentences|
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFromAuxiliaryStack.
	^ matchingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:24:59' prior: 50871098!
findAllSentencesWith: aPrefix in: aStackOfSenteces 
	
	self assertPrefixIsValid: aPrefix.
	^ self in: aStack fetchSentencesInStackThatMatch: aPrefix.! !

!methodRemoval: SentenceFinderByPrefix #fetchSentencesInStackThatMatch: stamp: 'MK 9/19/2021 20:24:59'!
fetchSentencesInStackThatMatch: aPrefix
	|sentence matchingSentences|
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFromAuxiliaryStack.
	^ matchingSentences!
!SentenceFinderByPrefix methodsFor: 'fetchers' stamp: 'MK 9/19/2021 20:25:30'!
fetchSentencesFrom: aStackOfSentences ThatMatch: aPrefix
	|sentence matchingSentences|
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFromAuxiliaryStack.
	^ matchingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:25:31' prior: 50871245!
findAllSentencesWith: aPrefix in: aStackOfSenteces 
	
	self assertPrefixIsValid: aPrefix.
	^ self fetchSentencesFrom: aStack ThatMatch: aPrefix.! !

!methodRemoval: SentenceFinderByPrefix #in:fetchSentencesInStackThatMatch: stamp: 'MK 9/19/2021 20:25:31'!
in: aStackOfSentences fetchSentencesInStackThatMatch: aPrefix
	|sentence matchingSentences|
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFromAuxiliaryStack.
	^ matchingSentences!
!SentenceFinderByPrefix methodsFor: 'fetchers' stamp: 'MK 9/19/2021 20:25:39'!
fetchSentencesFrom: aStackOfSentences thatMatch: aPrefix
	|sentence matchingSentences|
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFromAuxiliaryStack.
	^ matchingSentences! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:25:40' prior: 50871282!
findAllSentencesWith: aPrefix in: aStackOfSenteces 
	
	self assertPrefixIsValid: aPrefix.
	^ self fetchSentencesFrom: aStack thatMatch: aPrefix.! !

!methodRemoval: SentenceFinderByPrefix #fetchSentencesFrom:ThatMatch: stamp: 'MK 9/19/2021 20:25:40'!
fetchSentencesFrom: aStackOfSentences ThatMatch: aPrefix
	|sentence matchingSentences|
	matchingSentences := OrderedCollection new.
	
	[stack isEmpty not] whileTrue: [
		sentence := stack pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStackFromAuxiliaryStack.
	^ matchingSentences!
!SentenceFinderByPrefix methodsFor: 'fetchers' stamp: 'MK 9/19/2021 20:26:18' prior: 50871320!
findAllSentencesWith: aPrefix in: aStackOfSentences 
	
	self assertPrefixIsValid: aPrefix.
	^ self fetchSentencesFrom: aStackOfSentences thatMatch: aPrefix.! !

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'auxiliaryStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'MK 9/19/2021 20:26:30'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'auxiliaryStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'initialization' stamp: 'MK 9/19/2021 20:26:43' overrides: 16896425!
initialize
	auxiliaryStack := OOStack new.! !

!methodRemoval: SentenceFinderByPrefix #initializeWith: stamp: 'MK 9/19/2021 20:26:46'!
initializeWith: aStack
	stack := aStack.
	auxiliaryStack := OOStack new.!
!SentenceFinderByPrefix methodsFor: 'restorer' stamp: 'MK 9/19/2021 20:27:43'!
fromAuxiliaryStackRestore: aStackOfSentences
	[auxiliaryStack isEmpty not] whileTrue: [
		aStackOfSentences push: auxiliaryStack pop.
	].
! !

!methodRemoval: SentenceFinderByPrefix #restoreStackFromAuxiliaryStack stamp: 'MK 9/19/2021 20:27:49'!
restoreStackFromAuxiliaryStack
	[auxiliaryStack isEmpty not] whileTrue: [
		stack push: auxiliaryStack pop.
	].
!
!SentenceFinderByPrefix methodsFor: 'fetchers' stamp: 'MK 9/19/2021 20:28:16' prior: 50871305!
fetchSentencesFrom: aStackOfSentences thatMatch: aPrefix
	|sentence matchingSentences|
	matchingSentences := OrderedCollection new.
	
	[aStackOfSentences isEmpty not] whileTrue: [
		sentence := aStackOfSentences pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self fromAuxiliaryStackRestore: aStackOfSentences .
	^ matchingSentences! !
!SentenceFinderByPrefix methodsFor: 'restorer' stamp: 'MK 9/19/2021 20:29:00'!
restoreStack: aStackOfSentences
	[auxiliaryStack isEmpty not] whileTrue: [
		aStackOfSentences push: auxiliaryStack pop.
	].
! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:29:00' prior: 50871389!
fetchSentencesFrom: aStackOfSentences thatMatch: aPrefix
	|sentence matchingSentences|
	matchingSentences := OrderedCollection new.
	
	[aStackOfSentences isEmpty not] whileTrue: [
		sentence := aStackOfSentences pop.
		(sentence beginsWith: aPrefix) ifTrue: [matchingSentences addFirst: sentence].
		auxiliaryStack push: sentence.
	].

	self restoreStack: aStackOfSentences .
	^ matchingSentences! !

!methodRemoval: SentenceFinderByPrefix #fromAuxiliaryStackRestore: stamp: 'MK 9/19/2021 20:29:00'!
fromAuxiliaryStackRestore: aStackOfSentences
	[auxiliaryStack isEmpty not] whileTrue: [
		aStackOfSentences push: auxiliaryStack pop.
	].
!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 20:29:27' prior: 50871106!
test01StackEmptyShouldReturnEmptyCollection

	|stack prefixMatch finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'Macarena' in: stack.
	
	self assert: prefixMatch isEmpty! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 20:29:31' prior: 50871162!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder findAllSentencesWith: 'Invalid prefix' in: stack]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithSpaces].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 20:29:37' prior: 50871177!
test03EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with: stack.
	self	
		should: [finder findAllSentencesWith: '' in: stack]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty].! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 20:29:41' prior: 50871210!
test04StackWithOneElementThatMatchesPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'Tom' in: stack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 20:29:45' prior: 50871131!
test05StackWithOneElementThatDoesNotMatchPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'Agus' in: stack.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 20:29:49' prior: 50871118!
test06StackWithOneElementThatDoesNotMatchPrefixCase

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'tomas' in: stack.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 20:29:53' prior: 50871191!
test07StackWithMultipleMatches

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'Tomas estuvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'Tomas estuvo aqui'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'Tomas' in: stack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas' with: 'Tomas estuvo' with: 'Tomas estuvo aqui').! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'MK 9/19/2021 20:29:57' prior: 50871144!
test08StackWithMultipleMatchesButWrongCases

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'tOmAs estUvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'TOMAS ESTUVO AQUI!!!!!!'.
	
	finder := SentenceFinderByPrefix with: stack.
	prefixMatch := finder findAllSentencesWith: 'Tomas' in: stack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:29:59'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 20:29:59'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 20:29:59'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 20:29:59'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 20:29:59'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 20:29:59'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 20:29:59'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 20:29:59'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:30:02'!
ERROR!

!methodRemoval: SentenceFinderByPrefix class #with: stamp: 'MK 9/19/2021 20:30:22'!
with: aStack
	^ self new initializeWith: aStack!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:30:26'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 20:30:26'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 20:30:26'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 20:30:26'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 20:30:26'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 20:30:26'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 20:30:26'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 20:30:27'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:30:29'!
ERROR!
!SentenceFinderByPrefix class methodsFor: 'error' stamp: 'MK 9/19/2021 20:31:32'!
with: aSTACk
 ! !
!SentenceFinderByPrefix class methodsFor: 'error' stamp: 'MK 9/19/2021 20:32:34'!
with
 ! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:32:34' prior: 50871447!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with.
	self	
		should: [finder findAllSentencesWith: 'Invalid prefix' in: stack]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithSpaces].! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:32:34' prior: 50871531!
test08StackWithMultipleMatchesButWrongCases

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'tOmAs estUvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'TOMAS ESTUVO AQUI!!!!!!'.
	
	finder := SentenceFinderByPrefix with.
	prefixMatch := finder findAllSentencesWith: 'Tomas' in: stack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:32:34' prior: 50871474!
test04StackWithOneElementThatMatchesPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with.
	prefixMatch := finder findAllSentencesWith: 'Tom' in: stack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:32:34' prior: 50871487!
test05StackWithOneElementThatDoesNotMatchPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with.
	prefixMatch := finder findAllSentencesWith: 'Agus' in: stack.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:32:34' prior: 50871436!
test01StackEmptyShouldReturnEmptyCollection

	|stack prefixMatch finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with.
	prefixMatch := finder findAllSentencesWith: 'Macarena' in: stack.
	
	self assert: prefixMatch isEmpty! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:32:35' prior: 50871461!
test03EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix with.
	self	
		should: [finder findAllSentencesWith: '' in: stack]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty].! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:32:35' prior: 50871500!
test06StackWithOneElementThatDoesNotMatchPrefixCase

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix with.
	prefixMatch := finder findAllSentencesWith: 'tomas' in: stack.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:32:35' prior: 50871513!
test07StackWithMultipleMatches

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'Tomas estuvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'Tomas estuvo aqui'.
	
	finder := SentenceFinderByPrefix with.
	prefixMatch := finder findAllSentencesWith: 'Tomas' in: stack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas' with: 'Tomas estuvo' with: 'Tomas estuvo aqui').! !

!methodRemoval: SentenceFinderByPrefix class #with: stamp: 'MK 9/19/2021 20:32:35'!
with: aSTACk
 !
!SentenceFinderByPrefix class methodsFor: 'error' stamp: 'MK 9/19/2021 20:33:04' overrides: 16783533!
new
 ! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:33:04' prior: 50871696!
test03EmptyPrefixShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix new.
	self	
		should: [finder findAllSentencesWith: '' in: stack]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixEmpty].! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:33:04' prior: 50871659!
test04StackWithOneElementThatMatchesPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix new.
	prefixMatch := finder findAllSentencesWith: 'Tom' in: stack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:33:04' prior: 50871672!
test05StackWithOneElementThatDoesNotMatchPrefix

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix new.
	prefixMatch := finder findAllSentencesWith: 'Agus' in: stack.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:33:04' prior: 50871710!
test06StackWithOneElementThatDoesNotMatchPrefixCase

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	finder := SentenceFinderByPrefix new.
	prefixMatch := finder findAllSentencesWith: 'tomas' in: stack.
	
	self assert: prefixMatch = (OrderedCollection new).! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:33:04' prior: 50871685!
test01StackEmptyShouldReturnEmptyCollection

	|stack prefixMatch finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix new.
	prefixMatch := finder findAllSentencesWith: 'Macarena' in: stack.
	
	self assert: prefixMatch isEmpty! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:33:04' prior: 50871723!
test07StackWithMultipleMatches

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'Tomas estuvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'Tomas estuvo aqui'.
	
	finder := SentenceFinderByPrefix new.
	prefixMatch := finder findAllSentencesWith: 'Tomas' in: stack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas' with: 'Tomas estuvo' with: 'Tomas estuvo aqui').! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:33:04' prior: 50871642!
test08StackWithMultipleMatchesButWrongCases

	|stack prefixMatch finder|
	stack := OOStack new.
	stack push: 'Tomas'.
	stack push: 'Macarena no va a salir'.
	stack push: 'tOmAs estUvo'.
	stack push: 'Agustin tampoco'.
	stack push: 'TOMAS ESTUVO AQUI!!!!!!'.
	
	finder := SentenceFinderByPrefix new.
	prefixMatch := finder findAllSentencesWith: 'Tomas' in: stack.
	
	self assert: prefixMatch = (OrderedCollection with: 'Tomas').! !
!SentenceFinderByPrefixTest methodsFor: 'as yet unclassified' stamp: 'MK 9/19/2021 20:33:04' prior: 50871628!
test02PrefixWithSpacesShouldThrowError

	|stack finder|
	stack := OOStack new.
	finder := SentenceFinderByPrefix new.
	self	
		should: [finder findAllSentencesWith: 'Invalid prefix' in: stack]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: SentenceFinderByPrefix invalidPrefixWithSpaces].! !

!methodRemoval: SentenceFinderByPrefix class #with stamp: 'MK 9/19/2021 20:33:04'!
with
 !

!methodRemoval: SentenceFinderByPrefix class #new stamp: 'MK 9/19/2021 20:33:13'!
new
 !

!testRun: #SentenceFinderByPrefixTest #test01StackEmptyShouldReturnEmptyCollection stamp: 'MK 9/19/2021 20:33:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02PrefixWithSpacesShouldThrowError stamp: 'MK 9/19/2021 20:33:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyPrefixShouldThrowError stamp: 'MK 9/19/2021 20:33:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04StackWithOneElementThatMatchesPrefix stamp: 'MK 9/19/2021 20:33:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05StackWithOneElementThatDoesNotMatchPrefix stamp: 'MK 9/19/2021 20:33:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06StackWithOneElementThatDoesNotMatchPrefixCase stamp: 'MK 9/19/2021 20:33:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07StackWithMultipleMatches stamp: 'MK 9/19/2021 20:33:28'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08StackWithMultipleMatchesButWrongCases stamp: 'MK 9/19/2021 20:33:28'!
PASSED!

----SNAPSHOT----(19 September 2021 20:33:33) CuisUniversity-4532.image priorSource: 17257256!

----STARTUP---- (27 September 2021 17:13:03) as D:\001.Maca\2c2021\inge1\qa2\CuisUniversity-4532.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'MK 9/27/2021 20:15:10'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'auxiliaryStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackNotEmptyState stamp: 'MK 9/27/2021 20:15:11'!
OOStackStateMachine subclass: #OOStackNotEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackEmptyState stamp: 'MK 9/27/2021 20:15:11'!
OOStackStateMachine subclass: #OOStackEmptyState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackStateMachine stamp: 'MK 9/27/2021 20:15:11'!
Object subclass: #OOStackStateMachine
	instanceVariableNames: 'stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'MK 9/27/2021 20:15:12'!
Object subclass: #OOStack
	instanceVariableNames: 'elementContainerList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'MK 9/27/2021 20:15:12'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'MK 9/27/2021 20:15:13'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!

!classDefinition: #Rot13Test category: 'Rot13' stamp: 'MK 9/27/2021 20:26:42'!
TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!
!Rot13Test methodsFor: 'nil' stamp: 'MK 9/27/2021 20:32:30'!
test01
	self assert: '' equals: '' asRot13.! !

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 20:34:08'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 20:34:50'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 20:36:17' prior: 50871966!
asRot13
	^ ''.! !

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 20:36:22'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 20:36:22'!
PASSED!

'' asRot13!

	self assert: '' equals: '' asRot13.!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 20:39:12'!
test02
	self assert: '#' equals: '#' asRot13.! !

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 20:39:20'!
FAILURE!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 20:39:54'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 20:40:09' prior: 50871970!
asRot13
	^ self.! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 20:42:50' prior: 50871988!
asRot13
	self = '#' ifTrue: [^'#']
	ifFalse: [^''].! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'MK 9/27/2021 20:42:52'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'MK 9/27/2021 20:42:52'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'MK 9/27/2021 20:42:52'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'MK 9/27/2021 20:42:52'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'MK 9/27/2021 20:42:52'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'MK 9/27/2021 20:42:53'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 20:42:56'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 20:42:56'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 20:42:56'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 20:48:19'!
test03
	self assert: '!!' equals: '!!' asRot13.! !

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 20:48:20'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 20:49:44' prior: 50871992!
asRot13
	self = '#' ifTrue: [^'#']
	ifFalse: [
		self = '' ifTrue: [^ '']
		ifFalse: [^ '!!'	]
		].! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 20:49:55' prior: 50872065!
asRot13
	self = '#' ifTrue: [^'#']
	ifFalse: [
		self = '!!' ifTrue: [^ '!!']
		ifFalse: [^ ''	]
		].! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 20:49:58' prior: 50872071!
asRot13
	self = '#' ifTrue: [^'#']
	ifFalse: [
		self = '!!' ifTrue: [^ '!!']
			ifFalse: [^ ''	]
		].! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 20:54:31' prior: 50872077!
asRot13
	self = '' ifTrue: [^''].
	^ self.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 20:56:29'!
test04
	self assert: 'n' equals: 'a' asRot13.! !

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 20:56:32'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 20:57:41' prior: 50872083!
asRot13
	self = '' ifTrue: [^''].
	self = 'a' ifTrue: [^'n'].
	^ self.! !

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 20:57:50'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 20:57:50'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 20:57:50'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 20:57:50'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 20:57:50'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:03:44'!
test05
	self assert: 't' equals: 'g' asRot13.! !

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:03:46'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:04:18' prior: 50872094!
asRot13
	self = '' ifTrue: [^''].
	self = 'a' ifTrue: [^'n'].
	self = 'g' ifTrue: [^'t'].
	^ self.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'MK 9/27/2021 21:04:21'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:05:47'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:05:48'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:05:48'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:05:48'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:05:48'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:05:48'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:11:05'!
test06
	self assert: 'z' equals: 'm' asRot13.! !

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:11:09'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:11:35' prior: 50872117!
asRot13
	self = '' ifTrue: [^''].
	self = 'a' ifTrue: [^'n'].
	self = 'g' ifTrue: [^'t'].
	self = 'm' ifTrue: [^'z'].
	^ self.! !

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:11:40'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:11:40'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:11:40'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:11:40'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:11:40'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:11:40'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:11:40'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:17:47' prior: 50872198!
asRot13
	self = '' ifTrue: [^''].
	^ self first asciiValue + 13.! !

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:17:52'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:18:35' prior: 50872220!
asRot13
	self = '' ifTrue: [^''].
	^ self first asciiValue + 13.! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:18:41' prior: 50872227!
asRot13
	self = '' ifTrue: [^''].
	^ self first asciiValue + 13.! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:19:30' prior: 50872232!
asRot13
	self = '' ifTrue: [^''].
	^Character asciiValue: self first asciiValue + 13.! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:19:51' prior: 50872237!
asRot13
	self = '' ifTrue: [^''].
	^(Character asciiValue: self first asciiValue + 13) asString.! !

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:19:53'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:19:53'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:19:53'!
FAILURE!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:19:53'!
FAILURE!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:19:53'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:19:54'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:19:54'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:25:17' prior: 50872243!
asRot13
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString].
	
	^ self.! !

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:25:23'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:25:23'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:25:23'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:25:23'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:25:23'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:25:23'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:25:24'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:27:33'!
test07
	self assert: 'a' equals: 'n' asRot13.! !

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 21:27:35'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:28:30' prior: 50872264!
asRot13
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString].
	self = 'n' ifTrue: [^ 'a'].	
	^ self.! !

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 21:28:35'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:28:35'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:28:35'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:28:35'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:28:35'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:28:35'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:28:35'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 21:28:35'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:31:15'!
test08
	self assert: 'g' equals: 't' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:31:37' prior: 50872295!
asRot13
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString].
	self = 'n' ifTrue: [^ 'a'].	
	self = 't' ifTrue: [^ 'g'].
	^ self.! !

!testRun: #Rot13Test #test08 stamp: 'MK 9/27/2021 21:32:48'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:33:06'!
test09
	self assert: 'z' equals: 'm' asRot13.! !

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 21:33:08'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:33:08'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:33:08'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:33:08'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:33:08'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:33:08'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:33:08'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 21:33:08'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'MK 9/27/2021 21:33:08'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 21:33:08'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:33:16' prior: 50872339!
test09
	self assert: 'm' equals: 'z' asRot13.! !

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 21:33:17'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:33:38' prior: 50872326!
asRot13
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString].
	self = 'n' ifTrue: [^ 'a'].	
	self = 't' ifTrue: [^ 'g'].
	self = 'z' ifTrue: [^ 'm'].
	^ self.! !

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 21:33:41'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:33:41'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:33:41'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:33:41'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:33:41'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:33:41'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:33:41'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 21:33:41'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'MK 9/27/2021 21:33:41'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 21:33:41'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:39:12' prior: 50872373!
asRot13
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString].
	(self first asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString].
	^ self.! !

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 21:39:21'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:39:22'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:39:22'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:39:22'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:39:22'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:39:22'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:39:22'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 21:39:22'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'MK 9/27/2021 21:39:22'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 21:39:22'!
PASSED!

----End fileIn of D:\001.Maca\2c2021\inge1\qa2\Packages\System\Collections-CompactArrays.pck.st----!

----End fileIn of D:\001.Maca\2c2021\inge1\qa2\Packages\Features\VectorGraphics.pck.st----!

----SNAPSHOT----(27 September 2021 21:45:20) CuisUniversity-4532.image priorSource: 17287857!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:45:30'!
test10
	self assert: 'A' equals: 'N' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:47:41' prior: 50872406!
asRot13
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString].
	(self first asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString].
	self = 'A' ifTrue:[^ 'N'].
	self = 'G' ifTrue:[^ 'T'].
	self = 'M' ifTrue:[^ 'Z'].
	^ self.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:47:53'!
test11
	self assert: 'G' equals: 'T' asRot13.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:47:59'!
test12
	self assert: 'M' equals: 'Z' asRot13.! !

!testRun: #Rot13Test #test12 stamp: 'MK 9/27/2021 21:48:00'!
FAILURE!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:48:09' prior: 50884054!
test11
	self assert: 'T' equals: 'G' asRot13.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:48:16' prior: 50884034!
test10
	self assert: 'N' equals: 'A' asRot13.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:48:22' prior: 50884058!
test12
	self assert: 'Z' equals: 'M' asRot13.! !

!testRun: #Rot13Test #test12 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'MK 9/27/2021 21:48:25'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:50:13'!
test13
	self assert: 'M' equals: 'Z' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:50:18' prior: 50884038!
asRot13
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString].
	(self first asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString].
	self = 'A' ifTrue:[^ 'N'].
	self = 'G' ifTrue:[^ 'T'].
	self = 'M' ifTrue:[^ 'Z'].
	^ self.! !

!testRun: #Rot13Test #test13 stamp: 'MK 9/27/2021 21:50:20'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:50:39' prior: 50884112!
asRot13
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString].
	(self first asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString].
	self = 'A' ifTrue:[^ 'N'].
	self = 'G' ifTrue:[^ 'T'].
	self = 'M' ifTrue:[^ 'Z'].
	self = 'Z' ifTrue:[^ 'M'].
	^ self.! !

!testRun: #Rot13Test #test13 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'MK 9/27/2021 21:50:47'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:54:41' prior: 50884130!
asRot13
	self = '' ifTrue: [^''].
	(self first asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue + 13) asString].
	(self first asLowercase asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
		^(Character asciiValue: self first asciiValue - 13) asString].
	self = 'A' ifTrue:[^ 'N'].
	self = 'G' ifTrue:[^ 'T'].
	self = 'M' ifTrue:[^ 'Z'].
	self = 'Z' ifTrue:[^ 'M'].
	^ self.! !

!testRun: #Rot13Test #test13 stamp: 'MK 9/27/2021 21:54:43'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'MK 9/27/2021 21:54:44'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'MK 9/27/2021 21:55:06'!
test14
	self assert: 'NZ' equals: 'AM' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:57:57' prior: 50884177!
asRot13
	self = '' ifTrue: [^''].
	self collect: [:aChar | 
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
			^(Character asciiValue: aChar asciiValue + 13) asString].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
			^(Character asciiValue: aChar asciiValue - 13) asString].
	]. 
	^ self.! !

!testRun: #Rot13Test #test14 stamp: 'MK 9/27/2021 21:58:13'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:58:45' prior: 50884229!
asRot13
	self = '' ifTrue: [^''].
	self collect: [:aChar | 
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
			(Character asciiValue: aChar asciiValue + 13) asString].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
			(Character asciiValue: aChar asciiValue - 13) asString].
	]. 
	^ self.! !

!testRun: #Rot13Test #test14 stamp: 'MK 9/27/2021 21:58:47'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 21:59:05' prior: 50884246!
asRot13
	self = '' ifTrue: [^''].
	^ self collect: [:aChar | 
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
			(Character asciiValue: aChar asciiValue + 13) asString].
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
			(Character asciiValue: aChar asciiValue - 13) asString].
	]. ! !

!testRun: #Rot13Test #test14 stamp: 'MK 9/27/2021 21:59:07'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 22:04:14' prior: 50884263!
asRot13
	self = '' ifTrue: [^''].
	^ self collect: [:aChar | 
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
			(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
				(Character asciiValue: aChar asciiValue + 13) asString].
			(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
				(Character asciiValue: aChar asciiValue - 13) asString].
		].
		aChar.
	]. ! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 22:04:32' prior: 50884279!
asRot13
	self = '' ifTrue: [^''].
	^ self collect: [:aChar | 
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
			(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
				(Character asciiValue: aChar asciiValue + 13) asString].
			(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
				(Character asciiValue: aChar asciiValue - 13) asString].
		] ifFalse: [	aChar.].
	]. ! !
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 22:04:34' prior: 50884296!
asRot13
	self = '' ifTrue: [^''].
	^ self collect: [:aChar | 
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
			(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
				(Character asciiValue: aChar asciiValue + 13) asString].
			(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [
				(Character asciiValue: aChar asciiValue - 13) asString].
		] ifFalse: [	aChar].
	]. ! !

!testRun: #Rot13Test #test14 stamp: 'MK 9/27/2021 22:04:36'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'MK 9/27/2021 22:12:52' prior: 50884314!
asRot13
	self = '' ifTrue: [^''].
	^ self collect: [:aChar | 
		(aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue) ifTrue: [
			aChar asLowercase < $n
			ifTrue: [Character asciiValue: aChar asciiValue + 13]
			ifFalse: [Character asciiValue: aChar asciiValue - 13].
		] ifFalse: [	aChar].
	]. ! !

!testRun: #Rot13Test #test14 stamp: 'MK 9/27/2021 22:12:54'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test14 stamp: 'MK 9/27/2021 22:12:55'!
PASSED!

!testRun: #Rot13Test #test14 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

!testRun: #Rot13Test #test14 stamp: 'MK 9/27/2021 22:13:21'!
PASSED!

----SNAPSHOT----(27 September 2021 22:13:29) CuisUniversity-4532.image priorSource: 17676162!

----STARTUP---- (30 September 2021 17:21:01) as D:\001.Maca\2c2021\inge1\qa2\CuisUniversity-4532.image!


TestCase subclass: #TestRomans
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TestRomans'!

!classDefinition: #TestRomans category: 'TestRomans' stamp: 'MK 9/30/2021 17:23:47'!
TestCase subclass: #TestRomans
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TestRomans'!
!TestRomans methodsFor: 'nil' stamp: 'MK 9/30/2021 17:27:27'!
Test01
	self assert: 1 asRoman equals: 'I'. ! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 17:28:01'!
test01
	self assert: 'I' equals: 1 asRoman. ! !

!methodRemoval: TestRomans #Test01 stamp: 'MK 9/30/2021 17:28:03'!
Test01
	self assert: 1 asRoman equals: 'I'. !

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:30:59'!
ERROR!
!SmallInteger methodsFor: '*Romans' stamp: 'MK 9/30/2021 17:31:12'!
asRoman
	self shouldBeImplemented.! !

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:31:31'!
ERROR!

!methodRemoval: SmallInteger #asRoman stamp: 'MK 9/30/2021 17:31:52'!
asRoman
	self shouldBeImplemented.!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:31:55'!
ERROR!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:32:02'!
asRoman
	self shouldBeImplemented.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:32:57' prior: 50884454!
asRoman
	^ 'I'.! !

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:33:02'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:33:02'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 17:35:44'!
test02
	self assert: 'II' equals: 2 asRoman. ! !

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 17:35:56'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:39:57' prior: 50884458!
asRoman
	self = 1 ifTrue: [^ 'I'].
	^ 'II'.! !

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 17:40:03'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:40:03'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 17:40:03'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 17:41:24'!
test03
	self assert: 'III' equals: 3 asRoman. ! !

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 17:41:28'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:41:47' prior: 50884473!
asRoman
	self = 1 ifTrue: [^ 'I'].
	self = 3 ifTrue: [^ 'III'].
	^ 'II'.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:42:43' prior: 50884491!
asRoman
	self = 1 ifTrue: [^ 'I'].
	self = 2 ifTrue: [^ 'II'].
	^ 'III'.! !

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 17:42:45'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:42:45'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 17:42:45'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 17:42:46'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 17:44:33'!
test04
	self assert: 'IV' equals: 4 asRoman. ! !

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 17:44:36'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:44:54' prior: 50884496!
asRoman
	self = 1 ifTrue: [^ 'I'].
	self = 2 ifTrue: [^ 'II'].
	self = 3 ifTrue: [^ 'III'].
	^ 'IV'.! !

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 17:45:04'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:45:04'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 17:45:04'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 17:45:04'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 17:45:04'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 17:46:39'!
test05
	self assert: 'V' equals: 5 asRoman. ! !

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 17:46:41'!
FAILURE!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 17:46:55'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:47:17' prior: 50884517!
asRoman
	self = 1 ifTrue: [^ 'I'].
	self = 2 ifTrue: [^ 'II'].
	self = 3 ifTrue: [^ 'III'].
	self = 4 ifTrue: [^ 'IV'].
	^ 'V'.! !

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 17:47:18'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:47:18'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 17:47:18'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 17:47:18'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 17:47:18'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 17:47:18'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 17:49:01'!
test06
	self assert: 'VI' equals: 6 asRoman. ! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:49:11' prior: 50884543!
asRoman
	self = 1 ifTrue: [^ 'I'].
	self = 2 ifTrue: [^ 'II'].
	self = 3 ifTrue: [^ 'III'].
	self = 4 ifTrue: [^ 'IV'].
	self = 5 ifTrue: [^ 'V'].
	^ 'VI'.! !

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 17:49:15'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:49:16'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 17:49:16'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 17:49:16'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 17:49:16'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 17:49:16'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 17:49:16'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 17:49:52'!
test07
	self assert: 'VII' equals: 7 asRoman. ! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:50:03' prior: 50884568!
asRoman
	self = 1 ifTrue: [^ 'I'].
	self = 2 ifTrue: [^ 'II'].
	self = 3 ifTrue: [^ 'III'].
	self = 4 ifTrue: [^ 'IV'].
	self = 5 ifTrue: [^ 'V'].
	self = 6 ifTrue: [^ 'VI'].
	^ 'VII'.! !

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 17:50:08'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:50:09'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 17:50:09'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 17:50:09'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 17:50:09'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 17:50:09'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 17:50:09'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 17:50:09'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 17:52:10'!
test08
	self assert: 'VIII' equals: 8 asRoman. ! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:52:21' prior: 50884596!
asRoman
	self = 1 ifTrue: [^ 'I'].
	self = 2 ifTrue: [^ 'II'].
	self = 3 ifTrue: [^ 'III'].
	self = 4 ifTrue: [^ 'IV'].
	self = 5 ifTrue: [^ 'V'].
	self = 6 ifTrue: [^ 'VI'].
	self = 7 ifTrue: [^ 'VII'].
	^ 'VIII'.! !

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 17:52:24'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 17:52:24'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 17:52:24'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 17:52:24'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 17:52:24'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 17:52:24'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 17:52:24'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 17:52:24'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 17:52:24'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 17:59:01' prior: 50884628!
asRoman
	(self between: 1 and: 3) ifTrue: [
		
		].
	self = 1 ifTrue: [^ 'I'].
	self = 2 ifTrue: [^ 'II'].
	self = 3 ifTrue: [^ 'III'].
	self = 4 ifTrue: [^ 'IV'].
	self = 5 ifTrue: [^ 'V'].
	self = 6 ifTrue: [^ 'VI'].
	self = 7 ifTrue: [^ 'VII'].
	^ 'VIII'.! !

2 timesRepeat: 'I'!

2 timesRepeat: [^ 'I']!

'I' *2!

'I'*2!

	String streamContents: [:stream | 1 to: 3 do: [:index | stream nextPut: $i]]!

	String streamContents: [:stream | 1 to: 3 do: [:index | stream nextPut: $I]]!

	String streamContents: [:stream | 1 to: 3 do: [:index | stream nextPut: $I]].!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:08:28' prior: 50884658!
asRoman
	(self between: 1 and: 3) ifTrue: [
		^ String streamContents: [:stream | 1 to: 3 do: [:index | stream nextPut: $I]].
	].
	self = 1 ifTrue: [^ 'I'].
	self = 2 ifTrue: [^ 'II'].
	self = 3 ifTrue: [^ 'III'].
	self = 4 ifTrue: [^ 'IV'].
	self = 5 ifTrue: [^ 'V'].
	self = 6 ifTrue: [^ 'VI'].
	self = 7 ifTrue: [^ 'VII'].
	^ 'VIII'.! !

!testRun: #Rot13Test #test02 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'MK 9/30/2021 18:08:31'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'MK 9/30/2021 18:08:32'!
PASSED!

!testRun: #Rot13Test #test14 stamp: 'MK 9/30/2021 18:08:32'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:08:40'!
FAILURE!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:08:40'!
FAILURE!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:08:40'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:08:40'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:08:40'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:08:40'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:08:40'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:08:40'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:09:10' prior: 50884679!
asRoman
	(self between: 1 and: 3) ifTrue: [
		^ String streamContents: [:stream | 1 to: self do: [:index | stream nextPut: $I]].
	].
	self = 1 ifTrue: [^ 'I'].
	self = 2 ifTrue: [^ 'II'].
	self = 3 ifTrue: [^ 'III'].
	self = 4 ifTrue: [^ 'IV'].
	self = 5 ifTrue: [^ 'V'].
	self = 6 ifTrue: [^ 'VI'].
	self = 7 ifTrue: [^ 'VII'].
	^ 'VIII'.! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'MK 9/30/2021 18:09:15'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'MK 9/30/2021 18:09:15'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'MK 9/30/2021 18:09:16'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'MK 9/30/2021 18:09:16'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'MK 9/30/2021 18:09:16'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'MK 9/30/2021 18:09:16'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'MK 9/30/2021 18:09:16'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'MK 9/30/2021 18:09:16'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'MK 9/30/2021 18:09:16'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'MK 9/30/2021 18:09:16'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'MK 9/30/2021 18:09:16'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'MK 9/30/2021 18:09:16'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:10:58' prior: 50884743!
asRoman
	(self between: 1 and: 3) ifTrue: [
		^ String streamContents: [:stream | 1 to: self do: [:index | stream nextPut: $I]].
	].
	self = 4 ifTrue: [^ 'IV'].
	self = 5 ifTrue: [^ 'V'].
	self = 6 ifTrue: [^ 'VI'].
	self = 7 ifTrue: [^ 'VII'].
	^ 'VIII'.! !

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:11:00'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:11:00'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:11:00'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:11:00'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:11:00'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:11:00'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:11:00'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:11:00'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:11:00'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:14:32' prior: 50884788!
asRoman
	(self between: 1 and: 3) ifTrue: [
		^ String streamContents: [:stream | 1 to: self do: [:index | stream nextPut: $I]].
	].
	self = 4 ifTrue: [^ 'IV'].
	self = 5 ifTrue: [^ 'V'].
	self = 6 ifTrue: [^ 'VI'].
	self = 7 ifTrue: [^ 'VII'].
	^ 'VIII'.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:15:17' prior: 50884819!
asRoman
	(self between: 1 and: 3) ifTrue: [
		^ String streamContents: [:stream | self timesRepeat: [stream nextPut: $I]].
	].
	self = 4 ifTrue: [^ 'IV'].
	self = 5 ifTrue: [^ 'V'].
	self = 6 ifTrue: [^ 'VI'].
	self = 7 ifTrue: [^ 'VII'].
	^ 'VIII'.! !

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:15:19'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:15:19'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:15:19'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:15:19'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:15:19'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:15:19'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:15:19'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:15:19'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:15:19'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:16:12'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:16:12'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:16:12'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:16:12'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:16:12'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:16:12'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:16:12'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:16:12'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:16:12'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 18:18:09'!
test09
	self assert: 'IX' equals: 9 asRoman. ! !

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:18:12'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:18:38' prior: 50884830!
asRoman
	(self between: 1 and: 3) ifTrue: [
		^ String streamContents: [:stream | self timesRepeat: [stream nextPut: $I]].
	].
	self = 4 ifTrue: [^ 'IV'].
	self = 5 ifTrue: [^ 'V'].
	self = 6 ifTrue: [^ 'VI'].
	self = 7 ifTrue: [^ 'VII'].
	self = 8 ifTrue: [^ 'VIII'].
	^ 'IX'.! !

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:18:40'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:18:40'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:18:40'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:18:40'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:18:40'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:18:40'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:18:40'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:18:40'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:18:40'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:18:40'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:23:43' prior: 50884888!
asRoman
	(self between: 1 and: 3) ifTrue: [
		^ String streamContents: [:stream | self timesRepeat: [stream nextPut: $I]].
	].
	self = 4 ifTrue: [^ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		^ 'V',(String streamContents: [:stream | (self-5) timesRepeat: [stream nextPut: $I]])
	].
	^ 'IX'.! !

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:23:45'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:23:45'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:23:45'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:23:45'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:23:45'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:23:45'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:23:45'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:23:45'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:23:45'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:23:45'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:31:55' prior: 50884922!
asRoman
	|X|
	X _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [X _ X append: 'I'].
		^ X.
	].
	self = 4 ifTrue: [^ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		X _ 'V'.
		(self-5) timesRepeat: [X _ X append: 'I'].
		^ X.
	].
	^ 'IX'.! !

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:31:59'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:31:59'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:31:59'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:31:59'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:31:59'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:31:59'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:31:59'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:31:59'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:32:00'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:32:00'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:33:05'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:33:05'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:33:05'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:33:05'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:33:05'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:33:05'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:33:05'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:33:05'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:33:05'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:33:05'!
PASSED!

----SNAPSHOT----(30 September 2021 18:33:10) CuisUniversity-4532.image priorSource: 17688371!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:33:43' prior: 50884956!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
		^ x.
	].
	self = 4 ifTrue: [^ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
		^ x.
	].
	^ 'IX'.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 18:35:54'!
test10
	self assert: 'X' equals: 10 asRoman. ! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:36:12' prior: 50885014!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
		^ x.
	].
	self = 4 ifTrue: [^ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
		^ x.
	].
	self = 9 ifTrue: [^ 'IX'].
	^ 'X'.! !

----SNAPSHOT----(30 September 2021 18:36:23) CuisUniversity-4532.image priorSource: 17707528!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:39:14' prior: 50885030!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
	].
	self = 4 ifTrue: [^ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
	].
	self = 9 ifTrue: [^ 'IX'].
	self = 10 ifTrue: [^ 'X'].
	^ x.! !

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 18:39:27'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:39:27'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:39:28'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:39:28'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:39:28'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:39:28'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:39:28'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:39:28'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:39:28'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:39:28'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 18:39:28'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:41:15' prior: 50885045!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
	].
	self = 9 ifTrue: [x _ 'IX'].
	self = 10 ifTrue: [x _ 'X'].
	^ x.! !

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 18:41:19'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 18:47:11'!
test11
	self assert: 'XI' equals: 11 asRoman. 
	! !

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 18:47:13'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:47:29' prior: 50885082!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
	].
	self = 9 ifTrue: [x _ 'IX'].
	self = 10 ifTrue: [x _ 'X'].
	self = 11 ifTrue: [x _ 'XI'].
	^ x.! !

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 18:47:30'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:47:30'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:47:30'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:47:30'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:47:30'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:47:30'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:47:31'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:47:31'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:47:31'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:47:31'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 18:47:31'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 18:47:31'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 18:49:03'!
test12
	self assert: 'XII' equals: 12 asRoman. 
	! !

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 18:49:03'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:49:21' prior: 50885126!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
	].
	self = 9 ifTrue: [x _ 'IX'].
	self = 10 ifTrue: [x _ 'X'].
	self = 11 ifTrue: [x _ 'XI'].
	self = 12 ifTrue: [x _ 'XII'].
	^ x.! !

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 18:49:24'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 18:51:38'!
test13
	self assert: 'XIII' equals: 13 asRoman. 
	! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:51:49' prior: 50885173!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
	].
	self = 9 ifTrue: [x _ 'IX'].
	self = 10 ifTrue: [x _ 'X'].
	self = 11 ifTrue: [x _ 'XI'].
	self = 12 ifTrue: [x _ 'XII'].
	self = 13 ifTrue: [x _ 'XIII'].
	^ x.! !

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 18:51:51'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 18:51:51'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 18:51:51'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 18:51:51'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 18:51:51'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 18:51:51'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 18:51:52'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 18:51:52'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 18:51:52'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 18:51:52'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 18:51:52'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 18:51:52'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 18:51:52'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 18:51:52'!
PASSED!

		|x|!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:59:42' prior: 50885221!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
	].
	self = 9 ifTrue: [x _ 'IX'].
	self = 10 ifTrue: [x _ 'X'].
	self = 11 ifTrue: [x _ 'XI'].
	self = 12 ifTrue: [x _ 'XII'].
	self = 13 ifTrue: [x _ 'XIII'].
	^ x.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 18:59:58' prior: 50885268!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		|y|
		y _ 'V'.
		(self-5) timesRepeat: [y _ y append: 'I'].
	].
	self = 9 ifTrue: [x _ 'IX'].
	self = 10 ifTrue: [x _ 'X'].
	self = 11 ifTrue: [x _ 'XI'].
	self = 12 ifTrue: [x _ 'XII'].
	self = 13 ifTrue: [x _ 'XIII'].
	^ x.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:00:20' prior: 50885283!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
	].
	self = 9 ifTrue: [x _ 'IX'].
	self = 10 ifTrue: [x _ 'X'].
	self = 11 ifTrue: [x _ 'XI'].
	self = 12 ifTrue: [x _ 'XII'].
	self = 13 ifTrue: [x _ 'XIII'].
	^ x.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:00:32' prior: 50885299!
asRoman
	|y|
	y _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [y _ y append: 'I'].
	].
	self = 4 ifTrue: [y _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		y _ 'V'.
		(self-5) timesRepeat: [y _ y append: 'I'].
	].
	self = 9 ifTrue: [y _ 'IX'].
	self = 10 ifTrue: [y _ 'X'].
	self = 11 ifTrue: [y _ 'XI'].
	self = 12 ifTrue: [y _ 'XII'].
	self = 13 ifTrue: [y _ 'XIII'].
	^ y.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:00:49' prior: 50885314!
asRoman
	|y|
	y _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [y _ y append: 'I'].
	].
	self = 4 ifTrue: [y _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		|x|
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
	].
	self = 9 ifTrue: [y _ 'IX'].
	self = 10 ifTrue: [y _ 'X'].
	self = 11 ifTrue: [y _ 'XI'].
	self = 12 ifTrue: [y _ 'XII'].
	self = 13 ifTrue: [y _ 'XIII'].
	^ y.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:01:09' prior: 50885329!
asRoman
	|y|
	y _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [y _ y append: 'I'].
	].
	self = 4 ifTrue: [y _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		y _ 'V'.
		(self-5) timesRepeat: [y _ y append: 'I'].
	].
	self = 9 ifTrue: [y _ 'IX'].
	self = 10 ifTrue: [y _ 'X'].
	self = 11 ifTrue: [y _ 'XI'].
	self = 12 ifTrue: [y _ 'XII'].
	self = 13 ifTrue: [y _ 'XIII'].
	^ y.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:01:14' prior: 50885345!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ 'V'.
		(self-5) timesRepeat: [x _ x append: 'I'].
	].
	self = 9 ifTrue: [x _ 'IX'].
	self = 10 ifTrue: [x _ 'X'].
	self = 11 ifTrue: [x _ 'XI'].
	self = 12 ifTrue: [x _ 'XII'].
	self = 13 ifTrue: [x _ 'XIII'].
	^ x.! !

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 19:01:23'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 19:01:23'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 19:01:23'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 19:01:23'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 19:01:23'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 19:01:23'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 19:01:24'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 19:01:24'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 19:01:24'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 19:01:24'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 19:01:24'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 19:01:24'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 19:01:24'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 19:01:24'!
PASSED!

----SNAPSHOT----(30 September 2021 19:01:47) CuisUniversity-4532.image priorSource: 17708503!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:04:00'!
pepito: aString
	|x|
	x _ 'V'.
	(self-5) timesRepeat: [x _ x append: 'I'].! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:04:15' prior: 50885409!
pepito: aaString
	|x|
	x _ 'V'.
	(self-5) timesRepeat: [x _ x append: 'I'].! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:04:19' prior: 50885415!
pepito: aaString
	|aString|
	aString _ 'V'.
	(self-5) timesRepeat: [aString _ aString append: 'I'].! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:05:54' prior: 50885421!
pepito: aStringToBuild
	|aString|
	aString _ aStringToBuild.
	(self-5) timesRepeat: [aString _ aString append: 'I'].
	^ aString! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:06:37' prior: 50885360!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		self timesRepeat: [x _ x append: 'I'].
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ self pepito: 'V'.
	].
	self = 9 ifTrue: [x _ 'IX'].
	self = 10 ifTrue: [x _ 'X'].
	self = 11 ifTrue: [x _ 'XI'].
	self = 12 ifTrue: [x _ 'XII'].
	self = 13 ifTrue: [x _ 'XIII'].
	^ x.! !

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 19:06:40'!
PASSED!

----SNAPSHOT----(30 September 2021 19:38:48) CuisUniversity-4532.image priorSource: 17720171!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:48:22' prior: 50885434!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		x _ self pepito: ''.
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ self-5 pepito: 'V'.
	].
	self = 9 ifTrue: [x _ 'IX'].
	self = 10 ifTrue: [x _ 'X'].
	self = 11 ifTrue: [x _ 'XI'].
	self = 12 ifTrue: [x _ 'XII'].
	self = 13 ifTrue: [x _ 'XIII'].
	^ x.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:48:29' prior: 50885427!
pepito: aStringToBuild
	|aString|
	aString _ aStringToBuild.
	(self) timesRepeat: [aString _ aString append: 'I'].
	^ aString! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:48:31' prior: 50885496!
pepito: aStringToBuild
	|aString|
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: 'I'].
	^ aString! !

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 19:48:37'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 19:48:37'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 19:48:37'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 19:48:37'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 19:48:37'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 19:48:37'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 19:48:37'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 19:48:37'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 19:48:38'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 19:48:38'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 19:48:38'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 19:48:38'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 19:48:38'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 19:48:38'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:50:37' prior: 50885482!
asRoman
	|x|
	x _ ''.
	(self between: 1 and: 3) ifTrue: [
		x _ self pepito: ''.
	].
	self = 4 ifTrue: [x _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		x _ self-5 pepito: 'V'.
	].
	self = 9 ifTrue: [x _ 'IX'].
	(self between: 10 and: 13) ifTrue: [
		x _ self-10 pepito: 'X'.
	].
	^ x.! !

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 19:50:40'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:50:48' prior: 50885541!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	(self between: 1 and: 3) ifTrue: [
		romanizedNumber _ self pepito: ''.
	].
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		romanizedNumber _ self-5 pepito: 'V'.
	].
	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber _ self-10 pepito: 'X'.
	].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:51:02' prior: 50885584!
asRoman
	|romanizedNumber|
	(self between: 1 and: 3) ifTrue: [
		romanizedNumber _ self pepito: ''.
	].
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		romanizedNumber _ self-5 pepito: 'V'.
	].
	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber _ self-10 pepito: 'X'.
	].
	^ romanizedNumber.! !

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 19:51:05'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:51:24' prior: 50885600!
asRoman
	|romanizedNumber|
	(self between: 1 and: 3) ifTrue: [
		romanizedNumber _ self pepito: ''.
	].

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		romanizedNumber _ self-5 pepito: 'V'.
	].

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber _ self-10 pepito: 'X'.
	].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 19:52:27' prior: 50885646!
asRoman
	|romanizedNumber|
	(self between: 1 and: 3) ifTrue: [
		romanizedNumber _ self pepito: ''.
	].

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	(self between: 5 and: 8) ifTrue: [
		romanizedNumber _ self-5 pepito: 'V'.
	].

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber _ self-10 pepito: 'X'.
	].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:06:48'!
pepito2ConX: xInteger Y: yInteger Z: zString
	|romanizedNumber|
	(self between: xInteger and: yInteger ) ifTrue: [
		romanizedNumber _ (self - xInteger ) pepito: zString .
	].
	^ romanizedNumber ! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:11:01'!
pepito2ConX: xInteger Y: yInteger Z: zString previous: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString .
	].
	^ romanizedNumber ! !

!methodRemoval: SmallInteger #pepito2ConX:Y:Z: stamp: 'MK 9/30/2021 20:11:04'!
pepito2ConX: xInteger Y: yInteger Z: zString
	|romanizedNumber|
	(self between: xInteger and: yInteger ) ifTrue: [
		romanizedNumber _ (self - xInteger ) pepito: zString .
	].
	^ romanizedNumber !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:12:55' prior: 50885661!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2ConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self pepito2ConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self pepito2ConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	^ romanizedNumber.! !

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 20:12:57'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 20:12:58'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:14:37' prior: 50885702!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self pepito2ConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self pepito2ConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self pepito2ConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	^ romanizedNumber.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 20:27:03'!
test14
	self assert: 'XIV' equals: 14 asRoman. 
	! !

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 20:27:05'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:27:27' prior: 50885749!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self pepito2ConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self pepito2ConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self pepito2ConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	^ romanizedNumber.! !

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 20:27:33'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 20:27:33'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 20:27:33'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 20:27:33'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 20:27:33'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 20:27:33'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 20:27:33'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 20:27:34'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 20:27:34'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 20:27:34'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 20:27:34'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 20:27:34'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 20:27:34'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 20:27:34'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 20:27:34'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 20:30:51'!
test15
	self assert: 'XV' equals: 15 asRoman. 
	! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:31:20' prior: 50885771!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self pepito2ConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self pepito2ConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self pepito2ConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self pepito2ConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	^ romanizedNumber.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 20:35:25'!
test19
	self assert: 'XIX' equals: 19 asRoman. 
	! !

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 20:35:28'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:35:44' prior: 50885826!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self pepito2ConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self pepito2ConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self pepito2ConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self pepito2ConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 20:35:46'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 20:35:46'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 20:35:46'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 20:35:46'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 20:35:46'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 20:35:46'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 20:35:47'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 20:41:14'!
test20
	self assert: 'XX' equals: 20 asRoman. 
	! !

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 20:41:15'!
FAILURE!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 20:41:34'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:42:03' prior: 50885853!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self pepito2ConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self pepito2ConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self pepito2ConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self pepito2ConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self pepito2ConX: 20 Y: 23 Z: 'XX' previous: romanizedNumber.
	^ romanizedNumber.! !

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 20:42:05'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 20:42:05'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 20:42:05'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 20:42:05'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 20:42:06'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 20:47:14'!
test24
	self assert: 'XXIV' equals: 24 asRoman. 
	! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:47:37' prior: 50885921!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self pepito2ConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self pepito2ConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self pepito2ConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self pepito2ConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self pepito2ConX: 20 Y: 23 Z: 'XX' previous: romanizedNumber.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:52:36'!
pepito: aStringToBuild with: romanNumberUnit
	|aString|
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: 'I'].
	^ aString! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:53:12' prior: 50885684!
pepito2ConX: xInteger Y: yInteger Z: zString previous: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: romanizedNumber with: zString.
	].
	^ romanizedNumber ! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:53:26' prior: 50885503!
pepito: aStringToBuild
	|aString|
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: aStringToBuild ].
	^ aString! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:53:53' prior: 50886022!
pepito2ConX: xInteger Y: yInteger Z: zString previous: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: romanizedNumber with: 'I'.
	].
	^ romanizedNumber ! !

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 20:53:57'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 20:53:57'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 20:53:57'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 20:53:58'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 20:53:58'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 20:53:58'!
FAILURE!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 20:53:58'!
FAILURE!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 20:53:58'!
FAILURE!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 20:53:58'!
FAILURE!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 20:53:58'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 20:53:58'!
FAILURE!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 20:53:58'!
FAILURE!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 20:53:58'!
FAILURE!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 20:53:58'!
FAILURE!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 20:53:58'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 20:53:58'!
FAILURE!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 20:53:58'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 20:53:58'!
FAILURE!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 20:53:58'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:55:06' prior: 50886039!
pepito2ConX: xInteger Y: yInteger Z: zString previous: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber ! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 20:55:19'!
test25
	self assert: 'XXV' equals: 25 asRoman. 
	! !

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 20:55:21'!
FAILURE!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:55:41' prior: 50885989!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self pepito2ConX: 0 Y: 3 Z: '' previous: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self pepito2ConX: 5 Y: 8 Z: 'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self pepito2ConX: 10 Y: 13 Z: 'X' previous: romanizedNumber.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self pepito2ConX: 15 Y: 18 Z: 'XV' previous: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self pepito2ConX: 20 Y: 23 Z: 'XX' previous: romanizedNumber.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self pepito2ConX: 25 Y: 28 Z: 'XXV' previous: romanizedNumber.
	^ romanizedNumber.! !

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 20:55:43'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 20:55:43'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 20:55:43'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 20:55:43'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 20:55:43'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 20:55:43'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 20:55:43'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 20:55:44'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 20:56:09' prior: 50886014!
pepito: aStringToBuild with: romanNumberUnit
	|aString|
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: romanNumberUnit ].
	^ aString! !

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 20:56:14'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 20:56:15'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 20:56:15'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 20:56:15'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 20:56:15'!
PASSED!

!methodRemoval: SmallInteger #pepito: stamp: 'MK 9/30/2021 20:56:22'!
pepito: aStringToBuild
	|aString|
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: aStringToBuild ].
	^ aString!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:01:16'!
checkIfCanConvertToRomanNumberSince: xInteger To: yInteger With: zString previousYYY: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber ! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 21:01:16' prior: 50886107!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self checkIfCanConvertToRomanNumberSince: 0 To: 3 With: '' previousYYY: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self checkIfCanConvertToRomanNumberSince: 5 To: 8 With: 'V' previousYYY: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self checkIfCanConvertToRomanNumberSince: 10 To: 13 With: 'X' previousYYY: romanizedNumber.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self checkIfCanConvertToRomanNumberSince: 15 To: 18 With: 'XV' previousYYY: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self checkIfCanConvertToRomanNumberSince: 20 To: 23 With: 'XX' previousYYY: romanizedNumber.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self checkIfCanConvertToRomanNumberSince: 25 To: 28 With: 'XXV' previousYYY: romanizedNumber.
	^ romanizedNumber.! !

!methodRemoval: SmallInteger #pepito2ConX:Y:Z:previous: stamp: 'MK 9/30/2021 21:01:17'!
pepito2ConX: xInteger Y: yInteger Z: zString previous: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:03:04'!
checkIfCanConvertToRomanBetween: xInteger and: yInteger with: zString previousYYY: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber ! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 21:03:04' prior: 50886249!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self checkIfCanConvertToRomanBetween: 0 and: 3 with: '' previousYYY: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self checkIfCanConvertToRomanBetween: 5 and: 8 with: 'V' previousYYY: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self checkIfCanConvertToRomanBetween: 10 and: 13 with: 'X' previousYYY: romanizedNumber.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self checkIfCanConvertToRomanBetween: 15 and: 18 with: 'XV' previousYYY: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self checkIfCanConvertToRomanBetween: 20 and: 23 with: 'XX' previousYYY: romanizedNumber.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self checkIfCanConvertToRomanBetween: 25 and: 28 with: 'XXV' previousYYY: romanizedNumber.
	^ romanizedNumber.! !

!methodRemoval: SmallInteger #checkIfCanConvertToRomanNumberSince:To:With:previousYYY: stamp: 'MK 9/30/2021 21:03:04'!
checkIfCanConvertToRomanNumberSince: xInteger To: yInteger With: zString previousYYY: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber !

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:04:53'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 21:04:54'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 21:04:55'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:04:55'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:08:11'!
cconvertToRomanBetween: xInteger and: yInteger with: zString previousYYY: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber ! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 21:08:12' prior: 50886302!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self cconvertToRomanBetween: 0 and: 3 with: '' previousYYY: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self cconvertToRomanBetween: 5 and: 8 with: 'V' previousYYY: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self cconvertToRomanBetween: 10 and: 13 with: 'X' previousYYY: romanizedNumber.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self cconvertToRomanBetween: 15 and: 18 with: 'XV' previousYYY: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self cconvertToRomanBetween: 20 and: 23 with: 'XX' previousYYY: romanizedNumber.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self cconvertToRomanBetween: 25 and: 28 with: 'XXV' previousYYY: romanizedNumber.
	^ romanizedNumber.! !

!methodRemoval: SmallInteger #checkIfCanConvertToRomanBetween:and:with:previousYYY: stamp: 'MK 9/30/2021 21:08:12'!
checkIfCanConvertToRomanBetween: xInteger and: yInteger with: zString previousYYY: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber !

----SNAPSHOT----(30 September 2021 21:17:43) CuisUniversity-4532.image priorSource: 17722507!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:18:43' prior: 50886400!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self cconvertToRomanBetween: 0 and: 3 with: '' previousYYY: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self cconvertToRomanBetween: 5 and: 8 with: 'V' previousYYY: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self cconvertToRomanBetween: 10 and: 13 with: 'X' previousYYY: romanizedNumber.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self cconvertToRomanBetween: 15 and: 18 with: 'XV' previousYYY: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self cconvertToRomanBetween: 20 and: 23 with: 'XX' previousYYY: romanizedNumber.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self cconvertToRomanBetween: 25 and: 28 with: 'XXV' previousYYY: romanizedNumber.
	
	self = 29 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:21:00'!
convertToRomanBetween: xInteger and: yInteger with: zString previousYYY: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber ! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 21:21:01' prior: 50886445!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previousYYY: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: 'V' previousYYY: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self convertToRomanBetween: 10 and: 13 with: 'X' previousYYY: romanizedNumber.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self convertToRomanBetween: 15 and: 18 with: 'XV' previousYYY: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self convertToRomanBetween: 20 and: 23 with: 'XX' previousYYY: romanizedNumber.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self convertToRomanBetween: 25 and: 28 with: 'XXV' previousYYY: romanizedNumber.
	
	self = 29 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !

!methodRemoval: SmallInteger #cconvertToRomanBetween:and:with:previousYYY: stamp: 'MK 9/30/2021 21:21:01'!
cconvertToRomanBetween: xInteger and: yInteger with: zString previousYYY: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:21:45'!
convertToRomanBetween: xInteger and: yInteger with: zString previousYYY: romanizedNumber withXXX: aRomanNumberDigit 
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber ! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 21:21:46' prior: 50886487!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previousYYY: romanizedNumber withXXX: 'I'.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: 'V' previousYYY: romanizedNumber withXXX: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self convertToRomanBetween: 10 and: 13 with: 'X' previousYYY: romanizedNumber withXXX: 'I'.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self convertToRomanBetween: 15 and: 18 with: 'XV' previousYYY: romanizedNumber withXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self convertToRomanBetween: 20 and: 23 with: 'XX' previousYYY: romanizedNumber withXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self convertToRomanBetween: 25 and: 28 with: 'XXV' previousYYY: romanizedNumber withXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !

!methodRemoval: SmallInteger #convertToRomanBetween:and:with:previousYYY: stamp: 'MK 9/30/2021 21:21:46'!
convertToRomanBetween: xInteger and: yInteger with: zString previousYYY: romanizedNumber
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: 'I'.
	].
	^ romanizedNumber !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:22:01' prior: 50886529!
convertToRomanBetween: xInteger and: yInteger with: zString previousYYY: romanizedNumber withXXX: aRomanNumberDigit 
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: aRomanNumberDigit.
	].
	^ romanizedNumber ! !

----SNAPSHOT----(30 September 2021 21:22:23) CuisUniversity-4532.image priorSource: 17753308!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:31:36' prior: 50886540!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	(self between: 0 and: 9) ifTrue: [
		^ self asRomanUnit.	
	].
	
	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previousYYY: romanizedNumber withXXX: 'I'.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: 'V' previousYYY: romanizedNumber withXXX: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self convertToRomanBetween: 10 and: 13 with: 'X' previousYYY: romanizedNumber withXXX: 'I'.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self convertToRomanBetween: 15 and: 18 with: 'XV' previousYYY: romanizedNumber withXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self convertToRomanBetween: 20 and: 23 with: 'XX' previousYYY: romanizedNumber withXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self convertToRomanBetween: 25 and: 28 with: 'XXV' previousYYY: romanizedNumber withXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:32:07'!
asRomanUnit
	|romanizedNumber|
	romanizedNumber _ ''.

	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previousYYY: romanizedNumber withXXX: 'I'.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: 'V' previousYYY: romanizedNumber withXXX: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	^ romanizedNumber.! !

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 21:32:11'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 21:32:12'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 21:32:12'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 21:32:12'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 21:32:12'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 21:32:12'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 21:32:12'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 21:32:12'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 21:32:12'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:32:12'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:42:14'!
asRomanWithTens: tens fives: fives units: units
	|romanizedNumber|
	romanizedNumber _ ''.

	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previousYYY: romanizedNumber withXXX: units.

	self = 4 ifTrue: [^ (units,fives)].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: 'V' previousYYY: romanizedNumber withXXX: units.

	self = 9 ifTrue: [romanizedNumber _ (units,tens)].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:42:29'!
convertToRomanBetween: xInteger and: yInteger with: zString previous: romanizedNumber with: aRomanNumberDigit 
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: aRomanNumberDigit.
	].
	^ romanizedNumber ! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 21:42:29' prior: 50886599!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	(self between: 0 and: 9) ifTrue: [
		^ self asRomanUnit.	
	].
	
	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previous: romanizedNumber with: 'I'.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: 'V' previous: romanizedNumber with: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self convertToRomanBetween: 10 and: 13 with: 'X' previous: romanizedNumber with: 'I'.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self convertToRomanBetween: 15 and: 18 with: 'XV' previous: romanizedNumber with: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self convertToRomanBetween: 20 and: 23 with: 'XX' previous: romanizedNumber with: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self convertToRomanBetween: 25 and: 28 with: 'XXV' previous: romanizedNumber with: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 21:42:29' prior: 50886636!
asRomanUnit
	|romanizedNumber|
	romanizedNumber _ ''.

	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previous: romanizedNumber with: 'I'.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: 'V' previous: romanizedNumber with: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 21:42:29' prior: 50886695!
asRomanWithTens: tens fives: fives units: units
	|romanizedNumber|
	romanizedNumber _ ''.

	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previous: romanizedNumber with: units.

	self = 4 ifTrue: [^ (units,fives)].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: 'V' previous: romanizedNumber with: units.

	self = 9 ifTrue: [romanizedNumber _ (units,tens)].
	^ romanizedNumber.! !

!methodRemoval: SmallInteger #convertToRomanBetween:and:with:previousYYY:withXXX: stamp: 'MK 9/30/2021 21:42:29'!
convertToRomanBetween: xInteger and: yInteger with: zString previousYYY: romanizedNumber withXXX: aRomanNumberDigit 
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) pepito: zString with: aRomanNumberDigit.
	].
	^ romanizedNumber !

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:43:26'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:43:27'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:44:17' prior: 50886722!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	(self between: 0 and: 9) ifTrue: [
		^ self asRomanWithTens: 'X' fives: 'V' units: 'I'.	
	].
	
	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previous: romanizedNumber with: 'I'.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: 'V' previous: romanizedNumber with: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	romanizedNumber _ self convertToRomanBetween: 10 and: 13 with: 'X' previous: romanizedNumber with: 'I'.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self convertToRomanBetween: 15 and: 18 with: 'XV' previous: romanizedNumber with: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self convertToRomanBetween: 20 and: 23 with: 'XX' previous: romanizedNumber with: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self convertToRomanBetween: 25 and: 28 with: 'XXV' previous: romanizedNumber with: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:44:43' prior: 50886845!
asRoman
	|romanizedNumber|
	romanizedNumber _ ''.
	
	(self between: 0 and: 9) ifTrue: [
		^ self asRomanWithTens: 'X' fives: 'V' units: 'I'.	
	].
	
	romanizedNumber _ self convertToRomanBetween: 10 and: 13 with: 'X' previous: romanizedNumber with: 'I'.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self convertToRomanBetween: 15 and: 18 with: 'XV' previous: romanizedNumber with: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self convertToRomanBetween: 20 and: 23 with: 'XX' previous: romanizedNumber with: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self convertToRomanBetween: 25 and: 28 with: 'XXV' previous: romanizedNumber with: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:44:47'!
PASSED!

!methodRemoval: SmallInteger #asRomanUnit stamp: 'MK 9/30/2021 21:45:16'!
asRomanUnit
	|romanizedNumber|
	romanizedNumber _ ''.

	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previous: romanizedNumber with: 'I'.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: 'V' previous: romanizedNumber with: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	^ romanizedNumber.!

----SNAPSHOT----(30 September 2021 21:45:29) CuisUniversity-4532.image priorSource: 17758242!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:48:27'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 21:48:27'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 21:48:27'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 21:48:27'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 21:48:27'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 21:48:27'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 21:48:27'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 21:48:27'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 21:48:27'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 21:48:27'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 21:48:28'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 21:48:28'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 21:48:28'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 21:48:28'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 21:48:28'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 21:48:28'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 21:48:28'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 21:48:28'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 21:48:28'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:48:28'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:49:24' prior: 50886882!
asRoman
	|romanizedNumber decena unidad |
	romanizedNumber _ ''.
	
	decena _ self // 10.
	unidad _ self \\ 10.
	
	(self between: 0 and: 9) ifTrue: [
		^ self asRomanWithTens: 'X' fives: 'V' units: 'I'.	
	].
	
	romanizedNumber _ self convertToRomanBetween: 10 and: 13 with: 'X' previous: romanizedNumber with: 'I'.
	
	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self convertToRomanBetween: 15 and: 18 with: 'XV' previous: romanizedNumber with: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	romanizedNumber _ self convertToRomanBetween: 20 and: 23 with: 'XX' previous: romanizedNumber with: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	romanizedNumber _ self convertToRomanBetween: 25 and: 28 with: 'XXV' previous: romanizedNumber with: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:49:36'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 21:49:36'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 21:49:36'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 21:49:36'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 21:49:36'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 21:49:36'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 21:49:36'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:49:37'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:53:37' prior: 50887015!
asRoman
	|romanizedNumber decena unidad romanTens romanUnit |
	romanizedNumber _ ''.
	
	decena _ self // 10.
	unidad _ self \\ 10.
	
	romanUnit _ unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.	
	romanTens _ decena asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	^ romanTens, romanUnit! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 21:53:52' prior: 50887089!
asRoman
	|decena unidad romanTens romanUnit |
	
	decena _ self // 10.
	unidad _ self \\ 10.
	
	romanUnit _ unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.	
	romanTens _ decena asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	^ romanTens, romanUnit! !

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:54:00'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 21:54:00'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 21:54:00'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:54:01'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'MK 9/30/2021 21:54:22'!
test29
	self assert: 'XXIX' equals: 29 asRoman. 
	! !

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 21:54:23'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 21:54:23'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 21:54:23'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 21:54:23'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 21:54:23'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 21:54:24'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 21:58:17'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 21:58:18'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 22:00:27' prior: 50886773!
asRomanWithTens: tens fives: fives units: units
	|romanizedNumber|
	romanizedNumber _ ''.

	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previous: romanizedNumber with: units.

	self = 4 ifTrue: [^ (units,fives)].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: fives previous: romanizedNumber with: units.

	self = 9 ifTrue: [romanizedNumber _ (units,tens)].
	^ romanizedNumber.! !

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 22:00:30'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 22:00:30'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 22:00:30'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 22:00:30'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 22:00:31'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 22:02:07'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 22:02:08'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 22:02:08'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 22:02:08'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 22:02:08'!
PASSED!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 22:06:02'!
timesAppend: aStringToBuild to: romanNumberUnit
	|aString|
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: romanNumberUnit ].
	^ aString! !

!methodRemoval: SmallInteger #pepito:with: stamp: 'MK 9/30/2021 22:06:02'!
pepito: aStringToBuild with: romanNumberUnit
	|aString|
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: romanNumberUnit ].
	^ aString!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 22:07:03' prior: 50887363!
timesAppend: aStringToBuild to: romanNumberUnit
	|aString|
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: romanNumberUnit ].
	^ aString! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 22:07:20' prior: 50887379!
timesAppend: aRomanNumeral to: romanNumberUnit
	|aString|
	aString _ aRomanNumeral.
	self timesRepeat: [aString _ aString append: romanNumberUnit ].
	^ aString! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 22:07:31' prior: 50887387!
timesAppend: aRomanNumeral to: aRomanNumber
	|aString|
	aString _ aRomanNumeral.
	self timesRepeat: [aString _ aString append: aRomanNumber ].
	^ aString! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 22:07:59' prior: 50887395!
timesAppend: aRomanNumeral to: aRomanNumber
	|aRomanNumberToAppendNumerals|
	aRomanNumberToAppendNumerals _ aRomanNumeral.
	self timesRepeat: [aRomanNumberToAppendNumerals _ aRomanNumberToAppendNumerals append: aRomanNumber ].
	^ aRomanNumberToAppendNumerals! !

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 22:08:24'!
ERROR!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 22:09:16' prior: 50886711!
convertToRomanBetween: xInteger and: yInteger with: zString previous: romanizedNumber with: aRomanNumberDigit 
	(self between: xInteger and: yInteger ) ifTrue: [
		^ (self - xInteger ) timesAppend: zString to: aRomanNumberDigit.
	].
	^ romanizedNumber ! !

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 22:09:18'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'MK 9/30/2021 22:09:19'!
PASSED!

----SNAPSHOT----(30 September 2021 22:09:24) CuisUniversity-4532.image priorSource: 17770141!
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 22:10:49' prior: 50887254!
asRomanWithTens: tens fives: fives units: units
	|romanizedNumber|
	romanizedNumber _ ''.

	romanizedNumber _ self convertToRomanBetween: 0 and: 3 with: '' previous: romanizedNumber with: units.

	self = 4 ifTrue: [^ (units,fives)].
	romanizedNumber _ self convertToRomanBetween: 5 and: 8 with: fives previous: romanizedNumber with: units.

	self = 9 ifTrue: [^ (units,tens)].
	^ romanizedNumber.! !
!SmallInteger methodsFor: 'romans' stamp: 'MK 9/30/2021 22:10:58' prior: 50887403!
timesAppend: aRomanNumeral to: aRomanNumber
	|aRomanNumberToAppendNumerals|
	
	aRomanNumberToAppendNumerals _ aRomanNumeral.
	self timesRepeat: [aRomanNumberToAppendNumerals _ aRomanNumberToAppendNumerals append: aRomanNumber ].
	^ aRomanNumberToAppendNumerals! !

----SNAPSHOT----(30 September 2021 22:12:43) CuisUniversity-4532.image priorSource: 17786322!

----SNAPSHOT----(30 September 2021 22:14:43) CuisUniversity-4532.image priorSource: 17787303!

----STARTUP---- (4 October 2021 20:26:25) as D:\001.Maca\2c2021\inge1\qa2\CuisUniversity-4532.image!


TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TestMarsRover'!

!classDefinition: #TestMarsRover category: 'TestMarsRover' stamp: 'MK 10/4/2021 20:28:46'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TestMarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/4/2021 20:35:25'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!TestMarsRover methodsFor: 'nil' stamp: 'MK 10/4/2021 20:35:07'!
test01
	|marsRover|
	marsRover _ MarsRover new.! !

!classRemoval: #TestMarsRover stamp: 'MK 10/4/2021 20:43:14'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TestMarsRover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'MK 10/4/2021 20:43:40'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'nil' stamp: 'MK 10/4/2021 20:44:59'!
test01
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process : ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:45:07'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:45:27'!
at: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'nil' stamp: 'MK 10/4/2021 20:46:53'!
process: aCommandString
	^ self! !

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:47:03'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'MK 10/4/2021 20:47:07' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:48:02' prior: 50887562!
at: aPoint heading: aSymbol 
	^ self.! !

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:48:07'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:48:20'!
process
	self shouldBeImplemented.! !

!methodRemoval: MarsRover class #process stamp: 'MK 10/4/2021 20:49:44'!
process
	self shouldBeImplemented.!

!methodRemoval: MarsRover class #error: stamp: 'MK 10/4/2021 20:49:46'!
error: aString 
	self shouldBeImplemented.!

!methodRemoval: MarsRover class #at:heading: stamp: 'MK 10/4/2021 20:49:48'!
at: aPoint heading: aSymbol 
	^ self.!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:50:29'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:50:36'!
at: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:50:42' prior: 50887602!
at: aPoint heading: aSymbol 
	^ self.! !

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:50:49'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:50:58'!
process
	self shouldBeImplemented.! !

!methodRemoval: MarsRover #process: stamp: 'MK 10/4/2021 20:51:07'!
process: aCommandString
	^ self!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:51:10'!
ERROR!

!methodRemoval: MarsRover class #process stamp: 'MK 10/4/2021 20:51:29'!
process
	self shouldBeImplemented.!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:51:33'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:51:38' prior: 50887552!
test01
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:51:40'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:51:46'!
process: aString 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:51:50' prior: 50887640!
process: aString 
	^ self.! !

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:51:56'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:52:01'!
isAt: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:52:04' prior: 50887651!
isAt: aPoint heading: aSymbol 
	^ self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:52:42'!
isAt: aPoint heading: aSymbol 
	^ self.! !

!methodRemoval: MarsRover class #isAt:heading: stamp: 'MK 10/4/2021 20:52:42'!
isAt: aPoint heading: aSymbol 
	^ self.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:52:47'!
process: aString 
	^ self.! !

!methodRemoval: MarsRover class #process: stamp: 'MK 10/4/2021 20:52:47'!
process: aString 
	^ self.!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:54:32' prior: 50887607!
at: aPoint heading: aSymbol 
	^ self new initializeWith: aPoint and: aSymbol.! !

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:55:04'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/4/2021 20:55:16'!
Object subclass: #MarsRover
	instanceVariableNames: 'point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/4/2021 20:55:16'!
Object subclass: #MarsRover
	instanceVariableNames: 'point symbol'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/4/2021 20:55:16'!
initializeWith: aPoint and: aSymbol 
	self shouldBeImplemented.
	point := aPoint.
	symbol := aSymbol.! !
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/4/2021 20:55:34' prior: 50887697!
initializeWith: aPoint and: aSymbol 
	point := aPoint.
	symbol := aSymbol.
	^ self.! !

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:56:01'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:56:11' prior: 50887660!
isAt: aPoint heading: aSymbol 
	^ true.! !

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:56:19'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:56:19'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:56:40'!
test02
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 20:56:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 20:56:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 20:56:42'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 20:57:03' prior: 50887721!
test02
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #North) not.! !

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 20:57:05'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:02:08' prior: 50887712!
isAt: aPoint heading: aSymbol 
	aPoint = 1@2 ifTrue: [^true].
	^false.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:02:11' prior: 50887736!
test02
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 2@2 heading: #North) not.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:02:16' prior: 50887753!
test02
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #North) not.! !

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:06:14'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:06:28' prior: 50887747!
isAt: aPoint heading: aSymbol 
	(aPoint = 1@2) ifTrue: [^true].
	^false.! !

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:06:31'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:06:46' prior: 50887772!
isAt: aPoint heading: aSymbol 
	(aPoint = (1@2)) ifTrue: [^true].
	^false.! !

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:06:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:06:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:06:49'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:09:51'!
test03
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West) not.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:11:20' prior: 50887668!
process: aString 
aString do: [:aCommand | point _ point + (0@1)]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:11:46' prior: 50887800!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | point _ point + (0@1)]! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/4/2021 21:12:01'!
Object subclass: #MarsRover
	instanceVariableNames: 'position symbol'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:12:01' prior: 50887806!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | position _ position + (0@1)]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:12:01' prior: 50887704!
initializeWith: aPoint and: aSymbol 
	position := aPoint.
	symbol := aSymbol.
	^ self.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/4/2021 21:12:07'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:12:07' prior: 50887826!
initializeWith: aPoint and: aSymbol 
	position := aPoint.
	direction := aSymbol.
	^ self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:12:59' prior: 50887819!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		position _ position + (0@1) "asumimos q el comando es f"
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:14:00' prior: 50887780!
isAt: aPoint heading: aSymbol 
	position = aPoint ifTrue: [
		direction = aSymbol ifTrue: [^ true].	
	].
	
	^false.! !

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:14:03'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:14:03'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:14:03'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:14:03'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:14:03'!
FAILURE!

!methodRemoval: MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:14:20'!
test03
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West) not.!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:14:21'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:14:22'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:14:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:14:31'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:14:31'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:14:39' prior: 50887761!
test02
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #North).! !

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:14:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:14:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:14:39'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:14:45'!
test03
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West) not.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:14:49' prior: 50887906!
test03
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:14:51'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:15:32' prior: 50887845!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = 'f' ifTrue: [position _ position + (0@1)].
		
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:15:53' prior: 50887925!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = 'f' ifTrue: [position _ position + (0@1)].
		aCommand = 'l' ifTrue: [direction _ #West].
	]! !

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:15:56'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:16:21'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:16:21'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:16:50' prior: 50887933!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = 'f' ifTrue: [position _ position + (0@1)].
		aCommand = 'l' ifTrue: [direction _ #West].
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:17:33' prior: 50887949!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = 'f' ifTrue: [position _ position + (0@1)].
		aCommand = 'l' ifTrue: [direction _ #West].
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:17:40' prior: 50887958!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = 'f' ifTrue: [position _ position + (0@1)].
		aCommand = 'l' ifTrue: [direction _ #West].
	].! !

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:17:43'!
FAILURE!

|aSequenceOfCommands|!

aSequenceOfCommands _ 'fa'!

aSequenceOfCommands do: [:aCommand | ^ aCommand ].!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:24:35' prior: 50887967!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $l ifTrue: [direction _ #West].
	].! !

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:26:01'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:26:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:26:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:26:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:26:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:26:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:26:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:26:06'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:27:30'!
test04
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: #North).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:27:59' prior: 50887982!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [direction _ #West].
	].! !

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:28:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:28:05'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:28:05'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:28:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:28:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:28:06'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:28:20'!
test05
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:28:22'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:28:48' prior: 50888017!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [direction _ #West].
		aCommand = $r ifTrue: [direction _ #East].
	].! !

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:29:10'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:29:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:29:10'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:29:10'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:29:10'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:29:10'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:31:02'!
test06
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:32:19' prior: 50888052!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [
			direction = #North ifTrue: [direction _ #West].
			direction = #South ifTrue: [direction _ #East].
			
		].
		aCommand = $r ifTrue: [direction _ #East].
	].! !

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:32:21'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:32:45' prior: 50888086!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [
			direction = #North ifTrue: [direction _ #West].
			direction = #South ifTrue: [direction _ #East].
		].
		aCommand = $r ifTrue: [direction _ #East].
	].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:32:52' prior: 50888078!
test06
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:32:53'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:32:53'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:32:53'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:32:53'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:32:53'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:32:53'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:32:53'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:33:19' prior: 50888118!
test06
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:33:23' prior: 50888142!
test06
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:33:25'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:33:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:33:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:33:25'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:33:26'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:33:26'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:33:26'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:33:35'!
test07
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #South).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:33:52' prior: 50888103!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [
			direction = #North ifTrue: [direction _ #West].
			direction = #South ifTrue: [direction _ #East].
			direction = #East ifTrue: [direction _ #South].
		].
		aCommand = $r ifTrue: [direction _ #East].
	].! !

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:33:56'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:33:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:33:56'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:33:56'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:33:56'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:33:56'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:33:56'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:33:56'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:33:56'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:34:18' prior: 50888182!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [
			direction = #North ifTrue: [direction _ #West].
			direction = #South ifTrue: [direction _ #East].
			direction = #West ifTrue: [direction _ #South].
		].
		aCommand = $r ifTrue: [direction _ #East].
	].! !

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:34:20'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:34:26' prior: 50888174!
test07
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #South).! !

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:34:27'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:34:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:34:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:34:27'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:34:27'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:34:27'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:34:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:34:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:34:28'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:34:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:34:55'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:34:55'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:34:55'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:34:55'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:34:55'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:34:55'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:34:55'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:34:55'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:37:37' prior: 50888219!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [
			direction = #North ifTrue: [direction _ #West]
			ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
						direction = #West ifTrue: [direction _ #South].
					]	.
			].
		].
		aCommand = $r ifTrue: [direction _ #East].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:38:10' prior: 50888288!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [
			direction = #North ifTrue: [direction _ #West]
			ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
									
					].
				]	.
			].
		].
		aCommand = $r ifTrue: [direction _ #East].
	].! !

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:38:12'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:38:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:38:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:38:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:38:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:38:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:38:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:38:13'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:38:26'!
test08
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !

!testRun: #MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:38:27'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:38:32'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:39:05' prior: 50888306!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [
			direction = #North ifTrue: [direction _ #West]
			ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				]	.
			].
		].
		aCommand = $r ifTrue: [direction _ #East].
	].! !

!testRun: #MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:39:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:39:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:39:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:39:08'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:39:09'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:39:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:39:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:39:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:39:09'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:39:33'!
rotateLeft

	^ direction = #North ifTrue: [direction _ #West]
			ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				]	.
			]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:39:33' prior: 50888356!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [
			self rotateLeft.
		].
		aCommand = $r ifTrue: [direction _ #East].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:39:43' prior: 50888408!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [			self rotateLeft.		].
		aCommand = $r ifTrue: [direction _ #East].
	].! !

!testRun: #MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:39:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:39:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:39:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:39:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:39:49'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:39:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:39:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:39:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:39:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:43:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:43:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:43:00'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:43:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:43:00'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:43:00'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:43:00'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:43:00'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:43:00'!
PASSED!

----SNAPSHOT----(4 October 2021 21:43:03) CuisUniversity-4532.image priorSource: 17787398!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:43:40' prior: 50888420!
process: aSequenceOfCommands 
	aSequenceOfCommands do: [:aCommand | 
		aCommand = $f ifTrue: [position _ position + (0@1)].
		aCommand = $b ifTrue: [position _ position - (0@1)].
		aCommand = $l ifTrue: [			self rotateLeft.		].
		aCommand = $r ifTrue: [ self rotateRight.].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:44:05'!
rotateRight

	^ direction = #North ifTrue: [direction _ #East]
			ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				]	.
			]! !

!testRun: #MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:44:09'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:44:09'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:44:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:44:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:44:10'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:44:10'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:44:10'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:44:10'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:44:10'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:45:50'!
test02ForwardFromFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #North).! !

!methodRemoval: MarsRoverTest #test02 stamp: 'MK 10/4/2021 21:45:54'!
test02
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #North).!

!testRun: #MarsRoverTest #test02ForwardFromFacingNorth stamp: 'MK 10/4/2021 21:45:57'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:46:05'!
test01NoCommands
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !

!methodRemoval: MarsRoverTest #test01 stamp: 'MK 10/4/2021 21:46:09'!
test01
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:46:28'!
test03RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !

!methodRemoval: MarsRoverTest #test03 stamp: 'MK 10/4/2021 21:46:28'!
test03
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:46:42'!
test04BackwardsFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: #North).! !

!methodRemoval: MarsRoverTest #test04 stamp: 'MK 10/4/2021 21:46:42'!
test04
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:46:56'!
test05RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !

!methodRemoval: MarsRoverTest #test05 stamp: 'MK 10/4/2021 21:46:56'!
test05
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:47:08'!
test06RotateLeftFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !

!methodRemoval: MarsRoverTest #test06 stamp: 'MK 10/4/2021 21:47:08'!
test06
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:47:20'!
test07RotateLeftFacingWest
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #South).! !

!methodRemoval: MarsRoverTest #test07 stamp: 'MK 10/4/2021 21:47:22'!
test07
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #South).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:47:36'!
test08RotateLeftFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !

!methodRemoval: MarsRoverTest #test08 stamp: 'MK 10/4/2021 21:47:36'!
test08
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #North).!

!testRun: #MarsRoverTest #test08RotateLeftFacingEast stamp: 'MK 10/4/2021 21:47:51'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/4/2021 21:47:51'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardFromFacingNorth stamp: 'MK 10/4/2021 21:47:51'!
PASSED!

!testRun: #MarsRoverTest #test03RotateLeftFacingNorth stamp: 'MK 10/4/2021 21:47:51'!
PASSED!

!testRun: #MarsRoverTest #test04BackwardsFacingNorth stamp: 'MK 10/4/2021 21:47:51'!
PASSED!

!testRun: #MarsRoverTest #test05RotateRightFacingNorth stamp: 'MK 10/4/2021 21:47:51'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingSouth stamp: 'MK 10/4/2021 21:47:51'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingWest stamp: 'MK 10/4/2021 21:47:51'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftFacingEast stamp: 'MK 10/4/2021 21:47:51'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:48:24'!
test03BackwardsFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: #North).! !

!methodRemoval: MarsRoverTest #test04BackwardsFacingNorth stamp: 'MK 10/4/2021 21:48:24'!
test04BackwardsFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:48:36'!
test04RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !

!methodRemoval: MarsRoverTest #test05RotateRightFacingNorth stamp: 'MK 10/4/2021 21:48:36'!
test05RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:48:43'!
test05RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !

!methodRemoval: MarsRoverTest #test03RotateLeftFacingNorth stamp: 'MK 10/4/2021 21:48:43'!
test03RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:48:58'!
test04RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !

!methodRemoval: MarsRoverTest #test05RotateLeftFacingNorth stamp: 'MK 10/4/2021 21:48:58'!
test05RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:49:07'!
test05RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !

!methodRemoval: MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/4/2021 21:49:07'!
test04RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:49:13'!
test04RotateLeftFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !

!methodRemoval: MarsRoverTest #test08RotateLeftFacingEast stamp: 'MK 10/4/2021 21:49:13'!
test08RotateLeftFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:49:20'!
test09RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !

!methodRemoval: MarsRoverTest #test04RotateRightFacingNorth stamp: 'MK 10/4/2021 21:49:20'!
test04RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:49:27'!
test08RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !

!methodRemoval: MarsRoverTest #test09RotateRightFacingNorth stamp: 'MK 10/4/2021 21:49:27'!
test09RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:49:41'!
test04RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !

!methodRemoval: MarsRoverTest #test05RotateLeftFacingNorth stamp: 'MK 10/4/2021 21:49:41'!
test05RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:49:48'!
test07RotateLeftFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !

!methodRemoval: MarsRoverTest #test04RotateLeftFacingEast stamp: 'MK 10/4/2021 21:49:48'!
test04RotateLeftFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:49:55'!
test05RotateLeftFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !

!methodRemoval: MarsRoverTest #test06RotateLeftFacingSouth stamp: 'MK 10/4/2021 21:49:55'!
test06RotateLeftFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:50:00'!
test06RotateLeftFacingWest
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #South).! !

!methodRemoval: MarsRoverTest #test07RotateLeftFacingWest stamp: 'MK 10/4/2021 21:50:00'!
test07RotateLeftFacingWest
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #South).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/4/2021 21:50:18'!
test09RotateRightFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/4/2021 21:50:19'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/4/2021 21:50:19'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardFromFacingNorth stamp: 'MK 10/4/2021 21:50:19'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/4/2021 21:50:19'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/4/2021 21:50:19'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/4/2021 21:50:19'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/4/2021 21:50:19'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/4/2021 21:50:19'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/4/2021 21:50:20'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/4/2021 21:50:20'!
PASSED!

----SNAPSHOT----(4 October 2021 22:00:21) CuisUniversity-4532.image priorSource: 17818315!

----STARTUP---- (5 October 2021 16:10:58) as D:\001.Maca\2c2021\inge1\qa2\CuisUniversity-4532.image!

!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 16:11:45' prior: 50888489!
rotateRight

	^ direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 16:12:49' prior: 50887676!
at: xxx heading: aSymbol 
	^ self new initializeWith: xxx and: aSymbol.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 16:12:54' prior: 50888932!
at: xxx heading: yyy 
	^ self new initializeWith: xxx and: yyy.! !
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/5/2021 16:14:21' prior: 50887839!
initializeWith: xxx and: aSymbol 
	position := xxx.
	direction := aSymbol.
	^ self.! !
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/5/2021 16:14:37' prior: 50888943!
initializeWith: aPosition and: aSymbol 
	position := aPosition.
	direction := aSymbol.
	^ self.! !
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/5/2021 16:14:43' prior: 50888949!
initializeWith: aPosition and: aDirection 
	position := aPosition.
	direction := aDirection.
	^ self.! !
!MarsRover class methodsFor: 'initialization' stamp: 'MK 10/5/2021 16:14:52' prior: 50888938!
at: aPosition heading: yyy 
	^ self new initializeWith: aPosition and: yyy.! !
!MarsRover class methodsFor: 'initialization' stamp: 'MK 10/5/2021 16:14:56' prior: 50888962!
at: aPosition heading: aDirection 
	^ self new initializeWith: aPosition and: aDirection.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 16:16:56' prior: 50888540!
test01NoCommands
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
		
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #North).! !
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/5/2021 16:20:29' prior: 50888955!
initializeWith: aPosition and: aDirection 
	position := aPosition.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 16:20:32'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 16:20:32'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardFromFacingNorth stamp: 'MK 10/5/2021 16:20:32'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 16:20:32'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 16:20:32'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 16:20:32'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 16:20:32'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 16:20:32'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 16:20:32'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 16:20:32'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 16:21:23' prior: 50887853!
isAt: aPosition heading: aSymbol 
	position = aPosition ifTrue: [
		direction = aSymbol ifTrue: [^ true].	
	].
	
	^false.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 16:21:27' prior: 50889017!
isAt: aPosition heading: aDirection 
	position = aPosition ifTrue: [
		direction = aDirection ifTrue: [^ true].	
	].
	
	^false.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 16:25:18' prior: 50888396!
rotateLeft

	^ direction = #North ifTrue: [direction _ #West]
		ifFalse: [
			direction = #South ifTrue: [direction _ #East] ifFalse: [
				direction = #West ifTrue: [direction _ #South] ifFalse: [
					direction = #East ifTrue: [direction _ #North] 
				].
			].
		].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 16:25:38' prior: 50889031!
rotateLeft

	^ direction = #North ifTrue: [direction _ #West] ifFalse: [
		direction = #South ifTrue: [direction _ #East] ifFalse: [
			direction = #West ifTrue: [direction _ #South] ifFalse: [
				direction = #East ifTrue: [direction _ #North] 
			].
		].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 16:26:49' prior: 50888920!
rotateRight

	^ direction = #North ifTrue: [direction _ #East] ifFalse: [
		direction = #South ifTrue: [direction _ #West] ifFalse: [
			direction = #West ifTrue: [direction _ #North] ifFalse: [
				direction = #East ifTrue: [direction _ #South] 
			].
		].
	].! !

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 16:27:22'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 16:27:22'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardFromFacingNorth stamp: 'MK 10/5/2021 16:27:22'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 16:27:22'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 16:27:22'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 16:27:22'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 16:27:22'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 16:27:23'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 16:27:23'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 16:27:23'!
PASSED!

----SNAPSHOT----(5 October 2021 16:40:18) CuisUniversity-4532.image priorSource: 17832410!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 17:39:45'!
test10
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'fWr'.
	
	self assert: (marsRover isAt: 1@3 heading: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 17:39:56' prior: 50889099!
test10
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'fW'.
	
	self assert: (marsRover isAt: 1@3 heading: #South).! !

!testRun: #MarsRoverTest #test10 stamp: 'MK 10/5/2021 17:40:03'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 17:40:04'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardFromFacingNorth stamp: 'MK 10/5/2021 17:40:04'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 17:40:04'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 17:40:04'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 17:40:04'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 17:40:05'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 17:40:05'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 17:40:05'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 17:40:05'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MK 10/5/2021 17:40:05'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 17:40:16' prior: 50889107!
test10
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'fWr'.
	
	self assert: (marsRover isAt: 1@3 heading: #South).! !

!testRun: #MarsRoverTest #test10 stamp: 'MK 10/5/2021 17:40:18'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 17:42:45' prior: 50888477!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [position _ position + (0@1). noMatch _ false].
		aCommand = $b ifTrue: [position _ position - (0@1). noMatch _ false].
		aCommand = $l ifTrue: [			self rotateLeft	. noMatch _ false].
		aCommand = $r ifTrue: [ self rotateRight. noMatch _ false].
		noMatch ifTrue: [^ self]
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 17:42:47' prior: 50889157!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [position _ position + (0@1). noMatch _ false].
		aCommand = $b ifTrue: [position _ position - (0@1). noMatch _ false].
		aCommand = $l ifTrue: [			self rotateLeft	. noMatch _ false].
		aCommand = $r ifTrue: [ self rotateRight. noMatch _ false].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test10 stamp: 'MK 10/5/2021 17:43:12'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 17:43:12'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardFromFacingNorth stamp: 'MK 10/5/2021 17:43:12'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 17:43:12'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 17:43:12'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 17:43:12'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 17:43:12'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 17:43:12'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 17:43:12'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 17:43:12'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'MK 10/5/2021 17:43:12'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 17:47:55'!
test10CommandsAfterInvalidCommandAreDiscarded
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'fWr'.
	
	self assert: (marsRover isAt: 1@3 heading: #South).! !

!methodRemoval: MarsRoverTest #test10 stamp: 'MK 10/5/2021 17:47:55'!
test10
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'fWr'.
	
	self assert: (marsRover isAt: 1@3 heading: #South).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 17:50:20'!
test11MoveToNegativePosition
	| marsRover |
	marsRover _ MarsRover at: 0@0 heading: #South.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 0@-1 heading: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 17:50:21' prior: 50889236!
test11MoveToNegativePosition
	| marsRover |
	marsRover _ MarsRover at: 0@0 heading: #South.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 0@-1 heading: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 17:52:11' prior: 50889245!
test11MoveToNegativePosition
	| marsRover |
	marsRover _ MarsRover at: 0@0 heading: #North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 0@-1 heading: #North).! !

!testRun: #MarsRoverTest #test11MoveToNegativePosition stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test02ForwardFromFacingNorth stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!testRun: #MarsRoverTest #test11MoveToNegativePosition stamp: 'MK 10/5/2021 17:52:12'!
PASSED!

!methodRemoval: MarsRoverTest #test11MoveToNegativePosition stamp: 'MK 10/5/2021 17:52:43'!
test11MoveToNegativePosition
	| marsRover |
	marsRover _ MarsRover at: 0@0 heading: #North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 0@-1 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 17:53:08'!
test02MoveForwardFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #North).! !

!methodRemoval: MarsRoverTest #test02ForwardFromFacingNorth stamp: 'MK 10/5/2021 17:53:08'!
test02ForwardFromFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #North).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:03:00'!
test11MoveForwardFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@1 heading: #South).! !

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:03:02'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:04:09' prior: 50889173!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #North ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [position _ position - (0@1). noMatch _ false].
		aCommand = $l ifTrue: [			self rotateLeft	. noMatch _ false].
		aCommand = $r ifTrue: [ self rotateRight. noMatch _ false].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:04:12'!
FAILURE!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:04:12'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:04:12'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:04:28' prior: 50889220!
test10CommandsAfterInvalidCommandAreDiscarded
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'fWr'.
	
	self assert: (marsRover isAt: 1@1 heading: #South).! !

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:04:29'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:04:53' prior: 50889395!
test10CommandsAfterInvalidCommandAreDiscarded
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #North.
	
	marsRover process: 'fWr'.
	
	self assert: (marsRover isAt: 1@3 heading: #North).! !

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:04:55'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:04:55'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:05:41'!
test12MoveForwardFacingWest
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 0@2 heading: #West).! !

!testRun: #MarsRoverTest #test12MoveForwardFacingWest stamp: 'MK 10/5/2021 18:05:44'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:06:07' prior: 50889336!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #North ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [position _ position - (0@1). noMatch _ false].
		aCommand = $l ifTrue: [			self rotateLeft	. noMatch _ false].
		aCommand = $r ifTrue: [ self rotateRight. noMatch _ false].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test12MoveForwardFacingWest stamp: 'MK 10/5/2021 18:06:09'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:06:09'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:06:09'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:06:09'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:06:09'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:06:09'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:06:09'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:06:10'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:06:10'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:06:10'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:06:10'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:06:10'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingWest stamp: 'MK 10/5/2021 18:06:10'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:06:26'!
test12MoveForwardFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 2@2 heading: #East).! !

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:06:33'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:07:05' prior: 50889466!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #North ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [position _ position - (0@1). noMatch _ false].
		aCommand = $l ifTrue: [			self rotateLeft	. noMatch _ false].
		aCommand = $r ifTrue: [ self rotateRight. noMatch _ false].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:07:07'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:07:07'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:07:07'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:07:07'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:07:07'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:07:07'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:07:07'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:07:07'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:07:07'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:07:08'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:07:08'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:07:08'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:07:08'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingWest stamp: 'MK 10/5/2021 18:07:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:07:34'!
test12MoveBackwardsFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@3 heading: #South).! !

!testRun: #MarsRoverTest #test12MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:07:36'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:07:46'!
test13MoveForwardFacingWest
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 0@2 heading: #West).! !

!methodRemoval: MarsRoverTest #test12MoveForwardFacingWest stamp: 'MK 10/5/2021 18:07:47'!
test12MoveForwardFacingWest
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 0@2 heading: #West).!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:08:13'!
test14MoveBackwardsFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@3 heading: #South).! !

!methodRemoval: MarsRoverTest #test12MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:08:13'!
test12MoveBackwardsFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@3 heading: #South).!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:08:33'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:09:13' prior: 50889538!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #North ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			noMatch _ false
		].
		aCommand = $l ifTrue: [			self rotateLeft	. noMatch _ false].
		aCommand = $r ifTrue: [ self rotateRight. noMatch _ false].
		noMatch ifTrue: [^ self].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:09:30' prior: 50889653!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #North ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			noMatch _ false
		].
		aCommand = $l ifTrue: [			self rotateLeft	. noMatch _ false].
		aCommand = $r ifTrue: [ self rotateRight. noMatch _ false].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:09:32'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:09:33'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:09:33'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/5/2021 18:09:33'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:09:33'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:10:19' prior: 50889677!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #North ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			self rotateLeft	. noMatch _ false].
		aCommand = $r ifTrue: [ self rotateRight. noMatch _ false].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/5/2021 18:10:23'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:10:23'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:11:31' prior: 50889748!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #North ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [ self rotateRight. noMatch _ false].
		noMatch ifTrue: [^ self].
	].! !

!methodRemoval: MarsRover #rotateLeft stamp: 'MK 10/5/2021 18:11:37'!
rotateLeft

	^ direction = #North ifTrue: [direction _ #West] ifFalse: [
		direction = #South ifTrue: [direction _ #East] ifFalse: [
			direction = #West ifTrue: [direction _ #South] ifFalse: [
				direction = #East ifTrue: [direction _ #North] 
			].
		].
	].!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:12:08' prior: 50889823!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #North ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false].
		noMatch ifTrue: [^ self].
	].! !

!methodRemoval: MarsRover #rotateRight stamp: 'MK 10/5/2021 18:12:11'!
rotateRight

	^ direction = #North ifTrue: [direction _ #East] ifFalse: [
		direction = #South ifTrue: [direction _ #West] ifFalse: [
			direction = #West ifTrue: [direction _ #North] ifFalse: [
				direction = #East ifTrue: [direction _ #South] 
			].
		].
	].!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:12:18'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:12:18'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:12:18'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/5/2021 18:12:19'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:12:19'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:12:34' prior: 50889871!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #North ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverState category: 'MarsRover' stamp: 'MK 10/5/2021 18:13:59'!
Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'MK 10/5/2021 18:14:13'!
MarsRoverState subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRenamed: #North as: #FacingNorth stamp: 'MK 10/5/2021 18:14:23'!
Smalltalk renameClassNamed: #North as: #FacingNorth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:14:23' prior: 50888825!
test07RotateLeftFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:14:23' prior: 50889307!
test02MoveForwardFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #FacingNorth.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:14:23' prior: 50889408!
test10CommandsAfterInvalidCommandAreDiscarded
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #FacingNorth.
	
	marsRover process: 'fWr'.
	
	self assert: (marsRover isAt: 1@3 heading: #FacingNorth).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:14:23' prior: 50889972!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #FacingNorth ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #FacingNorth ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #FacingNorth ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #FacingNorth] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #FacingNorth ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #FacingNorth] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:14:23' prior: 50888791!
test08RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #FacingNorth.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:14:23' prior: 50888974!
test01NoCommands
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #FacingNorth.
		
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:14:23' prior: 50888808!
test04RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #FacingNorth.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:14:23' prior: 50888672!
test03BackwardsFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #FacingNorth.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: #FacingNorth).! !

MarsRoverState subclass: #FacingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #FacingSouth category: 'MarsRover' stamp: 'MK 10/5/2021 18:15:56'!
MarsRoverState subclass: #FacingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #FacingLeft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #FacingLeft category: 'MarsRover' stamp: 'MK 10/5/2021 18:16:00'!
MarsRoverState subclass: #FacingLeft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

MarsRoverState subclass: #FacingRight
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #FacingRight category: 'MarsRover' stamp: 'MK 10/5/2021 18:16:03'!
MarsRoverState subclass: #FacingRight
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRenamed: #FacingLeft as: #FacingEast stamp: 'MK 10/5/2021 18:16:11'!
Smalltalk renameClassNamed: #FacingLeft as: #FacingEast!

!classRenamed: #FacingRight as: #FacingWest stamp: 'MK 10/5/2021 18:16:16'!
Smalltalk renameClassNamed: #FacingRight as: #FacingWest!
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/5/2021 18:21:08' prior: 50888982!
initializeWith: aPosition and: aDirection 
	position := aPosition.
	direction := MarsRoverState facing: aDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:21:29'!
isAt: aPosition facing: aDirection 
	position = aPosition ifTrue: [
		direction = aDirection ifTrue: [^ true].	
	].
	
	^false.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:21:29' prior: 50889615!
test13MoveForwardFacingWest
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 0@2 facing: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:21:29' prior: 50888876!
test09RotateRightFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 facing: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:21:29' prior: 50888859!
test06RotateLeftFacingWest
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #West.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 facing: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:21:29' prior: 50888842!
test05RotateLeftFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 facing: #East).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:21:29' prior: 50889632!
test14MoveBackwardsFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@3 facing: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:21:29' prior: 50889324!
test11MoveForwardFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #South.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@1 facing: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:21:29' prior: 50889526!
test12MoveForwardFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 heading: #East.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 2@2 facing: #East).! !

!methodRemoval: MarsRover #isAt:heading: stamp: 'MK 10/5/2021 18:21:29'!
isAt: aPosition heading: aDirection 
	position = aPosition ifTrue: [
		direction = aDirection ifTrue: [^ true].	
	].
	
	^false.!
!MarsRover class methodsFor: 'initialization' stamp: 'MK 10/5/2021 18:22:25'!
at: aPosition facing: aDirection 
	^ self new initializeWith: aPosition and: aDirection.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:25' prior: 50890247!
test14MoveBackwardsFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #South.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@3 facing: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:25' prior: 50890145!
test03BackwardsFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 heading: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:25' prior: 50890127!
test01NoCommands
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
		
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 heading: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:25' prior: 50890238!
test05RotateLeftFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #South.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 facing: #East).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:25' prior: 50890265!
test12MoveForwardFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #East.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 2@2 facing: #East).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:25' prior: 50890118!
test08RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 heading: #East).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:25' prior: 50890256!
test11MoveForwardFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #South.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@1 facing: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:25' prior: 50890220!
test09RotateRightFacingSouth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #South.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 facing: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:25' prior: 50890052!
test02MoveForwardFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 heading: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:26' prior: 50890043!
test07RotateLeftFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:26' prior: 50890211!
test13MoveForwardFacingWest
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #West.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 0@2 facing: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:26' prior: 50890229!
test06RotateLeftFacingWest
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #West.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 facing: #South).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:26' prior: 50890136!
test04RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 heading: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:26' prior: 50890061!
test10CommandsAfterInvalidCommandAreDiscarded
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
	
	marsRover process: 'fWr'.
	
	self assert: (marsRover isAt: 1@3 heading: #FacingNorth).! !

!methodRemoval: MarsRover class #at:heading: stamp: 'MK 10/5/2021 18:22:26'!
at: aPosition heading: aDirection 
	^ self new initializeWith: aPosition and: aDirection.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:47'!
isAt: aPosition heading: aDirection 
	position = aPosition ifTrue: [
		direction = aDirection ifTrue: [^ true].	
	].
	
	^false.! !

!methodRemoval: MarsRover #isAt:facing: stamp: 'MK 10/5/2021 18:22:47'!
isAt: aPosition facing: aDirection 
	position = aPosition ifTrue: [
		direction = aDirection ifTrue: [^ true].	
	].
	
	^false.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:56'!
isAt: aPosition facing: aDirection 
	position = aPosition ifTrue: [
		direction = aDirection ifTrue: [^ true].	
	].
	
	^false.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:56' prior: 50890304!
test01NoCommands
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
		
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 facing: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:57' prior: 50890403!
test10CommandsAfterInvalidCommandAreDiscarded
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
	
	marsRover process: 'fWr'.
	
	self assert: (marsRover isAt: 1@3 facing: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:57' prior: 50890358!
test02MoveForwardFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 facing: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:57' prior: 50890367!
test07RotateLeftFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 facing: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:57' prior: 50890394!
test04RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 facing: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:57' prior: 50890295!
test03BackwardsFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 facing: #FacingNorth).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:22:57' prior: 50890331!
test08RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #FacingNorth.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 facing: #East).! !

!methodRemoval: MarsRover #isAt:heading: stamp: 'MK 10/5/2021 18:22:57'!
isAt: aPosition heading: aDirection 
	position = aPosition ifTrue: [
		direction = aDirection ifTrue: [^ true].	
	].
	
	^false.!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:23:01'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/5/2021 18:23:21' prior: 50890196!
initializeWith: aPosition and: aDirection 
	position := aPosition.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:23:23'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/5/2021 18:23:24'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:23:24'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/5/2021 18:23:31' prior: 50890512!
initializeWith: aPosition and: aDirection 
	position := aPosition.
	direction := MarsRoverState facing: aDirection.! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:23:35'!
ERROR!
!MarsRoverState class methodsFor: 'class initialization' stamp: 'MK 10/5/2021 18:23:47'!
facing: aSymbol 
	self shouldBeImplemented.! !
!MarsRoverState class methodsFor: 'class initialization' stamp: 'MK 10/5/2021 18:24:29' prior: 50890573!
facing: aDirection
	aDirection = #South ifTrue: [FacingSouth new].! !
!MarsRoverState class methodsFor: 'class initialization' stamp: 'MK 10/5/2021 18:24:50' prior: 50890578!
facing: aDirection
	aDirection = #South ifTrue: [^ FacingSouth new].
	aDirection = #North ifTrue: [^ FacingNorth new].! !
!MarsRoverState class methodsFor: 'class initialization' stamp: 'MK 10/5/2021 18:25:07' prior: 50890584!
facing: aDirection
	aDirection = #South ifTrue: [^ FacingSouth new].
	aDirection = #North ifTrue: [^ FacingNorth new].
	aDirection = #West ifTrue: [^ FacingWest new].
	aDirection = #East ifTrue: [^ FacingEast new].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:25:08'!
FAILURE!

#FacingNorth!

FacingNorth!

FacingNorth!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:29:44' prior: 50890071!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = #North ifTrue: [position _ position + (0@1).]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

#FacingNorth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:30:28' prior: 50890439!
test01NoCommands
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #North.
		
	marsRover process: ''.
	
	self assert: (marsRover isAt: 1@2 facing: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:30:35' prior: 50890458!
test02MoveForwardFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #North.
	
	marsRover process: 'f'.
	
	self assert: (marsRover isAt: 1@3 facing: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:30:47' prior: 50890485!
test03BackwardsFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #North.
	
	marsRover process: 'b'.
	
	self assert: (marsRover isAt: 1@1 facing: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:30:51' prior: 50890476!
test04RotateLeftFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #North.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 facing: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:30:57' prior: 50890467!
test07RotateLeftFacingEast
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #East.
	
	marsRover process: 'l'.
	
	self assert: (marsRover isAt: 1@2 facing: #North).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:31:01' prior: 50890494!
test08RotateRightFacingNorth
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #North.
	
	marsRover process: 'r'.
	
	self assert: (marsRover isAt: 1@2 facing: #East).! !

#FacingNorth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:31:44' prior: 50890448!
test10CommandsAfterInvalidCommandAreDiscarded
	| marsRover|
	marsRover _ MarsRover at: 1@2 facing: #North.
	
	marsRover process: 'fWr'.
	
	self assert: (marsRover isAt: 1@3 facing: #North).! !

----SNAPSHOT----(5 October 2021 18:32:00) CuisUniversity-4532.image priorSource: 17838228!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:32:16'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/5/2021 18:32:44'!
Object subclass: #MarsRover
	instanceVariableNames: 'position state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:32:44' prior: 50890606!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			state = #North ifTrue: [position _ position + (0@1).]. 
			state = #South ifTrue: [position _ position - (0@1).]. 
			state = #West ifTrue: [position _ position - (1@0).]. 
			state = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			state = #North ifTrue: [position _ position - (0@1).].
			state = #South ifTrue: [position _ position + (0@1).].
			state = #West ifTrue: [position _ position + (1@0).]. 
			state = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			state = #North ifTrue: [state _ #West] ifFalse: [
				state = #South ifTrue: [state _ #East] ifFalse: [
					state = #West ifTrue: [state _ #South] ifFalse: [
						state = #East ifTrue: [state _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			state = #North ifTrue: [state _ #East] ifFalse: [
				state = #South ifTrue: [state _ #West] ifFalse: [
					state = #West ifTrue: [state _ #North] ifFalse: [
						state = #East ifTrue: [state _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:32:44' prior: 50890563!
initializeWith: aPosition and: aDirection 
	position := aPosition.
	state := MarsRoverState facing: aDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:32:44' prior: 50890431!
isAt: aPosition facing: aDirection 
	position = aPosition ifTrue: [
		state = aDirection ifTrue: [^ true].	
	].
	
	^false.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:37:53'!
isFacing: aDirection
	^ state direction = aDirection.! !
!MarsRoverState methodsFor: 'nil' stamp: 'MK 10/5/2021 18:38:17'!
direction
	self subclassResponsibility.! !
!FacingEast methodsFor: 'nil' stamp: 'MK 10/5/2021 18:38:28' overrides: 50890790!
direction
	^ #East! !
!FacingNorth methodsFor: 'no messages' stamp: 'MK 10/5/2021 18:38:44' overrides: 50890790!
direction
	^ #North! !
!FacingSouth methodsFor: 'nil' stamp: 'MK 10/5/2021 18:39:09' overrides: 50890790!
direction
	^ #South! !
!FacingWest methodsFor: 'no messages' stamp: 'MK 10/5/2021 18:39:20' overrides: 50890790!
direction
	^ #West! !

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:39:23'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:40:39' prior: 50890729!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			state direction = #North ifTrue: [position _ position + (0@1).]. 
			state direction = #South ifTrue: [position _ position - (0@1).]. 
			state direction = #West ifTrue: [position _ position - (1@0).]. 
			state direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			state direction = #North ifTrue: [position _ position - (0@1).].
			state direction = #South ifTrue: [position _ position + (0@1).].
			state direction = #West ifTrue: [position _ position + (1@0).]. 
			state direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			state direction = #North ifTrue: [state _ #West] ifFalse: [
				state direction = #South ifTrue: [state _ #East] ifFalse: [
					state direction = #West ifTrue: [state _ #South] ifFalse: [
						state direction = #East ifTrue: [state _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			state direction = #North ifTrue: [state _ #East] ifFalse: [
				state direction = #South ifTrue: [state _ #West] ifFalse: [
					state direction = #West ifTrue: [state _ #North] ifFalse: [
						state direction = #East ifTrue: [state _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:40:43'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:41:51' prior: 50890814!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			(self isFacing: #North) ifTrue: [position _ position + (0@1).]. 
			(self isFacing: #South) ifTrue: [position _ position - (0@1).]. 
			(self isFacing: #West) ifTrue: [position _ position - (1@0).]. 
			(self isFacing: #East) ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			(self isFacing: #North) ifTrue: [position _ position - (0@1).].
			(self isFacing: #South) ifTrue: [position _ position + (0@1).].
			(self isFacing: #West) ifTrue: [position _ position + (1@0).]. 
			(self isFacing: #East) ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			(self isFacing: #North) ifTrue: [state _ #West] ifFalse: [
				(self isFacing: #South) ifTrue: [state _ #East] ifFalse: [
					(self isFacing: #West) ifTrue: [state _ #South] ifFalse: [
						(self isFacing: #East) ifTrue: [state _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			(self isFacing: #North) ifTrue: [state _ #East] ifFalse: [
				(self isFacing: #South) ifTrue: [state _ #West] ifFalse: [
					(self isFacing: #West) ifTrue: [state _ #North] ifFalse: [
						(self isFacing: #East) ifTrue: [state _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:43:09'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:43:29' prior: 50890865!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			(self isFacing: #North) ifTrue: [position _ position + (0@1).]. 
			(self isFacing: #South) ifTrue: [position _ position - (0@1).]. 
			(self isFacing: #West) ifTrue: [position _ position - (1@0).]. 
			(self isFacing: #East) ifTrue: [position _ position + (1@0).]. 
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			(self isFacing: #North) ifTrue: [position _ position - (0@1).].
			(self isFacing: #South) ifTrue: [position _ position + (0@1).].
			(self isFacing: #West) ifTrue: [position _ position + (1@0).]. 
			(self isFacing: #East) ifTrue: [position _ position - (1@0).]. 
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			(self isFacing: #North) ifTrue: [state _ #West] ifFalse: [
				(self isFacing: #South) ifTrue: [state _ #East] ifFalse: [
					(self isFacing: #West) ifTrue: [state _ #South] ifFalse: [
						(self isFacing: #East) ifTrue: [state _ #North] 
					].
				].
			].
			noMatch _ false.
		].
		aCommand = $r ifTrue: [
			(self isFacing: #North) ifTrue: [state _ #East] ifFalse: [
				(self isFacing: #South) ifTrue: [state _ #West] ifFalse: [
					(self isFacing: #West) ifTrue: [state _ #North] ifFalse: [
						(self isFacing: #East) ifTrue: [state _ #South] 
					].
				].
			].
			noMatch _ false.
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:43:46'!
FAILURE!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:43:51'!
FAILURE!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:43:51'!
FAILURE!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:43:51'!
FAILURE!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:43:51'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:43:51'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:43:51'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:43:51'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:43:51'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:43:51'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:43:51'!
FAILURE!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:43:51'!
FAILURE!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:43:51'!
FAILURE!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/5/2021 18:43:51'!
FAILURE!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:43:51'!
FAILURE!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:43:59'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:44:28' prior: 50890779!
isAt: aPosition facing: aDirection 
	position = aPosition ifTrue: [
		state direction = aDirection ifTrue: [^ true].	
	].
	
	^false.! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:44:32'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:44:32'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:44:32'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:44:32'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:44:32'!
ERROR!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:44:33'!
ERROR!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:44:33'!
ERROR!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:44:33'!
ERROR!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:44:33'!
ERROR!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:44:33'!
ERROR!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:44:33'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:44:33'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:44:33'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/5/2021 18:44:33'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:44:33'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:44:48'!
ERROR!

----SNAPSHOT----(5 October 2021 18:47:48) CuisUniversity-4532.image priorSource: 17890048!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/5/2021 18:51:25' prior: 50890916!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			(self isFacing: #North) ifTrue: [position _ position + (0@1).]. 
			(self isFacing: #South) ifTrue: [position _ position - (0@1).]. 
			(self isFacing: #West) ifTrue: [position _ position - (1@0).]. 
			(self isFacing: #East) ifTrue: [position _ position + (1@0).]. 
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			(self isFacing: #North) ifTrue: [position _ position - (0@1).].
			(self isFacing: #South) ifTrue: [position _ position + (0@1).].
			(self isFacing: #West) ifTrue: [position _ position + (1@0).]. 
			(self isFacing: #East) ifTrue: [position _ position - (1@0).]. 
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			(self isFacing: #North) ifTrue: [state _ #West] ifFalse: [
				(self isFacing: #South) ifTrue: [state _ #East] ifFalse: [
					(self isFacing: #West) ifTrue: [state _ #South] ifFalse: [
						(self isFacing: #East) ifTrue: [state _ #North] 
					].
				].
			].
			noMatch _ false.
		].
		aCommand = $r ifTrue: [
			(self isFacing: #North) ifTrue: [state _ #East] ifFalse: [
				(self isFacing: #South) ifTrue: [state _ #West] ifFalse: [
					(self isFacing: #West) ifTrue: [state _ #North] ifFalse: [
						(self isFacing: #East) ifTrue: [state _ #South] 
					].
				].
			].
			noMatch _ false.
		].
		noMatch ifTrue: [^ self].
	].! !

----SNAPSHOT----(5 October 2021 18:51:31) CuisUniversity-4532.image priorSource: 17901296!

----STARTUP---- (7 October 2021 14:46:15) as D:\001.Maca\2c2021\inge1\qa2\CuisUniversity-4532.image!


!classRemoval: #FacingWest stamp: 'MK 10/7/2021 14:46:47'!
MarsRoverState subclass: #FacingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #FacingSouth stamp: 'MK 10/7/2021 14:46:48'!
MarsRoverState subclass: #FacingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #FacingNorth stamp: 'MK 10/7/2021 14:46:48'!
MarsRoverState subclass: #FacingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #FacingEast stamp: 'MK 10/7/2021 14:46:48'!
MarsRoverState subclass: #FacingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverState stamp: 'MK 10/7/2021 14:46:49'!
Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRover stamp: 'MK 10/7/2021 14:46:49'!
Object subclass: #MarsRover
	instanceVariableNames: 'position state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverTest stamp: 'MK 10/7/2021 14:46:49'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

----End fileIn of D:\001.Maca\2c2021\inge1\repoEntrega\16-MarsRover\MarsRover(Con commands).st----!