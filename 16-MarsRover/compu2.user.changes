

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (9 September 2021 16:42:04) as D:\001.Maca\2c2021\inge1\Cuiswindows64\windows64\CuisUniversity-4532.image!


----End fileIn of D:\Downloads\CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'assertions' stamp: 'MK 9/9/2021 16:48:26'!
assertNoChangesWereMadeIn: customerBook thatOriginallyHadCustomer: customerName
	^self assert: (customerBook numberOfCustomers = 1) & (customerBook includesCustomerNamed: customerName)
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'MK 9/9/2021 16:48:27' prior: 50859480!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon checkAddCustomerBehaviour |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	checkAddCustomerBehaviour :=  [ :anError | self assertNoChangesWereMadeIn: customerBook thatOriginallyHadCustomer: johnLennon].
	
	self attempt: [ customerBook suspendCustomerNamed: johnLennon. self fail ]  ifFailsWith: CantSuspend do: checkAddCustomerBehaviour.		
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'MK 9/9/2021 16:48:27' prior: 50859463!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon checkAddCustomerBehaviour |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	checkAddCustomerBehaviour :=  [ :anError | self assertNoChangesWereMadeIn: customerBook thatOriginallyHadCustomer: johnLennon].
	
	self attempt: [ customerBook suspendCustomerNamed: 'George Harrison'. self fail ]  ifFailsWith: CantSuspend do: checkAddCustomerBehaviour.		
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'MK 9/9/2021 16:48:27' prior: 50859412!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon 	checkAddCustomerBehaviour |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	checkAddCustomerBehaviour := [ :anError | self assertNoChangesWereMadeIn: customerBook thatOriginallyHadCustomer: johnLennon].
	
	self attempt: 	[ customerBook removeCustomerNamed: 'Paul McCartney'. self fail ]  ifFailsWith: NotFound do: checkAddCustomerBehaviour.		
! !

!methodRemoval: CustomerBookTest #assertAddCustomerBehaviourOf:with: stamp: 'MK 9/9/2021 16:48:27'!
assertAddCustomerBehaviourOf: customerBook with: customerName
	^self assert: (customerBook numberOfCustomers = 1) & (customerBook includesCustomerNamed: customerName)
!
!CustomerBookTest methodsFor: 'assertions' stamp: 'MK 9/9/2021 16:48:59' prior: 50859646!
assertNoChangesWereMadeIn: aCustomerBook thatOriginallyHadCustomer: aCustomerName
	^self assert: (aCustomerBook numberOfCustomers = 1) & (aCustomerBook includesCustomerNamed: aCustomerName)
! !

----SNAPSHOT----(9 September 2021 16:49:10) CuisUniversity-4532.image priorSource: 16885703!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'MK 9/9/2021 16:50:28'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MK 9/9/2021 16:50:28'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'MK 9/9/2021 16:50:28'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'MK 9/9/2021 16:50:28'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MK 9/9/2021 16:50:28'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MK 9/9/2021 16:50:28'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MK 9/9/2021 16:50:28'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'MK 9/9/2021 16:50:28'!
PASSED!

----End fileIn of D:\001.Maca\2c2021\inge1\Cuiswindows64\windows64\Pre-Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'MK 9/9/2021 20:45:06'!
PASSED!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Object subclass: #Numero
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'MK 9/9/2021 20:59:07'!
Object subclass: #Numero
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'MK 9/9/2021 20:59:17'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'numerador denominador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'MK 9/9/2021 20:59:41'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerador denominador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'nil' stamp: 'MK 9/9/2021 21:03:28'!
xxxx: aMultiplier
 ^self class with: value * aMultiplier integerValue ! !

Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'MK 9/9/2021 21:05:31'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'nil' stamp: 'MK 9/9/2021 21:05:34'!
xxxx: aMultiplier
	
	^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)! !
!Numero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:09:10' prior: 50859914!
* aMultiplier 
	self subclassResponsibility"
	(type = #Entero and: [aMultiplier type = #Entero]) ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	(type = #Fraccion and: [aMultiplier type = #Fraccion]) ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		"
	self error: 'Tipo de número no soportado'
	! !
!Entero methodsFor: 'as yet unclassified' stamp: 'MK 9/9/2021 21:09:49' overrides: 50860216!
* aMultiplier
 ^self class with: value * aMultiplier integerValue ! !

!methodRemoval: Entero #xxxx: stamp: 'MK 9/9/2021 21:09:55'!
xxxx: aMultiplier
 ^self class with: value * aMultiplier integerValue !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'MK 9/9/2021 21:10:02' overrides: 50860216!
* aMultiplier
	
	^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)! !

!methodRemoval: Fraccion #xxxx: stamp: 'MK 9/9/2021 21:10:04'!
xxxx: aMultiplier
	
	^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)!
!Numero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:10:38' prior: 50860216!
* aMultiplier 
	self subclassResponsibility."
	(type = #Entero and: [aMultiplier type = #Entero]) ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	(type = #Fraccion and: [aMultiplier type = #Fraccion]) ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'."
	! !
!Numero methodsFor: 'nil' stamp: 'MK 9/9/2021 21:12:27'!
assertCanMultiply: aMultiplier
	
	self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:13:03' prior: 50860255!
* aMultiplier 
	self subclassResponsibility."
	self subclassResponsibility.
	(type = #Entero and: [aMultiplier type = #Entero]) ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	(type = #Fraccion and: [aMultiplier type = #Fraccion]) ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'."
	! !
!Entero methodsFor: 'nil' stamp: 'MK 9/9/2021 21:15:01' overrides: 50860270!
assertCanMultiply: aMultiplier
	
	aMultiplier type = #Entero ifFalse: [self error: 'No se puede multiplicar un entero con otro tipo'].! !
!Fraccion methodsFor: 'nil' stamp: 'MK 9/9/2021 21:15:45' overrides: 50860270!
assertCanMultiply: aMultiplier
	
	aMultiplier type = #Fraccion ifFalse: [self error: 'No se puede multiplicar una fraccion con otro tipo'].! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'MK 9/9/2021 21:20:24' prior: 50860298 overrides: 50860270!
assertCanMultiply: aMultiplier
	
	aMultiplier class = Fraccion ifFalse: [self error: 'No se puede multiplicar una fraccion con otro tipo'].! !
!Entero methodsFor: 'as yet unclassified' stamp: 'MK 9/9/2021 21:20:40' prior: 50860232 overrides: 50860275!
* aMultiplier
	
	^self class with: value * aMultiplier integerValue ! !
!Entero methodsFor: 'as yet unclassified' stamp: 'MK 9/9/2021 21:20:53' prior: 50860291 overrides: 50860270!
assertCanMultiply: aMultiplier
	
	aMultiplier class = Entero ifFalse: [self error: 'No se puede multiplicar un entero con otro tipo'].! !
!Entero methodsFor: 'as yet unclassified' stamp: 'MK 9/9/2021 21:21:39' prior: 50860314 overrides: 50860275!
* aMultiplier
	
	^self class with: value * aMultiplier value! !

!classRemoval: #Fraccion stamp: 'MK 9/9/2021 21:25:43'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'MK 9/9/2021 21:25:44'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'MK 9/9/2021 21:25:44'!
Object subclass: #Numero
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'MK 9/9/2021 21:25:45'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of D:\001.Maca\2c2021\inge1\Cuiswindows64\windows64\ejercicios\14-numero\Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/9/2021 21:30:02'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'MK 9/9/2021 21:30:03'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'MK 9/9/2021 21:30:03'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'MK 9/9/2021 21:30:03'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'MK 9/9/2021 21:30:03'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:30:03'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:30:03'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'MK 9/9/2021 21:30:03'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'MK 9/9/2021 21:30:03'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:30:04'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:30:04'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'MK 9/9/2021 21:30:04'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'MK 9/9/2021 21:30:04'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'MK 9/9/2021 21:30:04'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'MK 9/9/2021 21:30:04'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:34:06' prior: 50860746 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: value + anAdder value].
	anAdder class = Fraccion ifTrue: [^ anAdder value].
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:35:05' prior: 50861115 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: value + anAdder value].
	anAdder class = Fraccion ifTrue: [^Fraccion with: self value over: 1 + anAdder value].
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:35:10' prior: 50861123 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: value + anAdder value].
	anAdder class = Fraccion ifTrue: [^Fraccion with: (self value) over: 1 + anAdder value].
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:35:30' prior: 50861133 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: value + anAdder value].
	anAdder class = Fraccion ifTrue: [^(Fraccion with: self value over: 1) + anAdder value].
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:35:46' prior: 50861143 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: value + anAdder value].
	anAdder class = Fraccion ifTrue: [^(Fraccion with: self value over: 1) + anAdder value].
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/9/2021 21:35:48'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/9/2021 21:35:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/9/2021 21:35:48'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/9/2021 21:35:49'!
ERROR!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'MK 9/9/2021 21:35:49'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'MK 9/9/2021 21:35:49'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'MK 9/9/2021 21:35:49'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'MK 9/9/2021 21:35:49'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'MK 9/9/2021 21:35:49'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:35:49'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:35:49'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:35:49'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'MK 9/9/2021 21:35:49'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:35:49'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:35:50'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:35:50'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:35:50'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:35:50'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'MK 9/9/2021 21:35:50'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'MK 9/9/2021 21:35:50'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'MK 9/9/2021 21:35:50'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'MK 9/9/2021 21:35:50'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'MK 9/9/2021 21:35:50'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'MK 9/9/2021 21:35:50'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'MK 9/9/2021 21:35:50'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'MK 9/9/2021 21:35:50'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'MK 9/9/2021 21:35:50'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'MK 9/9/2021 21:35:50'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'MK 9/9/2021 21:35:50'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:36:56' prior: 50861153 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: value + anAdder value].
	anAdder class = Fraccion ifTrue: [^(Fraccion with: value over: 1) + anAdder value].
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/9/2021 21:37:00'!
ERROR!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'MK 9/9/2021 21:37:00'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'MK 9/9/2021 21:37:00'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'MK 9/9/2021 21:37:00'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'MK 9/9/2021 21:37:00'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'MK 9/9/2021 21:37:00'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:37:00'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:37:00'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:37:00'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:37:00'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'MK 9/9/2021 21:37:01'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:37:01'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:37:01'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'MK 9/9/2021 21:37:01'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'MK 9/9/2021 21:37:01'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'MK 9/9/2021 21:37:01'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'MK 9/9/2021 21:37:01'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'MK 9/9/2021 21:37:01'!
ERROR!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/9/2021 21:37:05'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:38:26' prior: 50861297 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^(self class with: value) + anAdder value].
	anAdder class = Fraccion ifTrue: [^(Fraccion with: value over: 1) + anAdder value].
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/9/2021 21:38:29'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/9/2021 21:38:29'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/9/2021 21:38:29'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/9/2021 21:38:29'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:39:06' prior: 50861444 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: (value + anAdder value)].
	anAdder class = Fraccion ifTrue: [^(Fraccion with: value over: 1) + anAdder value].
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:39:15' prior: 50861466 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^Entero with: (value + anAdder value)].
	anAdder class = Fraccion ifTrue: [^(Fraccion with: value over: 1) + anAdder value].
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:39:21' prior: 50861475 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: (value + anAdder value)].
	anAdder class = Fraccion ifTrue: [^(Fraccion with: value over: 1) + anAdder value].
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/9/2021 21:41:37'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/9/2021 21:41:37'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/9/2021 21:41:37'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/9/2021 21:41:37'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/9/2021 21:41:38'!
ERROR!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'MK 9/9/2021 21:41:38'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'MK 9/9/2021 21:41:38'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'MK 9/9/2021 21:41:38'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'MK 9/9/2021 21:41:38'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'MK 9/9/2021 21:41:38'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:41:38'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:41:38'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:41:38'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'MK 9/9/2021 21:41:38'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:41:38'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:41:39'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:41:39'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:41:39'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'MK 9/9/2021 21:41:39'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'MK 9/9/2021 21:41:39'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'MK 9/9/2021 21:41:39'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'MK 9/9/2021 21:41:39'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'MK 9/9/2021 21:41:39'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'MK 9/9/2021 21:41:39'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'MK 9/9/2021 21:41:39'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'MK 9/9/2021 21:41:39'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'MK 9/9/2021 21:41:39'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'MK 9/9/2021 21:41:39'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'MK 9/9/2021 21:41:39'!
ERROR!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/9/2021 21:41:49'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:44:18' prior: 50861484 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: (value + anAdder)].
	anAdder class = Fraccion ifTrue: [^(Fraccion with: value over: 1) + anAdder].
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:45:19' prior: 50861631 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: (value + anAdder integerValue)].
	anAdder class = Fraccion ifTrue: [^(Fraccion with: value over: 1) + anAdder integerValue].
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:45:27' prior: 50861640 overrides: 50860675!
+ anAdder 
	anAdder class = Entero ifTrue: [^self class with: (value + anAdder integerValue)].
	anAdder class = Fraccion ifTrue: [^(Fraccion with: value over: 1) + anAdder].
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/9/2021 21:46:27'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/9/2021 21:46:27'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/9/2021 21:46:27'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/9/2021 21:46:27'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/9/2021 21:46:27'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'MK 9/9/2021 21:46:27'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:46:27'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'MK 9/9/2021 21:46:27'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'MK 9/9/2021 21:46:27'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:46:27'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'MK 9/9/2021 21:46:27'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'MK 9/9/2021 21:46:27'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'MK 9/9/2021 21:46:27'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'MK 9/9/2021 21:46:27'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:46:27'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:46:27'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'MK 9/9/2021 21:46:28'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:46:28'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:46:28'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'MK 9/9/2021 21:46:28'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'MK 9/9/2021 21:46:28'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'MK 9/9/2021 21:46:29'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'MK 9/9/2021 21:46:29'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'MK 9/9/2021 21:46:29'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'MK 9/9/2021 21:46:29'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'MK 9/9/2021 21:46:29'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:50:02' prior: 50861650 overrides: 50860675!
+ anAdder 
	(anAdder isKindOf: Entero) ifTrue: [^self class with: (value + anAdder integerValue)].
	(anAdder class = Fraccion) ifTrue: [^(Fraccion with: value over: 1) + anAdder].
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/9/2021 21:50:04'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/9/2021 21:50:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/9/2021 21:50:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/9/2021 21:50:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/9/2021 21:50:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'MK 9/9/2021 21:50:04'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:50:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'MK 9/9/2021 21:50:05'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'MK 9/9/2021 21:50:05'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'MK 9/9/2021 21:50:05'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'MK 9/9/2021 21:50:05'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'MK 9/9/2021 21:50:05'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'MK 9/9/2021 21:50:05'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'MK 9/9/2021 21:50:05'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:50:05'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'MK 9/9/2021 21:50:05'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'MK 9/9/2021 21:50:06'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'MK 9/9/2021 21:50:06'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'MK 9/9/2021 21:50:06'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'MK 9/9/2021 21:50:06'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'MK 9/9/2021 21:50:06'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'MK 9/9/2021 21:50:06'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'MK 9/9/2021 21:50:06'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'MK 9/9/2021 21:50:06'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'MK 9/9/2021 21:50:06'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'MK 9/9/2021 21:50:06'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'MK 9/9/2021 21:50:06'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'MK 9/9/2021 21:50:06'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'MK 9/9/2021 21:50:06'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/9/2021 21:51:06' prior: 50861794 overrides: 50860675!
+ anAdder 
	(anAdder isKindOf: Entero) ifTrue: [^self class with: (value + anAdder integerValue)].
	(anAdder class = Fraccion) ifTrue: [^(Fraccion with: value over: 1) + anAdder].
! !

----SNAPSHOT----(9 September 2021 21:56:17) CuisUniversity-4532.image priorSource: 16898529!

----SNAPSHOT----(9 September 2021 22:03:29) CuisUniversity-4532.image priorSource: 16969463!

----STARTUP---- (13 September 2021 21:46:19) as D:\001.Maca\2c2021\inge1\Cuiswindows64\windows64\CuisUniversity-4532.image!


!classRemoval: #Fraccion stamp: 'MK 9/13/2021 21:46:29'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'MK 9/13/2021 21:46:30'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'MK 9/13/2021 21:46:30'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'MK 9/13/2021 21:46:31'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of D:\001.Maca\2c2021\inge1\Cuiswindows64\windows64\ejercicios\Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/13/2021 21:46:55'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'MK 9/13/2021 21:46:56'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'MK 9/13/2021 21:46:57'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'MK 9/13/2021 21:46:57'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 21:47:47'!
XXXX: anEntero
	^self class with: value + anEntero integerValue
	
	
  ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 21:50:01'!
YYYY: aFraccion
	^aFraccion + self
	
	
  ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 21:55:48'!
addEntero: anEntero
	^self class with: value + anEntero integerValue
	
	
  ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 21:55:52' prior: 50862783!
XXXX: anEntero
	^self class with: value + anEntero integerValue
	
	
  ! !

!methodRemoval: Entero #addEntero: stamp: 'MK 9/13/2021 21:56:02'!
addEntero: anEntero
	^self class with: value + anEntero integerValue
	
	
  !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 21:56:19'!
addEntero: anEntero
	^self class with: value + anEntero integerValue
	
	
  ! !

!methodRemoval: Entero #XXXX: stamp: 'MK 9/13/2021 21:56:20'!
XXXX: anEntero
	^self class with: value + anEntero integerValue
	
	
  !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 21:56:33'!
addFraccion: aFraccion
	^aFraccion + self
	
	
  ! !

!methodRemoval: Entero #YYYY: stamp: 'MK 9/13/2021 21:56:33'!
YYYY: aFraccion
	^aFraccion + self
	
	
  !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 21:57:18' prior: 50862372 overrides: 50862298!
+ anAdder 
	anAdder addEntero: self.
	"(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	(anAdder isKindOf: Fraccion) ifTrue: [^anAdder + self]."
	^self class invalidNumberTypeErrorDescription. "Hay que chequear esto"
	
	
  ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 21:57:27' prior: 50862827 overrides: 50862298!
+ anAdder 
	anAdder addEntero: self.
	"(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	(anAdder isKindOf: Fraccion) ifTrue: [^anAdder + self]."
	"self class invalidNumberTypeErrorDescription. Hay que chequear esto"
	
	
  ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 21:57:35' prior: 50862839 overrides: 50862298!
+ anAdder 
	anAdder addEntero: self.
	"(anAdder isKindOf: self class) ifTrue: [^self class with: value + anAdder integerValue].
	(anAdder isKindOf: Fraccion) ifTrue: [^anAdder + self]."
	"self class invalidNumberTypeErrorDescription." "Hay que chequear esto"
	
	
  ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 22:01:42'!
addEntero: anEntero
	| newNumerator newDenominator |
	newNumerator := (numerator * (Entero with: 1)) + (denominator * anEntero).
	newDenominator := denominator.
	^newNumerator / newDenominator.! !
!Fraccion methodsFor: 'zzzz' stamp: 'MK 9/13/2021 22:02:33'!
addFraccion: aFraccion
	| newNumerator newDenominator |
	newNumerator := (numerator * aFraccion denominator) + (denominator * aFraccion numerator).
	newDenominator := denominator * aFraccion denominator.
	
	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'MK 9/13/2021 22:03:06' prior: 50862514 overrides: 50862298!
+ anAdder 
	anAdder addFraccion: self.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'MK 9/13/2021 22:03:09'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'MK 9/13/2021 22:03:09'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'MK 9/13/2021 22:03:09'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'MK 9/13/2021 22:03:09'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'MK 9/13/2021 22:03:09'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'MK 9/13/2021 22:03:09'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'MK 9/13/2021 22:03:09'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'MK 9/13/2021 22:03:09'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'MK 9/13/2021 22:03:10'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'MK 9/13/2021 22:03:10'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'MK 9/13/2021 22:03:10'!
FAILURE!

----SNAPSHOT----(13 September 2021 22:53:00) CuisUniversity-4532.image priorSource: 16969557!

----STARTUP---- (16 September 2021 16:03:43) as D:\001.Maca\2c2021\inge1\Cuiswindows64\windows64\CuisUniversity-4532.image!


!classRemoval: #Fraccion stamp: 'MK 9/16/2021 16:03:49'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'MK 9/16/2021 16:03:49'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'MK 9/16/2021 16:03:50'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'MK 9/16/2021 16:03:50'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----STARTUP---- (5 October 2021 18:48:08) as D:\001.Maca\2c2021\inge1\qa1\windows64\CuisUniversity-4532.image!


!classRemoval: #Fraccion stamp: 'MK 10/5/2021 18:48:35'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'MK 10/5/2021 18:48:36'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'MK 10/5/2021 18:48:36'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'MK 10/5/2021 18:48:37'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:37'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:37'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11'!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12'!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14'!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18'!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20'!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38'!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52'!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56'!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50'!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52'!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57'!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59'!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38'!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39'!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40'!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43'!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 4/15/2021 16:45:35'!
test27EnteroSubstractsEnteroCorrectly

	self assert: four - one equals: three! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:47:41'!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:00'!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05'!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08'!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:48'!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:01'!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14'!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:23'!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:32'!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:39'!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:47'!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:55'!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:03'!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:11'!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:17'!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/23/2018 23:46:28' overrides: 16927572!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:39'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:39'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 22:21:28'!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
invalidNumberType

	self error: self class invalidNumberTypeErrorDescription! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:37:13'!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'testing' stamp: 'NR 9/23/2018 23:36:49'!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:40'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:40'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:02'!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:09'!
invalidNumberTypeErrorDescription
	
	^ 'Tipo de número inválido!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:40'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:40'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 18:24:08'!
addEntero: anAdderEntero
	^Entero with: value + anAdderEntero integerValue! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/13/2021 22:15:33'!
addFraction: anAdderFraction
	^anAdderFraction addEntero: self! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 13:48:19'!
divideEntero: aDivisor
	^Fraccion with: aDivisor over: self	! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 15:37:12'!
divideFraction: aDivisor
	^aDivisor divideByEntero: self! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 18:24:26'!
multiplyEntero: aMultiplier
	^Entero with: value * aMultiplier integerValue
! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 13:37:10'!
multiplyFraction: aMultiplier
	^aMultiplier multiplyEntero: self! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 18:24:32'!
subtractToEntero: aMiniuendEntero
	^Entero with: (aMiniuendEntero integerValue) - value.
	! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 15:25:57'!
subtractToFraction: aSubstractedFraction
	^(aSubstractedFraction subtractEntero: self) ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/15/2021 12:23:02' overrides: 50864410!
* aMultiplier
	^aMultiplier multiplyEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/15/2021 12:23:07' overrides: 50864415!
+ anAdder 
	^anAdder addEntero: self
  ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/15/2021 12:23:11' overrides: 50864419!
- aSubtrahend 
	^aSubtrahend subtractToEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/15/2021 12:23:16' overrides: 50864424!
/ aDivisor 
	^aDivisor divideEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/14/2021 18:43:27'!
// aDivisor 
	
	^Entero with: value // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/15/2021 16:40:30'!
divideByGCDWith: aValue
	|greatestCommonDivisor |
	greatestCommonDivisor := self greatestCommonDivisorWith: aValue. 
	^self // greatestCommonDivisor.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/14/2021 17:13:36'!
fibonacci
	self subclassResponsibility 
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:00'!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue)! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 21:01' overrides: 16881029!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:17' overrides: 16881052!
hash

	^value hash! !
!Entero methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 20:09'!
initalizeWith: aValue 
	
	value := aValue! !
!Entero methodsFor: 'value' stamp: 'HernanWilkinson 5/7/2016 21:02'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:53:19' overrides: 50683280!
printOn: aStream

	aStream print: value ! !
!Entero methodsFor: 'testing' stamp: 'NR 9/23/2018 22:17:55' overrides: 50864438!
isNegative
	
	^value < 0! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:14' overrides: 50864442!
isOne
	
	^value = 1! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:12' overrides: 50864446!
isZero
	
	^value = 0! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:41'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:41'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'Chiro 9/14/2021 18:44:58'!
negativeFibonacciErrorDescription
	^'Fibonacci no está definido aquí para Enteros Negativos!!!!!!'
! !
!Entero class methodsFor: 'instance creation' stamp: 'Chiro 9/15/2021 13:21:25'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].

	^(self subclasses detect:[:unEnteroClass | unEnteroClass isValidFor: aValue]) with: aValue.! !

!classDefinition: #EnteroNegative category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:41'!
Entero subclass: #EnteroNegative
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroNegative category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:41'!
Entero subclass: #EnteroNegative
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegative stamp: 'MK 10/5/2021 18:48:42'!
Entero subclass: #EnteroNegative
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'MK 10/5/2021 18:48:42'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'MK 10/5/2021 18:48:43'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'MK 10/5/2021 18:48:44'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:44'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:44'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11'!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12'!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14'!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18'!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20'!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38'!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52'!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56'!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50'!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52'!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57'!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59'!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38'!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39'!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40'!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43'!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 4/15/2021 16:45:35'!
test27EnteroSubstractsEnteroCorrectly

	self assert: four - one equals: three! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:47:41'!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:00'!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05'!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08'!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:48'!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:01'!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14'!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:23'!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:32'!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:39'!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:47'!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:55'!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:03'!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:11'!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:17'!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/23/2018 23:46:28' overrides: 16927572!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:46'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:46'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 22:21:28'!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
invalidNumberType

	self error: self class invalidNumberTypeErrorDescription! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:37:13'!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'testing' stamp: 'NR 9/23/2018 23:36:49'!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:47'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:47'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:02'!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:09'!
invalidNumberTypeErrorDescription
	
	^ 'Tipo de número inválido!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:47'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:47'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 18:24:08'!
addEntero: anAdderEntero
	^Entero with: value + anAdderEntero integerValue! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/13/2021 22:15:33'!
addFraction: anAdderFraction
	^anAdderFraction addEntero: self! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 13:48:19'!
divideEntero: aDivisor
	^Fraccion with: aDivisor over: self	! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 15:37:12'!
divideFraction: aDivisor
	^aDivisor divideByEntero: self! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 18:24:26'!
multiplyEntero: aMultiplier
	^Entero with: value * aMultiplier integerValue
! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 13:37:10'!
multiplyFraction: aMultiplier
	^aMultiplier multiplyEntero: self! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 18:24:32'!
subtractToEntero: aMiniuendEntero
	^Entero with: (aMiniuendEntero integerValue) - value.
	! !
!Entero methodsFor: 'arithmetic operations XXXX' stamp: 'Chiro 9/14/2021 15:25:57'!
subtractToFraction: aSubstractedFraction
	^(aSubstractedFraction subtractEntero: self) ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/15/2021 12:23:02' overrides: 50864991!
* aMultiplier
	^aMultiplier multiplyEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/15/2021 12:23:07' overrides: 50864996!
+ anAdder 
	^anAdder addEntero: self
  ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/15/2021 12:23:11' overrides: 50865000!
- aSubtrahend 
	^aSubtrahend subtractToEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/15/2021 12:23:16' overrides: 50865005!
/ aDivisor 
	^aDivisor divideEntero: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/14/2021 18:43:27'!
// aDivisor 
	
	^Entero with: value // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/15/2021 16:40:30'!
divideByGCDWith: aValue
	|greatestCommonDivisor |
	greatestCommonDivisor := self greatestCommonDivisorWith: aValue. 
	^self // greatestCommonDivisor.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'Chiro 9/14/2021 17:13:36'!
fibonacci
	self subclassResponsibility 
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:00'!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue)! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 21:01' overrides: 16881029!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:17' overrides: 16881052!
hash

	^value hash! !
!Entero methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 20:09'!
initalizeWith: aValue 
	
	value := aValue! !
!Entero methodsFor: 'value' stamp: 'HernanWilkinson 5/7/2016 21:02'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:53:19' overrides: 50683280!
printOn: aStream

	aStream print: value ! !
!Entero methodsFor: 'testing' stamp: 'NR 9/23/2018 22:17:55' overrides: 50865019!
isNegative
	
	^value < 0! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:14' overrides: 50865023!
isOne
	
	^value = 1! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:12' overrides: 50865027!
isZero
	
	^value = 0! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:48'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:48'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'Chiro 9/14/2021 18:44:58'!
negativeFibonacciErrorDescription
	^'Fibonacci no está definido aquí para Enteros Negativos!!!!!!'
! !
!Entero class methodsFor: 'instance creation' stamp: 'Chiro 9/15/2021 13:21:25'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].

	^(self subclasses detect:[:unEnteroClass | unEnteroClass isValidFor: aValue]) with: aValue.! !

!classDefinition: #EnteroNegative category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:48'!
Entero subclass: #EnteroNegative
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroNegative category: 'Numero-Exercise' stamp: 'MK 10/5/2021 18:48:48'!
Entero subclass: #EnteroNegative
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of D:\001.Maca\2c2021\inge1\MarsRover.st----!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:48:58'!
FAILURE!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:48:58'!
FAILURE!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:48:58'!
FAILURE!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:48:58'!
FAILURE!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:48:58'!
FAILURE!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:48:58'!
FAILURE!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:48:58'!
FAILURE!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:48:58'!
FAILURE!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:48:58'!
FAILURE!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:48:58'!
FAILURE!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:48:59'!
FAILURE!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:48:59'!
FAILURE!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/5/2021 18:48:59'!
FAILURE!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:48:59'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/5/2021 18:49:22' prior: 50865418!
initializeWith: aPosition and: aDirection 
	position := aPosition.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/5/2021 18:49:33'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/5/2021 18:49:33'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/5/2021 18:49:33'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/5/2021 18:49:33'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/5/2021 18:49:33'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/5/2021 18:49:33'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/5/2021 18:49:34'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/5/2021 18:49:34'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/5/2021 18:49:34'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/5/2021 18:49:34'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/5/2021 18:49:34'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/5/2021 18:49:34'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/5/2021 18:49:34'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/5/2021 18:49:34'!
PASSED!

----SNAPSHOT----(5 October 2021 18:49:38) CuisUniversity-4532.image priorSource: 17000704!

----STARTUP---- (6 October 2021 14:27:50) as D:\001.Maca\2c2021\inge1\qa1\windows64\CuisUniversity-4532.image!


!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:31:34'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 14:31:34'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 14:31:34'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 14:31:35'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:31:35'!
PASSED!
!FacingNorth class methodsFor: 'nil' stamp: 'MK 10/6/2021 14:49:50'!
symbol
	^ #North! !
!FacingNorth class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:50:14'!
forwardFrom: aPosition
	^ aPosition + (0@1).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:50:54' prior: 50865373!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = #East ifTrue: [position _ position + (1@0).]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:50:56'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 14:50:57'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:50:57'!
PASSED!
!FacingEast class methodsFor: 'no messages' stamp: 'MK 10/6/2021 14:51:18'!
symbol
	^ #East! !
!FacingEast class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:51:29'!
forwardFrom: aPosition! !
!FacingEast class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:51:55' prior: 50865759!
forwardFrom: aPosition
	^ aPosition + (1@0).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:52:27' prior: 50865664!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = #South ifTrue: [position _ position - (0@1).]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast forwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 14:52:30'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:52:30'!
PASSED!
!FacingSouth class methodsFor: 'nil' stamp: 'MK 10/6/2021 14:53:21'!
symbol
	^ #South! !
!FacingSouth class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:53:34'!
forwardFrom: aPosition
	^ aPosition - (0@1).! !

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:53:40'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 14:53:40'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 14:53:40'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 14:53:40'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 14:53:40'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 14:53:40'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 14:53:40'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 14:53:40'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 14:53:41'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 14:53:41'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 14:53:41'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 14:53:41'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 14:53:41'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 14:53:41'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:53:41'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:54:11' prior: 50865768!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = #South ifTrue: [position _ FacingSouth forwardFrom: position]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast forwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 14:54:14'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 14:54:14'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 14:54:14'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 14:54:14'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 14:54:14'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 14:54:14'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 14:54:14'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 14:54:15'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 14:54:15'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 14:54:15'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 14:54:15'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 14:54:15'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 14:54:15'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:54:15'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:54:24' prior: 50865914!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth forwardFrom: position]. 
			direction = #West ifTrue: [position _ position - (1@0).]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast forwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 14:54:25'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 14:54:25'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 14:54:25'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 14:54:25'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 14:54:25'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 14:54:25'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 14:54:25'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 14:54:25'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 14:54:26'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 14:54:26'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 14:54:26'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 14:54:26'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 14:54:26'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:54:27'!
PASSED!
!FacingWest class methodsFor: 'nil' stamp: 'MK 10/6/2021 14:54:49'!
symbol
	^ #West! !
!FacingWest class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:55:02'!
forwardFrom: aPosition
	^ aPosition - (1@0).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:55:29' prior: 50866004!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth forwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest forwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast forwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = #North ifTrue: [position _ position - (0@1).].
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 14:55:33'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 14:55:34'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:55:34'!
PASSED!
!FacingNorth class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:56:10'!
backwardFrom: aPosition
	^ aPosition - (0@1).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:56:32' prior: 50866103!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth forwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest forwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast forwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position]. 
			direction = #South ifTrue: [position _ position + (0@1).].
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 14:56:34'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 14:56:35'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:56:35'!
PASSED!
!FacingSouth class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:56:52'!
backwardFrom: aPosition
	^ aPosition + (0@1).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:57:05' prior: 50866199!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth forwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest forwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast forwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth backwardFrom: position]. 
			direction = #West ifTrue: [position _ position + (1@0).]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 14:57:17'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:57:17'!
PASSED!
!FacingWest class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:57:31'!
backwardFrom: aPosition
	^ aPosition + (1@0).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:57:45' prior: 50866296!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth forwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest forwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast forwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth backwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest backwardFrom: position]. 
			direction = #East ifTrue: [position _ position - (1@0).]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 14:57:59'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 14:57:59'!
PASSED!
!FacingEast class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:58:08'!
backwardFrom: aPosition
	^ aPosition - (1@0).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:58:26' prior: 50866394!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth forwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest forwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast forwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth backwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest backwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast backwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 14:59:45' prior: 50866493!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth forwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest forwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast forwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth backwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest backwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast backwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:00:21' prior: 50866546!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth forwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth forwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest forwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast forwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth backwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest backwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast backwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:00:27' prior: 50866601!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position]. 
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth backwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest backwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast backwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 15:00:28'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 15:00:28'!
ERROR!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 15:00:28'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 15:00:28'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 15:00:29'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 15:00:29'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 15:00:29'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 15:00:29'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 15:00:29'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 15:00:30'!
ERROR!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 15:00:30'!
ERROR!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 15:00:30'!
ERROR!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 15:00:30'!
ERROR!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 15:00:30'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 15:01:10'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 15:01:11'!
ERROR!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 15:01:11'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 15:01:11'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 15:01:11'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 15:01:11'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 15:01:11'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 15:01:11'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 15:01:12'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 15:01:12'!
ERROR!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 15:01:12'!
ERROR!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 15:01:12'!
ERROR!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 15:01:12'!
ERROR!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 15:01:12'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 15:01:16'!
ERROR!
!FacingEast methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:01:34'!
forwardFrom: aPosition
	^ aPosition + (1@0).! !

!methodRemoval: FacingEast class #forwardFrom: stamp: 'MK 10/6/2021 15:01:34'!
forwardFrom: aPosition
	^ aPosition + (1@0).!
!FacingNorth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:01:47'!
forwardFrom: aPosition
	^ aPosition + (0@1).! !

!methodRemoval: FacingNorth class #forwardFrom: stamp: 'MK 10/6/2021 15:01:48'!
forwardFrom: aPosition
	^ aPosition + (0@1).!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:02:15' prior: 50866657!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			noMatch _ false
		].
		aCommand = $b ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position].
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth backwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest backwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast backwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!FacingSouth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:02:24'!
forwardFrom: aPosition
	^ aPosition - (0@1).! !

!methodRemoval: FacingSouth class #forwardFrom: stamp: 'MK 10/6/2021 15:02:24'!
forwardFrom: aPosition
	^ aPosition - (0@1).!
!FacingWest methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:02:29'!
forwardFrom: aPosition
	^ aPosition - (1@0).! !

!methodRemoval: FacingWest class #forwardFrom: stamp: 'MK 10/6/2021 15:02:29'!
forwardFrom: aPosition
	^ aPosition - (1@0).!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 15:02:32'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 15:02:32'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 15:02:32'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 15:02:32'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 15:02:32'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 15:02:33'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 15:02:33'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 15:02:33'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 15:02:33'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 15:02:33'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 15:02:34'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 15:02:34'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 15:02:34'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 15:02:34'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:06:12' prior: 50866805!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position].
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth backwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest backwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast backwardFrom: position]. 
			noMatch _ false
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:06:16' prior: 50866909!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position].
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth backwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest backwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast backwardFrom: position]. 
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:53:29' prior: 50866954!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ currentState backwardFrom: position.
			direction = FacingNorth symbol ifTrue: [position _ FacingNorth backwardFrom: position].
			direction = FacingSouth symbol ifTrue: [position _ FacingSouth backwardFrom: position]. 
			direction = FacingWest symbol ifTrue: [position _ FacingWest backwardFrom: position]. 
			direction = FacingEast symbol ifTrue: [position _ FacingEast backwardFrom: position]. 
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!FacingEast methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:53:38'!
backwardFrom: aPosition
	^ aPosition - (1@0).! !

!methodRemoval: FacingEast class #backwardFrom: stamp: 'MK 10/6/2021 15:53:38'!
backwardFrom: aPosition
	^ aPosition - (1@0).!
!FacingNorth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:53:43'!
backwardFrom: aPosition
	^ aPosition - (0@1).! !

!methodRemoval: FacingNorth class #backwardFrom: stamp: 'MK 10/6/2021 15:53:43'!
backwardFrom: aPosition
	^ aPosition - (0@1).!
!FacingSouth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:53:48'!
backwardFrom: aPosition
	^ aPosition + (0@1).! !

!methodRemoval: FacingSouth class #backwardFrom: stamp: 'MK 10/6/2021 15:53:48'!
backwardFrom: aPosition
	^ aPosition + (0@1).!
!FacingWest methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:53:51'!
backwardFrom: aPosition
	^ aPosition + (1@0).! !

!methodRemoval: FacingWest class #backwardFrom: stamp: 'MK 10/6/2021 15:53:51'!
backwardFrom: aPosition
	^ aPosition + (1@0).!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:53:58' prior: 50866999!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ currentState backwardFrom: position.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 15:53:59'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 15:53:59'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 15:53:59'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 15:53:59'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 15:53:59'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 15:53:59'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 15:53:59'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 15:53:59'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 15:53:59'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 15:54:00'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 15:54:00'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:56:13'!
test15ProcessMultipleCommands
	| marsRover |
	marsRover _ MarsRover at: 1@2 facing: #South.
	
	marsRover process: 'bbr'.
	
	self assert: (marsRover isAt: 1@4 facing: #West).! !

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 15:56:14'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 15:56:15'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 15:56:15'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:58:11' prior: 50867156!
test15ProcessMultipleCommands
	| marsRover |
	"Este test lo agregamos por fuera del proceso de TDD ya que por la decisión que se dió en clase temprano de implementar en process la ejecución de comandos con un 
		aSequenceOfCommands do: [:aCommand | ...]
	la situación de correr varios comandos se resolvió desde muy temprano.
	Decidimos agregar este test de todos modos por completitud."
	marsRover _ MarsRover at: 1@2 facing: #South.
	
	marsRover process: 'bbr'.
	
	self assert: (marsRover isAt: 1@4 facing: #West).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 15:58:16' prior: 50867213!
test15ProcessMultipleCommands
	| marsRover |
	"Este test lo agregamos por fuera del proceso de TDD ya que por la decisión que se dió en clase temprano de implementar en process la ejecución de comandos con un:
		aSequenceOfCommands do: [:aCommand | ...]
	la situación de correr varios comandos se resolvió desde muy temprano.
	Decidimos agregar este test de todos modos por completitud."
	marsRover _ MarsRover at: 1@2 facing: #South.
	
	marsRover process: 'bbr'.
	
	self assert: (marsRover isAt: 1@4 facing: #West).! !

----SNAPSHOT----(6 October 2021 15:58:54) CuisUniversity-4532.image priorSource: 17086492!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:04:58' prior: 50867079!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ currentState backwardFrom: position.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			direction _ currentState directionAfterRotatingLeft.
			direction = #North ifTrue: [direction _ #West] ifFalse: [
				direction = #South ifTrue: [direction _ #East] ifFalse: [
					direction = #West ifTrue: [direction _ #South] ifFalse: [
						direction = #East ifTrue: [direction _ #North] 
					].
				].
			].
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!FacingEast methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:05:17'!
directionAfterRotatingLeft
	^ #North! !
!FacingNorth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:05:33'!
directionAfterRotatingLeft
	^ #West! !
!FacingSouth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:05:46'!
directionAfterRotatingLeft
	^ #East! !
!FacingWest methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:05:54'!
directionAfterRotatingLeft
	^ #South! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:05:59' prior: 50867256!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ currentState backwardFrom: position.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			direction _ currentState directionAfterRotatingLeft.
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction = #North ifTrue: [direction _ #East] ifFalse: [
				direction = #South ifTrue: [direction _ #West] ifFalse: [
					direction = #West ifTrue: [direction _ #North] ifFalse: [
						direction = #East ifTrue: [direction _ #South] 
					].
				].
			].
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:06:01'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:06:01'!
PASSED!
!FacingEast methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:07:05'!
directionAfterRotatingRight
	^ #South! !
!FacingNorth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:07:12'!
directionAfterRotatingRight
	^ #East! !
!FacingSouth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:07:20'!
directionAfterRotatingRight
	^ #West! !
!FacingWest methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:07:30'!
directionAfterRotatingRight
	^ #North! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:07:43'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:07:43'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:07:43'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:07:43'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:07:44'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:07:44'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:07:44'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:07:44'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:07:44'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:07:44'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:07:44'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:07:44'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:07:44'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:07:44'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:07:44'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:08:04' prior: 50867310!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ currentState backwardFrom: position.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			direction _ currentState directionAfterRotatingLeft.
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction _ currentState directionAfterRotatingRight.
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:08:06'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:08:06'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:08:06'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:08:06'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:08:06'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:08:06'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:08:06'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:08:06'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:08:06'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:08:07'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:08:07'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:08:07'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:08:07'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:08:07'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:08:07'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position direction state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/6/2021 16:09:08'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/6/2021 16:11:08' prior: 50865556!
initializeWith: aPosition and: aDirection 
	position := aPosition.
	direction := aDirection.
	state := MarsRoverState facing: aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/6/2021 16:12:29' prior: 50867525!
initializeWith: aPosition and: aDirection
	position := aPosition.
	direction := aDirection.
	state := MarsRoverState facing: aDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:21:16' prior: 50867446!
process: aSequenceOfCommands 
	| noMatch currentState |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		currentState _ MarsRoverState facing: direction. 
		aCommand = $f ifTrue: [
			position _ currentState forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ currentState backwardFrom: position.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			direction _ currentState directionAfterRotatingLeft.
			state _ MarsRoverState facing: direction.
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction _ currentState directionAfterRotatingRight.
			state _ MarsRoverState facing: direction.
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:21:20'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:21:20'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:21:20'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:21:20'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:21:20'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:21:20'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:21:20'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:21:20'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:21:20'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:21:21'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:21:21'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:21:21'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:21:21'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:21:21'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:21:21'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:21:41' prior: 50867541!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			position _ state forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ state backwardFrom: position.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			direction _ state directionAfterRotatingLeft.
			state _ MarsRoverState facing: direction.
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction _ state directionAfterRotatingRight.
			state _ MarsRoverState facing: direction.
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:21:45'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:21:45'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:23:35' prior: 50867611!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			position _ state forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ state backwardFrom: position.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			direction _ state directionAfterRotatingLeft.
			state _ MarsRoverState facing: direction.
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			direction _ state directionAfterRotatingRight.
			state _ MarsRoverState facing: direction.
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:24:16' prior: 50867679!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			position _ state forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ state backwardFrom: position.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			state _ MarsRoverState facing: state directionAfterRotatingLeft.
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			state _ MarsRoverState facing: state directionAfterRotatingRight.
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:24:26'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:24:26'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:24:26'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:24:26'!
FAILURE!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:24:27'!
FAILURE!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:24:27'!
FAILURE!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:24:27'!
FAILURE!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:24:27'!
FAILURE!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:24:27'!
FAILURE!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:24:27'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:24:27'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:24:27'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:24:27'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:24:27'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:24:27'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:24:52' prior: 50867702!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			position _ state forwardFrom: position.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ state backwardFrom: position.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			state _ MarsRoverState facing: (state directionAfterRotatingLeft).
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			state _ MarsRoverState facing: (state directionAfterRotatingRight).
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:24:53'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:24:53'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:24:53'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:24:53'!
FAILURE!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:24:53'!
FAILURE!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:24:53'!
FAILURE!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:24:53'!
FAILURE!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:24:53'!
FAILURE!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:24:54'!
FAILURE!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:24:54'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:24:54'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:24:54'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:24:54'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:24:54'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:24:54'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:25:15' prior: 50865366!
isAt: aPosition facing: aDirection 
	position = aPosition ifTrue: [
		state symbol = aDirection ifTrue: [^ true].	
	].
	
	^false.! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:25:17'!
ERROR!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:25:17'!
ERROR!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:25:17'!
ERROR!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:25:17'!
ERROR!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:25:17'!
ERROR!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:25:17'!
ERROR!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:25:17'!
ERROR!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:25:17'!
ERROR!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:25:17'!
ERROR!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:25:17'!
ERROR!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:25:18'!
ERROR!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:25:18'!
ERROR!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:25:18'!
ERROR!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:25:18'!
ERROR!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:25:18'!
ERROR!
!MarsRoverState class methodsFor: 'class initialization' stamp: 'MK 10/6/2021 16:26:19'!
symbol
	self subclassResponsibility ! !
!FacingWest class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:26:39'!
direction
	^ #West! !
!FacingNorth class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:26:39'!
direction
	^ #North! !
!FacingEast class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:26:39'!
direction
	^ #East! !
!FacingSouth class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:26:39'!
direction
	^ #South! !
!MarsRoverState class methodsFor: 'class initialization' stamp: 'MK 10/6/2021 16:26:39'!
direction
	self subclassResponsibility ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:26:39' prior: 50867834!
isAt: aPosition facing: aDirection 
	position = aPosition ifTrue: [
		state direction = aDirection ifTrue: [^ true].	
	].
	
	^false.! !

!methodRemoval: FacingWest class #symbol stamp: 'MK 10/6/2021 16:26:39'!
symbol
	^ #West!

!methodRemoval: FacingNorth class #symbol stamp: 'MK 10/6/2021 16:26:39'!
symbol
	^ #North!

!methodRemoval: FacingEast class #symbol stamp: 'MK 10/6/2021 16:26:39'!
symbol
	^ #East!

!methodRemoval: FacingSouth class #symbol stamp: 'MK 10/6/2021 16:26:39'!
symbol
	^ #South!

!methodRemoval: MarsRoverState class #symbol stamp: 'MK 10/6/2021 16:26:39'!
symbol
	self subclassResponsibility !
!MarsRoverState methodsFor: 'class initialization' stamp: 'MK 10/6/2021 16:26:44'!
direction
	self subclassResponsibility ! !

!methodRemoval: MarsRoverState class #direction stamp: 'MK 10/6/2021 16:26:45'!
direction
	self subclassResponsibility !
!FacingEast methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:26:55' overrides: 50867933!
direction
	^ #East! !

!methodRemoval: FacingEast class #direction stamp: 'MK 10/6/2021 16:26:55'!
direction
	^ #East!
!FacingNorth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:27:00' overrides: 50867933!
direction
	^ #North! !

!methodRemoval: FacingNorth class #direction stamp: 'MK 10/6/2021 16:27:00'!
direction
	^ #North!
!FacingSouth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:27:05' overrides: 50867933!
direction
	^ #South! !

!methodRemoval: FacingSouth class #direction stamp: 'MK 10/6/2021 16:27:05'!
direction
	^ #South!
!FacingWest methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:27:09' overrides: 50867933!
direction
	^ #West! !

!methodRemoval: FacingWest class #direction stamp: 'MK 10/6/2021 16:27:09'!
direction
	^ #West!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:27:15'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:27:16'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:27:16'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/6/2021 16:27:36' prior: 50867533!
initializeWith: aPosition and: aDirection
	position := aPosition.
	state := MarsRoverState facing: aDirection.! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:27:37'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:27:37'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:27:37'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:27:37'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:27:37'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:27:37'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:27:37'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:27:37'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:27:37'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:27:37'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:27:38'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:27:38'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:27:38'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:27:38'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:27:38'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/6/2021 16:27:44'!
Object subclass: #MarsRover
	instanceVariableNames: 'position state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:27:50'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:27:50'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:30:41'!
moveForward

! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:31:17' prior: 50868123!
moveForward

	position _ state forwardFrom: position.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:31:38' prior: 50867768!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			self moveForward.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			position _ state backwardFrom: position.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			state _ MarsRoverState facing: (state directionAfterRotatingLeft).
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			state _ MarsRoverState facing: (state directionAfterRotatingRight).
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:31:39'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:31:39'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:31:39'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:31:39'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:31:39'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:31:39'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:31:39'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:31:40'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:31:40'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:31:40'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:31:40'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:31:40'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:31:40'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:31:40'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:31:40'!
PASSED!

Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverState category: 'MarsRover' stamp: 'MK 10/6/2021 16:34:00'!
Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:36:46'!
moveBackward

	position _ state backwardFrom: position.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:37:21' prior: 50868132!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			self moveForward.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			self moveBackward.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			state _ MarsRoverState facing: (state directionAfterRotatingLeft).
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			state _ MarsRoverState facing: (state directionAfterRotatingRight).
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:37:21'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:37:21'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:39:08'!
rotateLeft

	state _ MarsRoverState facing: (state directionAfterRotatingLeft).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:39:28'!
rotateRight

	state _ MarsRoverState facing: (state directionAfterRotatingRight).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:40:26' prior: 50868213!
process: aSequenceOfCommands 
	| noMatch |
	aSequenceOfCommands do: [:aCommand | 
		noMatch _ true.
		aCommand = $f ifTrue: [
			self moveForward.
			noMatch _ false.
		].
		aCommand = $b ifTrue: [
			self moveBackward.
			noMatch _ false.
		].
		aCommand = $l ifTrue: [			
			self rotateLeft.
			noMatch _ false
		].
		aCommand = $r ifTrue: [
			self rotateRight.
			noMatch _ false
		].
		noMatch ifTrue: [^ self].
	].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 16:40:32'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 16:40:32'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 16:40:32'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 16:40:32'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 16:40:32'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 16:40:32'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 16:40:32'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 16:40:32'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 16:40:32'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 16:40:32'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 16:40:33'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 16:40:33'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 16:40:33'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 16:40:33'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 16:40:33'!
PASSED!
!MarsRover methodsFor: 'rotation' stamp: 'MK 10/6/2021 16:48:20'!
changeStateTo: aDirection

	state _ MarsRoverState facing: (state directionAfterRotatingLeft).
	! !
!MarsRover methodsFor: 'rotation' stamp: 'MK 10/6/2021 16:50:27'!
changeFacingDirectionTo: aDirection

	state _ MarsRoverState facing: (state directionAfterRotatingLeft).
	! !

!methodRemoval: MarsRover #changeStateTo: stamp: 'MK 10/6/2021 16:50:27'!
changeStateTo: aDirection

	state _ MarsRoverState facing: (state directionAfterRotatingLeft).
	!

!classRenamed: #MarsRoverState as: #MarsRoverFacingDirection stamp: 'MK 10/6/2021 16:50:50'!
Smalltalk renameClassNamed: #MarsRoverState as: #MarsRoverFacingDirection!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:50:50' prior: 50868282!
rotateRight

	state _ MarsRoverFacingDirection facing: (state directionAfterRotatingRight).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:50:50' prior: 50868355!
changeFacingDirectionTo: aDirection

	state _ MarsRoverFacingDirection facing: (state directionAfterRotatingLeft).
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:50:50' prior: 50868277!
rotateLeft

	state _ MarsRoverFacingDirection facing: (state directionAfterRotatingLeft).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:50:50' prior: 50868015!
initializeWith: aPosition and: aDirection
	position := aPosition.
	state := MarsRoverFacingDirection facing: aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/6/2021 16:53:08'!
initializeAt: aPosition facing: aDirection
	position := aPosition.
	state := MarsRoverFacingDirection facing: aDirection.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 16:53:09' prior: 50865432!
at: aPosition facing: aDirection 
	^ self new initializeAt: aPosition facing: aDirection.! !

!methodRemoval: MarsRover #initializeWith:and: stamp: 'MK 10/6/2021 16:53:09'!
initializeWith: aPosition and: aDirection
	position := aPosition.
	state := MarsRoverFacingDirection facing: aDirection.!
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/6/2021 16:53:51' prior: 50868399!
initializeAt: aPosition facing: aCardinalDirection
	position := aPosition.
	state := MarsRoverFacingDirection facing: aCardinalDirection.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/6/2021 17:06:17'!
Object subclass: #MarsRover
	instanceVariableNames: 'position facingDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:06:17' prior: 50868127!
moveForward

	position _ facingDirection forwardFrom: position.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:06:17' prior: 50868386!
rotateLeft

	facingDirection _ MarsRoverFacingDirection facing: (facingDirection directionAfterRotatingLeft).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:06:18' prior: 50868373!
rotateRight

	facingDirection _ MarsRoverFacingDirection facing: (facingDirection directionAfterRotatingRight).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:06:18' prior: 50868379!
changeFacingDirectionTo: aDirection

	facingDirection _ MarsRoverFacingDirection facing: (facingDirection directionAfterRotatingLeft).
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:06:18' prior: 50868208!
moveBackward

	position _ facingDirection backwardFrom: position.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:06:18' prior: 50868418!
initializeAt: aPosition facing: aCardinalDirection
	position := aPosition.
	facingDirection := MarsRoverFacingDirection facing: aCardinalDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:06:18' prior: 50867911!
isAt: aPosition facing: aDirection 
	position = aPosition ifTrue: [
		facingDirection direction = aDirection ifTrue: [^ true].	
	].
	
	^false.! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 17:06:20'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 17:06:20'!
PASSED!
!MarsRoverFacingDirection class methodsFor: 'class initialization' stamp: 'MK 10/6/2021 17:07:56'!
newWith: aDirection
	aDirection = #South ifTrue: [^ FacingSouth new].
	aDirection = #North ifTrue: [^ FacingNorth new].
	aDirection = #West ifTrue: [^ FacingWest new].
	aDirection = #East ifTrue: [^ FacingEast new].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:07:56' prior: 50868466!
initializeAt: aPosition facing: aCardinalDirection
	position := aPosition.
	facingDirection := MarsRoverFacingDirection newWith: aCardinalDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:07:56' prior: 50868452!
changeFacingDirectionTo: aDirection

	facingDirection _ MarsRoverFacingDirection newWith: (facingDirection directionAfterRotatingLeft).
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:07:57' prior: 50868445!
rotateRight

	facingDirection _ MarsRoverFacingDirection newWith: (facingDirection directionAfterRotatingRight).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:07:57' prior: 50868438!
rotateLeft

	facingDirection _ MarsRoverFacingDirection newWith: (facingDirection directionAfterRotatingLeft).! !

!methodRemoval: MarsRoverFacingDirection class #facing: stamp: 'MK 10/6/2021 17:07:57'!
facing: aDirection
	aDirection = #South ifTrue: [^ FacingSouth new].
	aDirection = #North ifTrue: [^ FacingNorth new].
	aDirection = #West ifTrue: [^ FacingWest new].
	aDirection = #East ifTrue: [^ FacingEast new].!
!MarsRover class methodsFor: 'initialization' stamp: 'MK 10/6/2021 17:08:23' prior: 50868406!
at: aPosition facing: aCardinalDirection 
	^ self new initializeAt: aPosition facing: aCardinalDirection.! !

!methodRemoval: MarsRover #changeFacingDirectionTo: stamp: 'MK 10/6/2021 17:08:54'!
changeFacingDirectionTo: aDirection

	facingDirection _ MarsRoverFacingDirection newWith: (facingDirection directionAfterRotatingLeft).
	!
!MarsRover methodsFor: 'rotation' stamp: 'MK 10/6/2021 17:09:51'!
changeFacingDirectionTo: aCardinalDirection

	facingDirection _ MarsRoverFacingDirection newWith: aCardinalDirection.! !
!MarsRover methodsFor: 'rotation' stamp: 'MK 10/6/2021 17:10:26' prior: 50868560!
rotateLeft

	self changeFacingDirectionTo: (facingDirection directionAfterRotatingLeft).! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 17:10:28'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 17:10:28'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 17:10:28'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 17:10:28'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 17:10:28'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 17:10:28'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 17:10:28'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 17:10:29'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 17:10:29'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 17:10:29'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 17:10:29'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 17:10:29'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 17:10:29'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 17:10:29'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 17:10:29'!
PASSED!
!MarsRover methodsFor: 'rotation' stamp: 'MK 10/6/2021 17:10:40' prior: 50868553!
rotateRight

	self changeFacingDirectionTo: (facingDirection directionAfterRotatingRight).! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 17:10:41'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 17:10:41'!
PASSED!
!MarsRover methodsFor: 'assertion' stamp: 'MK 10/6/2021 17:12:14' prior: 50868474!
isAt: aPosition facing: aDirection 

	^ position = aPosition and: [facingDirection direction = aDirection].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/6/2021 17:12:15'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/6/2021 17:12:16'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/6/2021 17:12:16'!
PASSED!
!MarsRoverFacingDirection methodsFor: 'class initialization' stamp: 'MK 10/6/2021 17:14:16'!
asCardinalDirection
	self subclassResponsibility ! !
!FacingEast methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:14:16' overrides: 50868751!
asCardinalDirection
	^ #East! !
!FacingNorth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:14:16' overrides: 50868751!
asCardinalDirection
	^ #North! !
!FacingSouth methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:14:16' overrides: 50868751!
asCardinalDirection
	^ #South! !
!FacingWest methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:14:16' overrides: 50868751!
asCardinalDirection
	^ #West! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/6/2021 17:14:16' prior: 50868699!
isAt: aPosition facing: aDirection 

	^ position = aPosition and: [facingDirection asCardinalDirection = aDirection].! !

!methodRemoval: MarsRoverFacingDirection #direction stamp: 'MK 10/6/2021 17:14:16'!
direction
	self subclassResponsibility !

!methodRemoval: FacingEast #direction stamp: 'MK 10/6/2021 17:14:16'!
direction
	^ #East!

!methodRemoval: FacingNorth #direction stamp: 'MK 10/6/2021 17:14:16'!
direction
	^ #North!

!methodRemoval: FacingSouth #direction stamp: 'MK 10/6/2021 17:14:16'!
direction
	^ #South!

!methodRemoval: FacingWest #direction stamp: 'MK 10/6/2021 17:14:16'!
direction
	^ #West!
!MarsRover methodsFor: 'assertion' stamp: 'MK 10/6/2021 17:14:32' prior: 50868775!
isAt: aPosition facing: aCardinalDirection 

	^ position = aPosition and: [facingDirection asCardinalDirection = aCardinalDirection].! !

----SNAPSHOT----(6 October 2021 17:15:00) CuisUniversity-4532.image priorSource: 17139239!

----SNAPSHOT----(6 October 2021 17:27:26) CuisUniversity-4532.image priorSource: 17188904!

----SNAPSHOT----(6 October 2021 17:51:55) CuisUniversity-4532.image priorSource: 17188996!

----SNAPSHOT----(6 October 2021 18:21:12) CuisUniversity-4532.image priorSource: 17189088!

----STARTUP---- (7 October 2021 14:43:01) as D:\001.Maca\2c2021\inge1\qa1\windows64\CuisUniversity-4532.image!


Object subclass: #CustomizableCommand
	instanceVariableNames: 'xxxx yyyy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #CustomizableCommand category: 'MarsRover' stamp: 'MK 10/7/2021 14:47:33'!
Object subclass: #CustomizableCommand
	instanceVariableNames: 'xxxx yyyy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CustomizableCommand class methodsFor: 'nil' stamp: 'MK 10/7/2021 14:48:28'!
for: aCommandString xxxx: anActionClosure
	
	^ CustomizableCommand new initializeFor: aCommandString yyyy: anActionClosure.! !
!CustomizableCommand methodsFor: 'no messages' stamp: 'MK 10/7/2021 14:49:13'!
execute
	
	yyyy value.! !

----SNAPSHOT----(7 October 2021 14:49:24) CuisUniversity-4532.image priorSource: 17189180!
!CustomizableCommand methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 14:49:32'!
initializeFor: aCommandString  yyyy: anActionClosure.

	xxxx := aCommandString .
	yyyy := anActionClosure .! !
!CustomizableCommand methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 14:49:42'!
isFor: aCommandCharacter

	^xxxx = aCommandCharacter asString.! !

Object subclass: #MarsRover
	instanceVariableNames: 'position facingDirection commands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/7/2021 14:50:35'!
Object subclass: #MarsRover
	instanceVariableNames: 'position facingDirection commands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 14:51:36' prior: 50868288!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommandString | 
		(commands detect: [:aCommand | aCommand isFor: aCommandString ] 
			ifNone: [^self]) execute
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 14:52:19' prior: 50868870!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommandString | 
		(commands detect: [:aCommand | aCommand isFor: aCommandString ] 
			ifNone: [^self]) execute.
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 14:52:28' prior: 50868879!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommandString | 
		(commands 
			detect: [:aCommand | aCommand isFor: aCommandString ] 
			ifNone: [^self]) 
		execute.
	]! !
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/7/2021 14:53:16' prior: 50868537!
initializeAt: aPosition facing: aCardinalDirection
	position := aPosition.
	facingDirection := MarsRoverFacingDirection newWith: aCardinalDirection.
	commands := OrderedCollection with:( CustomizableCommand for: 'f' xxxx: [self moveForward]) 
							      with:( CustomizableCommand for: 'b' xxxx: [self moveBackward]) 
							      with:( CustomizableCommand for: 'l' xxxx: [self rotateLeft ]) 
							      with:( CustomizableCommand for: 'r' xxxx: [self rotateRight ]).! !
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/7/2021 14:53:40' prior: 50868897!
initializeAt: aPosition facing: aCardinalDirection
	position := aPosition.
	facingDirection := MarsRoverFacingDirection newWith: aCardinalDirection.
	commands := OrderedCollection 
			with:( CustomizableCommand for: 'f' xxxx: [self moveForward]) 
			with:( CustomizableCommand for: 'b' xxxx: [self moveBackward]) 
			with:( CustomizableCommand for: 'l' xxxx: [self rotateLeft ]) 
			with:( CustomizableCommand for: 'r' xxxx: [self rotateRight ]).! !
!MarsRover methodsFor: 'initialization' stamp: 'MK 10/7/2021 14:53:47' prior: 50868915!
initializeAt: aPosition facing: aCardinalDirection
	position := aPosition.
	facingDirection := MarsRoverFacingDirection newWith: aCardinalDirection.
	commands := OrderedCollection 
				with:( CustomizableCommand for: 'f' xxxx: [self moveForward]) 
				with:( CustomizableCommand for: 'b' xxxx: [self moveBackward]) 
				with:( CustomizableCommand for: 'l' xxxx: [self rotateLeft ]) 
				with:( CustomizableCommand for: 'r' xxxx: [self rotateRight ]).! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/7/2021 14:53:58'!
PASSED!

----SNAPSHOT----(7 October 2021 14:54:02) CuisUniversity-4532.image priorSource: 17190105!
!CustomizableCommand methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:34:49'!
initializeFor: aCommandString  withAction: anActionClosure.

	xxxx := aCommandString .
	yyyy := anActionClosure .! !
!CustomizableCommand class methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:34:49' prior: 50868831!
for: aCommandString xxxx: anActionClosure
	
	^ CustomizableCommand new initializeFor: aCommandString withAction: anActionClosure.! !

!methodRemoval: CustomizableCommand #initializeFor:yyyy: stamp: 'MK 10/7/2021 15:34:49'!
initializeFor: aCommandString  yyyy: anActionClosure.

	xxxx := aCommandString .
	yyyy := anActionClosure .!

!classDefinition: #CustomizableCommand category: 'MarsRover' stamp: 'MK 10/7/2021 15:35:07'!
Object subclass: #CustomizableCommand
	instanceVariableNames: 'xxxx action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CustomizableCommand methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:35:07' prior: 50868997!
initializeFor: aCommandString  withAction: anActionClosure.

	xxxx := aCommandString .
	action := anActionClosure .! !
!CustomizableCommand methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:35:07' prior: 50868838!
execute
	
	action value.! !

!classDefinition: #CustomizableCommand category: 'MarsRover' stamp: 'MK 10/7/2021 15:36:26'!
Object subclass: #CustomizableCommand
	instanceVariableNames: 'command action'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CustomizableCommand methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:36:26' prior: 50868852!
isFor: aCommandCharacter

	^command = aCommandCharacter asString.! !
!CustomizableCommand methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:36:26' prior: 50869027!
initializeFor: aCommandString  withAction: anActionClosure.

	command := aCommandString .
	action := anActionClosure .! !
!CustomizableCommand methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:36:44'!
executeAction
	
	action value.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:36:45' prior: 50868888!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommandString | 
		(commands 
			detect: [:aCommand | aCommand isFor: aCommandString ] 
			ifNone: [^self]) 
		executeAction.
	]! !

!methodRemoval: CustomizableCommand #execute stamp: 'MK 10/7/2021 15:36:45'!
execute
	
	action value.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:38:28' prior: 50869063!
process: aSequenceOfCommands

	aSequenceOfCommands do: 
	[:aCommandString | 
		(commands 
			detect: [:aCommand | aCommand isFor: aCommandString ] 
			ifNone: [^self]
		) executeAction.
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:38:44' prior: 50869076!
process: aSequenceOfCommands

	aSequenceOfCommands do: 
	[:aCommandString | 
		(commands 
			detect: [:aCommand | aCommand isFor: aCommandString ] 
			ifNone: [self]
		) executeAction.
	]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:38:53' prior: 50869085!
process: aSequenceOfCommands

	aSequenceOfCommands do: 
	[:aCommandString | 
		(commands 
			detect: [:aCommand | aCommand isFor: aCommandString ] 
			ifNone: [^self]
		) executeAction.
	]! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/7/2021 15:38:54'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/7/2021 15:38:55'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/7/2021 15:38:55'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/7/2021 15:38:55'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:41:22' prior: 50869094!
process: aSequenceOfCommands

	aSequenceOfCommands do: 
	[:aCommandString | 
		(commands 
			detect: [:aCommand | aCommand isFor: aCommandString ] 
			ifNone: [^self]
		) executeAction.
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:48:38' prior: 50869148!
process: aSequenceOfCommands

	aSequenceOfCommands do: 
	[:aCommandString | 
		self executeCommand: aCommandString ifInvalid: [^ self].
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:50:08'!
executeCommand: aCommandString ifInvalid: aClosure
	(commands 	detect: [:aCommand | aCommand isFor: aCommandString ] 
			   ifNone: aClosure ) executeAction.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:50:12' prior: 50869164!
executeCommand: aCommandString ifInvalid: aClosure
	
	(commands 	detect: [:aCommand | aCommand isFor: aCommandString ] 
			   ifNone: aClosure ) executeAction.! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/7/2021 15:50:18'!
PASSED!

!testRun: #MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/7/2021 15:50:19'!
PASSED!
!CustomizableCommand class methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:51:11'!
for: aCommandString withAction: anActionClosure
	
	^ CustomizableCommand new initializeFor: aCommandString withAction: anActionClosure.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 15:51:12' prior: 50868932!
initializeAt: aPosition facing: aCardinalDirection
	position := aPosition.
	facingDirection := MarsRoverFacingDirection newWith: aCardinalDirection.
	commands := OrderedCollection 
				with:( CustomizableCommand for: 'f' withAction: [self moveForward]) 
				with:( CustomizableCommand for: 'b' withAction: [self moveBackward]) 
				with:( CustomizableCommand for: 'l' withAction: [self rotateLeft ]) 
				with:( CustomizableCommand for: 'r' withAction: [self rotateRight ]).! !

!methodRemoval: CustomizableCommand class #for:xxxx: stamp: 'MK 10/7/2021 15:51:12'!
for: aCommandString xxxx: anActionClosure
	
	^ CustomizableCommand new initializeFor: aCommandString withAction: anActionClosure.!

----SNAPSHOT----(7 October 2021 15:52:35) CuisUniversity-4532.image priorSource: 17194979!

!methodRemoval: MarsRoverTest #test15ProcessMultipleCommands stamp: 'MK 10/7/2021 15:55:34'!
test15ProcessMultipleCommands
	| marsRover |
	"Este test lo agregamos por fuera del proceso de TDD ya que por la decisión que se dió en clase temprano de implementar en process la ejecución de comandos con un:
		aSequenceOfCommands do: [:aCommand | ...]
	la situación de correr varios comandos se resolvió desde muy temprano.
	Decidimos agregar este test de todos modos por completitud."
	marsRover _ MarsRover at: 1@2 facing: #South.
	
	marsRover process: 'bbr'.
	
	self assert: (marsRover isAt: 1@4 facing: #West).!

!classRenamed: #MarsRoverFacingDirection as: #MarsRoverState2 stamp: 'MK 10/7/2021 16:02:08'!
Smalltalk renameClassNamed: #MarsRoverFacingDirection as: #MarsRoverState2!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:02:09' prior: 50869233!
initializeAt: aPosition facing: aCardinalDirection
	position := aPosition.
	facingDirection := MarsRoverState2 newWith: aCardinalDirection.
	commands := OrderedCollection 
				with:( CustomizableCommand for: 'f' withAction: [self moveForward]) 
				with:( CustomizableCommand for: 'b' withAction: [self moveBackward]) 
				with:( CustomizableCommand for: 'l' withAction: [self rotateLeft ]) 
				with:( CustomizableCommand for: 'r' withAction: [self rotateRight ]).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:02:09' prior: 50868590!
changeFacingDirectionTo: aCardinalDirection

	facingDirection _ MarsRoverState2 newWith: aCardinalDirection.! !

Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverState category: 'MarsRover' stamp: 'MK 10/7/2021 16:02:51'!
Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverState stamp: 'MK 10/7/2021 16:02:57'!
Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRenamed: #MarsRoverState2 as: #MarsRoverState stamp: 'MK 10/7/2021 16:03:01'!
Smalltalk renameClassNamed: #MarsRoverState2 as: #MarsRoverState!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:03:02' prior: 50869285!
initializeAt: aPosition facing: aCardinalDirection
	position := aPosition.
	facingDirection := MarsRoverState newWith: aCardinalDirection.
	commands := OrderedCollection 
				with:( CustomizableCommand for: 'f' withAction: [self moveForward]) 
				with:( CustomizableCommand for: 'b' withAction: [self moveBackward]) 
				with:( CustomizableCommand for: 'l' withAction: [self rotateLeft ]) 
				with:( CustomizableCommand for: 'r' withAction: [self rotateRight ]).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:03:02' prior: 50869303!
changeFacingDirectionTo: aCardinalDirection

	facingDirection _ MarsRoverState newWith: aCardinalDirection.! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/7/2021 16:03:23'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/7/2021 16:03:24'!
PASSED!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'MK 10/7/2021 16:04:55'!
Object subclass: #MarsRover
	instanceVariableNames: 'position state commands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:04:55' prior: 50868433!
moveForward

	position _ state forwardFrom: position.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:04:55' prior: 50868597!
rotateLeft

	self changeFacingDirectionTo: (state directionAfterRotatingLeft).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:04:55' prior: 50868648!
rotateRight

	self changeFacingDirectionTo: (state directionAfterRotatingRight).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:04:55' prior: 50869350!
changeFacingDirectionTo: aCardinalDirection

	state _ MarsRoverState newWith: aCardinalDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:04:55' prior: 50868460!
moveBackward

	position _ state backwardFrom: position.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:04:55' prior: 50869332!
initializeAt: aPosition facing: aCardinalDirection
	position := aPosition.
	state := MarsRoverState newWith: aCardinalDirection.
	commands := OrderedCollection 
				with:( CustomizableCommand for: 'f' withAction: [self moveForward]) 
				with:( CustomizableCommand for: 'b' withAction: [self moveBackward]) 
				with:( CustomizableCommand for: 'l' withAction: [self rotateLeft ]) 
				with:( CustomizableCommand for: 'r' withAction: [self rotateRight ]).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:04:56' prior: 50868797!
isAt: aPosition facing: aCardinalDirection 

	^ position = aPosition and: [state asCardinalDirection = aCardinalDirection].! !

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/7/2021 16:05:02'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/7/2021 16:05:03'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/7/2021 16:05:03'!
PASSED!
!MarsRoverState methodsFor: 'conversion' stamp: 'MK 10/7/2021 16:05:40'!
backwardFrom: aDirection
	self subclassResponsibility ! !
!MarsRoverState methodsFor: 'conversion' stamp: 'MK 10/7/2021 16:05:52' prior: 50869502!
backwardFrom: aPosition
	self subclassResponsibility ! !
!MarsRoverState methodsFor: 'conversion' stamp: 'MK 10/7/2021 16:05:59'!
forwardFrom: aPosition
	self subclassResponsibility ! !
!MarsRoverState methodsFor: 'conversion' stamp: 'MK 10/7/2021 16:06:11'!
directionAfterRotatingLeft
	self subclassResponsibility ! !
!MarsRoverState methodsFor: 'conversion' stamp: 'MK 10/7/2021 16:06:14'!
directionAfterRotatingRight
	self subclassResponsibility ! !
!FacingSouth methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:07:36'!
facingDirection
	^ #South! !
!FacingEast methodsFor: 'conversion' stamp: 'MK 10/7/2021 16:07:36'!
facingDirection
	^ #East! !
!MarsRoverState methodsFor: 'conversion' stamp: 'MK 10/7/2021 16:07:36'!
facingDirection
	self subclassResponsibility ! !
!FacingNorth methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:07:36' overrides: 50869535!
facingDirection
	^ #North! !
!FacingWest methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:07:36' overrides: 50869535!
facingDirection
	^ #West! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'MK 10/7/2021 16:07:36' prior: 50869453!
isAt: aPosition facing: aCardinalDirection 

	^ position = aPosition and: [state facingDirection = aCardinalDirection].! !

!methodRemoval: FacingSouth #asCardinalDirection stamp: 'MK 10/7/2021 16:07:36'!
asCardinalDirection
	^ #South!

!methodRemoval: FacingEast #asCardinalDirection stamp: 'MK 10/7/2021 16:07:36'!
asCardinalDirection
	^ #East!

!methodRemoval: MarsRoverState #asCardinalDirection stamp: 'MK 10/7/2021 16:07:36'!
asCardinalDirection
	self subclassResponsibility !

!methodRemoval: FacingNorth #asCardinalDirection stamp: 'MK 10/7/2021 16:07:36'!
asCardinalDirection
	^ #North!

!methodRemoval: FacingWest #asCardinalDirection stamp: 'MK 10/7/2021 16:07:36'!
asCardinalDirection
	^ #West!

----SNAPSHOT----(7 October 2021 16:12:15) CuisUniversity-4532.image priorSource: 17203414!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/7/2021 16:12:32'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/7/2021 16:12:38'!
PASSED!

!testRun: #MarsRoverTest #test01NoCommands stamp: 'MK 10/7/2021 16:12:41'!
PASSED!

!testRun: #MarsRoverTest #test02MoveForwardFacingNorth stamp: 'MK 10/7/2021 16:12:41'!
PASSED!

!testRun: #MarsRoverTest #test03BackwardsFacingNorth stamp: 'MK 10/7/2021 16:12:41'!
PASSED!

!testRun: #MarsRoverTest #test04RotateLeftFacingNorth stamp: 'MK 10/7/2021 16:12:41'!
PASSED!

!testRun: #MarsRoverTest #test05RotateLeftFacingSouth stamp: 'MK 10/7/2021 16:12:41'!
PASSED!

!testRun: #MarsRoverTest #test06RotateLeftFacingWest stamp: 'MK 10/7/2021 16:12:41'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftFacingEast stamp: 'MK 10/7/2021 16:12:41'!
PASSED!

!testRun: #MarsRoverTest #test08RotateRightFacingNorth stamp: 'MK 10/7/2021 16:12:41'!
PASSED!

!testRun: #MarsRoverTest #test09RotateRightFacingSouth stamp: 'MK 10/7/2021 16:12:42'!
PASSED!

!testRun: #MarsRoverTest #test10CommandsAfterInvalidCommandAreDiscarded stamp: 'MK 10/7/2021 16:12:42'!
PASSED!

!testRun: #MarsRoverTest #test11MoveForwardFacingSouth stamp: 'MK 10/7/2021 16:12:42'!
PASSED!

!testRun: #MarsRoverTest #test12MoveForwardFacingEast stamp: 'MK 10/7/2021 16:12:42'!
PASSED!

!testRun: #MarsRoverTest #test13MoveForwardFacingWest stamp: 'MK 10/7/2021 16:12:42'!
PASSED!

!testRun: #MarsRoverTest #test14MoveBackwardsFacingSouth stamp: 'MK 10/7/2021 16:12:42'!
PASSED!
!MarsRover methodsFor: 'rotation' stamp: 'MK 10/7/2021 16:17:01' prior: 50869411!
rotateLeft

	self changeFacingDirectionTo: (state directionAfterRotatingLeft).! !